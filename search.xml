<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>[20220115杂题选讲]Count the graphs</title>
    <url>/2022/01/15/20220115-Count-the-graphs/</url>
    <content><![CDATA[<p>简单计数。</p>
<span id="more"></span>
<h2 id="大意"><a href="#大意" class="headerlink" title="大意"></a>大意</h2><p>有多少 $n$ 个点的带点权无向图，使得 $1$ 和 $2$ 的距离为 $k$？</p>
<p>$n\le 100$，对 $10^9+7$ 取模。时限 2s。</p>
<p>link: <a href="http://qoj.ac/contest/802/problem/2158">http://qoj.ac/contest/802/problem/2158</a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>对整个图进行从 $1$ 开始的最短路分层。</p>
<p>设 $f_{i,j,t}$ 为当前到第 $i$ 层，已经用了 $j$ 个点，这一层 $t$ 个点的方案数。</p>
<p>考察第 $i$ 层的可能情况（注意要留着 $2$ 在第 $k$ 层），容易写出以下的转移式：</p>
<script type="math/tex; mode=display">
f_{i,j,t}=\sum\limits_{s=1}^{j-t}2^{\binom t2}\cdot(2^s-1)^t\cdot\dbinom{n-j+t-[i\le k]}{t-[i=k]}\cdot f_{i-1,j-t,s}</script><p>系数全部预处理，时间复杂度 $\Theta(n^4)$。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> mirai &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> MAXN = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> MAXM = <span class="number">10005</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> pow[MAXM], pow2[MAXN][MAXN], c[MAXN][MAXN];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> dp[MAXN][MAXN][MAXN];</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> f(i, j, k) (dp[i][j][k])</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> n, k, MOD;</span><br><span class="line">  std::<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;k, &amp;MOD);</span><br><span class="line"><span class="comment">//  std::printf(&quot; %d\n&quot;, n);</span></span><br><span class="line">  <span class="keyword">if</span> (MOD == <span class="number">1</span>) &#123;</span><br><span class="line">    std::<span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  pow[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; MAXM; ++i) &#123;</span><br><span class="line">    pow[i] = (pow[i - <span class="number">1</span>] * <span class="number">2</span>) % MOD;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAXN; ++i) &#123;</span><br><span class="line">    pow2[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    pow2[i][<span class="number">1</span>] = (pow[i] - <span class="number">1</span> + MOD) % MOD;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; MAXN; ++j) &#123;</span><br><span class="line">      pow2[i][j] = pow2[i][j - <span class="number">1</span>] * pow2[i][<span class="number">1</span>] % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  c[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; MAXN; ++i) &#123;</span><br><span class="line">    c[i][<span class="number">0</span>] = c[i][i] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i / <span class="number">2</span>; ++j) &#123;</span><br><span class="line">      c[i][j] = c[i][i - j] = (c[i - <span class="number">1</span>][j - <span class="number">1</span>] + c[i - <span class="number">1</span>][j]) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//  std::printf(&quot; &quot;);</span></span><br><span class="line"><span class="comment">//  for (int i = 0; i &lt; 10; ++i) &#123;</span></span><br><span class="line"><span class="comment">//    std::printf(&quot;%d &quot;, pow[i]);</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="comment">//  std::printf(&quot;\n &quot;);</span></span><br><span class="line"><span class="comment">//  for (int i = 0; i &lt; 10; ++i) &#123;</span></span><br><span class="line"><span class="comment">//    for (int j = 0; j &lt; 10; ++j) &#123;</span></span><br><span class="line"><span class="comment">//      std::printf(&quot;%d &quot;, c[i][j]);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    std::printf(&quot;\n &quot;);</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="comment">//  std::printf(&quot;\n&quot;);</span></span><br><span class="line">  </span><br><span class="line">  <span class="built_in">f</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>) = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> t = <span class="number">1</span>; t &lt; j; ++t) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> s = <span class="number">1</span>; s &lt;= j - t; ++s) &#123;</span><br><span class="line">          <span class="built_in">f</span>(i, j, t) = (<span class="built_in">f</span>(i, j, t) + pow[c[t][<span class="number">2</span>]] * pow2[s][t] % MOD * c[n - j + t - (i &lt;= k)][t - (i == k)] % MOD * <span class="built_in">f</span>(i - <span class="number">1</span>, j - t, s) % MOD) % MOD;</span><br><span class="line"><span class="comment">//          std::printf(&quot; %d %d %d, %d: %d (+= %d) (%d * %d * %d * %d)\n&quot;, i, j, t, s, f(i, j, t), </span></span><br><span class="line"><span class="comment">//           pow[c[t][2]] * pow2[s][t] % MOD * c[n - j + t - (i &lt;= k)][t - (i == k)] % MOD * f(i - 1, j - t, s) % MOD,</span></span><br><span class="line"><span class="comment">//           pow[c[t][2]], pow2[s][t], c[n - j + t - (i &lt;= k)][t - (i == k)], f(i - 1, j - t, s));</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//          std::printf(&quot;%d %d %d : %d\n&quot;, i, j, t, f(i, j, t));</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">long</span> <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = k; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> t = <span class="number">1</span>; t &lt; n; ++t) &#123;</span><br><span class="line"><span class="comment">//        if (i == 2 &amp;&amp; j == 5 &amp;&amp; t == 1) &#123;</span></span><br><span class="line"><span class="comment">//          std::printf(&quot;    %d\n&quot;, pow[c[n - j][2]]);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        res = (res + pow[c[n - j][<span class="number">2</span>]] * <span class="built_in">f</span>(i, j, t)) % MOD;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, res);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> mirai::<span class="built_in">main</span>(argc, argv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>计数</category>
        <category>动态规划</category>
      </categories>
      <tags>
        <tag>计数</tag>
      </tags>
  </entry>
  <entry>
    <title>[20210115专题选讲]Jewelry Size</title>
    <url>/2022/01/19/20220115-Jewelry-Size/</url>
    <content><![CDATA[<p>一道水题，二分就做完了，就是有个情况有点坑。</p>
<span id="more"></span>
<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一圆内接多边形的边长 $a_1,\cdots,a_n$，求该圆半径。</p>
<p>$n\le 1000$，$a_i\in [1,6000]\cap \Z$。</p>
<p>source: ICPC Asia Regional Contest, Yokohama, 2021–03–17, Problem E</p>
<p>link: <a href="http://qoj.ac/contest/802/problem/2267">http://qoj.ac/contest/802/problem/2267</a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>二分 $r$ 即可。</p>
<p>考虑在半径为 $r$ 的圆上放置弦 $a_i$，设 $\theta_i$ 为 $a_i$ 对应的圆心角（限制在 $[-\pi,\pi]$），容易写出 $\theta_i=2\operatorname{asin}(\dfrac {a_i}{2r})$.</p>
<p>第一种情况：最大弦不为优弦。</p>
<p>显然若答案为 $r_0$，则 $\sum\limits_i\theta_i=2\pi$.</p>
<p>容易知道 $\dfrac{\mathrm {d}\theta_i}{\mathrm {d}r}=-\dfrac{2a_i}{r\sqrt{4r^2-a_i^2}}&lt;0$，所以 $\dfrac{\mathrm{d}\sum\limits_i\theta_i}{\mathrm{d}r}&lt;0$，直接二分。</p>
<p>第二种情况：最大弦为优弦。</p>
<p>令 $a_1=\max{a_i}$</p>
<p>显然若答案为 $r<em>0$，则 $\theta_1-\sum\limits</em>{i\ne 1}\theta_i=0$.</p>
<p>单调性感性理解：</p>
<blockquote>
<p>如果将 $a_2,\cdots,a_n$ 相邻地放置在圆上，则总弧所对的弦一定随着 $r$ 的增大而增大。</p>
<p>——神仙 zz</p>
</blockquote>
<p>具体证明不会。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>一定要搞清是单调递减还是递增！</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> mirai &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> MAXN = <span class="number">1005</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">long</span> <span class="type">double</span> PI = <span class="number">3.14159265358979323846</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">double</span> a[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line"><span class="comment">//  std::freopen(&quot;ala.out&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line">  std::<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    std::<span class="built_in">scanf</span>(<span class="string">&quot;%Lf&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">if</span> (a[i] &gt; a[<span class="number">0</span>]) &#123;</span><br><span class="line">      std::<span class="built_in">swap</span>(a[i], a[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">long</span> <span class="type">double</span> rl = a[<span class="number">0</span>] / <span class="number">2</span>, rr = <span class="number">1e9</span>;</span><br><span class="line">  <span class="keyword">auto</span> f1 = [=](<span class="type">long</span> <span class="type">double</span> radius) -&gt; <span class="type">long</span> <span class="type">double</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> theta = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      theta += <span class="number">2</span> * std::<span class="built_in">asin</span>(a[i] / (radius * <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> theta;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">while</span> (rr - rl &gt;= <span class="number">5e-8</span>) &#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> mid = (rl + rr) / <span class="number">2</span>;</span><br><span class="line"><span class="comment">//    std::printf(&quot;%.10Lf %.10Lf %.10Lf\n&quot;, rl, rr, f1(mid));</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">f1</span>(mid) &gt; <span class="number">2</span> * PI) &#123;</span><br><span class="line">      rl = mid;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      rr = mid;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">long</span> <span class="type">double</span> ans1 = (rl + rr) / <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">if</span> (std::<span class="built_in">abs</span>(<span class="built_in">f1</span>(ans1) - <span class="number">2</span> * PI) &lt;= <span class="number">5e-7</span>) &#123;</span><br><span class="line">    std::<span class="built_in">printf</span>(<span class="string">&quot;%.10Lf\n&quot;</span>, ans1);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  rl = a[<span class="number">0</span>] / <span class="number">2</span>;</span><br><span class="line">  rr = <span class="number">1e9</span>;</span><br><span class="line">  <span class="keyword">auto</span> f2 = [=](<span class="type">long</span> <span class="type">double</span> radius) -&gt; <span class="type">long</span> <span class="type">double</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> theta = <span class="number">2</span> * std::<span class="built_in">asin</span>(a[<span class="number">0</span>] / (radius * <span class="number">2</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      theta -= <span class="number">2</span> * std::<span class="built_in">asin</span>(a[i] / (radius * <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> theta;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="comment">//  std::puts(&quot;---------------------------&quot;);</span></span><br><span class="line">  <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (rr - rl &gt;= <span class="number">5e-8</span>) &#123;</span><br><span class="line">    ++cnt;</span><br><span class="line">    <span class="keyword">if</span> (cnt == <span class="number">100</span>) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> mid = (rl + rr) / <span class="number">2</span>;</span><br><span class="line"><span class="comment">//    std::printf(&quot;%.10Lf %.10Lf %.10Lf\n&quot;, rl, rr, f2(mid));</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">f2</span>(mid) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      rr = mid;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      rl = mid;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;%.10Lf\n&quot;</span>, (rl + rr) / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> mirai::<span class="built_in">main</span>(argc, argv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数学</category>
        <category>专题选讲</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>计算几何</tag>
      </tags>
  </entry>
  <entry>
    <title>[20220115杂题选讲]Robot</title>
    <url>/2022/01/15/20220115-Robot/</url>
    <content><![CDATA[<p>首先建立虚点，然后跑最短路，注意考虑一种特殊情况。</p>
<span id="more"></span>
<h2 id="大意"><a href="#大意" class="headerlink" title="大意"></a>大意</h2><p>给定 $n$ 个点 $m$ 条边的简单无向图，边有颜色，要求从 $1$ 走到 $n$，但是要求走的每条边 $u\to v$ 都要满足 $u$ 的出边中没有其他与 $(u,v)$ 同色的边。</p>
<p>每条边可以以 $p_i$ 的代价被修改为任意其他的颜色，若想使存在从 $1$ 走到 $n$ 的一个方案，求最小花费。</p>
<p>可能无解。</p>
<p>$n\le 10^5$，$m\le 2\times 10^5$，颜色数 $\le m$，$1\le p_i\le 10^9$，时限 4s。</p>
<p>source: JOI 2021 Final T4 Robot</p>
<p>link: <a href="https://loj.ac/p/3471">https://loj.ac/p/3471</a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先连通就有解，因为可以做到让每条边颜色各不相同。</p>
<p>不难发现如果我们需要走一条本来不能走的边 $u\to v$，有以下两种修改方案：</p>
<ol>
<li>修改 $u\to v$ 的颜色为一条完全不同的颜色</li>
<li>修改与 $u\to v$ 同色的全部 $u$ 的出边为完全不同的颜色</li>
</ol>
<p>假设这样的情况：$u\to v\to w$，其中两条边都是红色，那么如果在 $u\to v$ 时选择了 1，在 $v\to w$ 选择 2 时还修改 $v\to u$ 就显得很亏。</p>
<p>考虑建虚点。对于结点 $u$，对每种包含在它出边中的颜色 $c$ 另开一个虚点 $\lang u,c\rang$，$u\stackrel{0}\to\lang u,c\rang$，$\lang u,c\rang\stackrel{-p<em>v+\sum\limits</em>{u\stackrel{c}\to w} p_w}\to v$，$v\stackrel 0\to\lang u,c\rang$，$u\stackrel{p_i}\to v$。（$(u,v)$ 颜色为 $c$）</p>
<p>正常来说，第一种修改相当于走第四种边；第二种修改相当于走第一、二种边，而特殊情况相当于走第三、二种边。</p>
<p>直接建图，但是要注意点数是 $O(m)$ 而非 $O(n^2)$ 的，所以可能要用 <code>unordered_map</code> 来做到常规的数组。</p>
<p>有人说 <code>map</code> 更快？简单测试一下：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">-O0</th>
<th style="text-align:center">-O2</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>std::map</code></td>
<td style="text-align:center">27128ms</td>
<td style="text-align:center">34582ms</td>
</tr>
<tr>
<td style="text-align:center"><code>std::unordered_map</code></td>
<td style="text-align:center">22148ms</td>
<td style="text-align:center">33912ms</td>
</tr>
</tbody>
</table>
</div>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>Dijkstra 写错就离谱……</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> mirai &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> MAXN = <span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">edge</span> &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="type">int</span> to, color, cost;</span><br><span class="line">&#125;;</span><br><span class="line">std::vector&lt;edge&gt; graph[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">edge2</span> &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; to;</span><br><span class="line">  <span class="type">long</span> <span class="type">long</span> val;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">hash</span> &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function">std::<span class="type">size_t</span> <span class="title">operator</span><span class="params">()</span><span class="params">(std::pair&lt;std::<span class="type">int32_t</span>, std::<span class="type">int32_t</span>&gt; <span class="type">const</span>&amp; x)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    std::hash&lt;std::<span class="type">int64_t</span>&gt; hash;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">hash</span>((<span class="built_in">static_cast</span>&lt;std::<span class="type">int64_t</span>&gt;(x.first) &lt;&lt; <span class="number">32</span>) | x.second);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cmp</span> &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; <span class="type">const</span>&amp; x, std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; <span class="type">const</span>&amp; y)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.first == y.first ? x.second &lt; y.second : x.first &lt; y.first;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::unordered_map&lt;std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;, <span class="type">long</span> <span class="type">long</span>, hash&gt; sum;</span><br><span class="line">std::unordered_map&lt;std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;, std::vector&lt;edge2&gt;, hash&gt; graph2;</span><br><span class="line">std::unordered_map&lt;std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;, <span class="type">bool</span>, hash&gt; vst;</span><br><span class="line">std::unordered_map&lt;std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;, <span class="type">bool</span>, hash&gt; vst2;</span><br><span class="line">std::unordered_map&lt;std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;, <span class="type">long</span> <span class="type">long</span>, hash&gt; dist;</span><br><span class="line"></span><br><span class="line"><span class="comment">//std::map&lt;std::pair&lt;int, int&gt;, long long, cmp&gt; sum;</span></span><br><span class="line"><span class="comment">//std::map&lt;std::pair&lt;int, int&gt;, std::vector&lt;edge2&gt;, cmp&gt; graph2;</span></span><br><span class="line"><span class="comment">//std::map&lt;std::pair&lt;int, int&gt;, bool, cmp&gt; vst;</span></span><br><span class="line"><span class="comment">//std::map&lt;std::pair&lt;int, int&gt;, bool, cmp&gt; vst2;</span></span><br><span class="line"><span class="comment">//std::map&lt;std::pair&lt;int, int&gt;, long long, cmp&gt; dist;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cmp2</span> &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(std::pair&lt;std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;, <span class="type">long</span> <span class="type">long</span>&gt; <span class="type">const</span>&amp; x, std::pair&lt;std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;, <span class="type">long</span> <span class="type">long</span>&gt; <span class="type">const</span>&amp; y)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.second &gt; y.second;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">std::priority_queue&lt;std::pair&lt;std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;, <span class="type">long</span> <span class="type">long</span>&gt;, std::vector&lt;std::pair&lt;std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;, <span class="type">long</span> <span class="type">long</span>&gt;&gt;, cmp2&gt; que;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="meta">#<span class="keyword">ifdef</span> MIRAI</span></span><br><span class="line">  std::<span class="built_in">freopen</span>(<span class="string">&quot;data/3471-1-10.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">  <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  <span class="type">int</span> n, m;</span><br><span class="line">  std::<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">    <span class="type">int</span> u, v, color, cost;</span><br><span class="line">    std::<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;color, &amp;cost);</span><br><span class="line">    graph[u].<span class="built_in">push_back</span>(&#123;v, color, cost&#125;);</span><br><span class="line">    graph[v].<span class="built_in">push_back</span>(&#123;u, color, cost&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> e : graph[i]) &#123;</span><br><span class="line">      sum[&#123;i, e.color&#125;] += e.cost;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> e : graph[i]) &#123;</span><br><span class="line">      graph2[&#123;i, <span class="number">0</span>&#125;].<span class="built_in">push_back</span>(&#123;&#123;e.to, <span class="number">0</span>&#125;, e.cost&#125;);</span><br><span class="line">      <span class="keyword">if</span> (!vst[&#123;i, e.color&#125;]) &#123;</span><br><span class="line">        vst[&#123;i, e.color&#125;] = <span class="literal">true</span>;</span><br><span class="line">        graph2[&#123;i, <span class="number">0</span>&#125;].<span class="built_in">push_back</span>(&#123;&#123;i, e.color&#125;, <span class="number">0</span>&#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      graph2[&#123;i, e.color&#125;].<span class="built_in">push_back</span>(&#123;&#123;e.to, <span class="number">0</span>&#125;, sum[&#123;i, e.color&#125;] - e.cost&#125;);</span><br><span class="line">      graph2[&#123;e.to, <span class="number">0</span>&#125;].<span class="built_in">push_back</span>(&#123;&#123;i, e.color&#125;, <span class="number">0</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//  for (int i = 1; i &lt;= n; ++i) &#123;</span></span><br><span class="line"><span class="comment">//    for (auto e : graph[i]) &#123;</span></span><br><span class="line"><span class="comment">//      std::printf(&quot;&#123;%d, %d&#125;: &quot;, i, e.color);</span></span><br><span class="line"><span class="comment">//      for (auto e2 : graph2[&#123;i, e.color&#125;]) &#123;</span></span><br><span class="line"><span class="comment">//        std::printf(&quot;&#123;&#123;%d, %d&#125;, %lld&#125; &quot;, e2.to.first, e2.to.second, e2.val);</span></span><br><span class="line"><span class="comment">//      &#125;</span></span><br><span class="line"><span class="comment">//      std::puts(&quot;&quot;);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    std::printf(&quot;&#123;%d, 0&#125;: &quot;, i);</span></span><br><span class="line"><span class="comment">//    for (auto e2: graph2[&#123;i, 0&#125;]) &#123;</span></span><br><span class="line"><span class="comment">//      std::printf(&quot;&#123;&#123;%d, %d&#125;, %lld&#125; &quot;, e2.to.first, e2.to.second, e2.val);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    std::puts(&quot;&quot;);</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> e : graph[i]) &#123;</span><br><span class="line">      dist[&#123;i, e.color&#125;] = <span class="number">0x3f3f3f3f3f3f3f3f</span>ll;</span><br><span class="line">    &#125;</span><br><span class="line">    dist[&#123;i, <span class="number">0</span>&#125;] = <span class="number">0x3f3f3f3f3f3f3f3f</span>ll;</span><br><span class="line">  &#125;</span><br><span class="line">  dist[&#123;<span class="number">1</span>, <span class="number">0</span>&#125;] = <span class="number">0</span>;</span><br><span class="line">  que.<span class="built_in">push</span>(&#123;&#123;<span class="number">1</span>, <span class="number">0</span>&#125;, <span class="number">0</span>&#125;);</span><br><span class="line">  <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">    <span class="keyword">auto</span> top = que.<span class="built_in">top</span>().first;</span><br><span class="line">    que.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">if</span> (vst2[top]) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    vst2[top] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> e : graph2[top]) &#123;</span><br><span class="line">      <span class="keyword">if</span> (dist[e.to] &gt; dist[top] + e.val) &#123;</span><br><span class="line">        dist[e.to] = dist[top] + e.val;</span><br><span class="line">        <span class="keyword">if</span> (!vst2[e.to]) &#123;</span><br><span class="line">          que.<span class="built_in">push</span>(&#123;e.to, dist[top] + e.val&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, dist[&#123;n, <span class="number">0</span>&#125;] == <span class="number">0x3f3f3f3f3f3f3f3f</span>ll ? <span class="number">-1</span> : dist[&#123;n, <span class="number">0</span>&#125;]);</span><br><span class="line">  </span><br><span class="line">  <span class="meta">#<span class="keyword">ifdef</span> MIRAI</span></span><br><span class="line">  std::<span class="built_in">fclose</span>(stdin);</span><br><span class="line">  <span class="meta">#<span class="keyword">endif</span>  </span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> mirai::<span class="built_in">main</span>(argc, argv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>图论</category>
        <category>杂题选讲</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title>[20220115专题选讲]Short Coding</title>
    <url>/2022/01/15/20220115-Short-Coding/</url>
    <content><![CDATA[<p>一道奇怪的模拟题。</p>
<span id="more"></span>
<h2 id="大意"><a href="#大意" class="headerlink" title="大意"></a>大意</h2><p>给定一个 $n\times m$ 的网格，有些格子无法到达。有一个机器人从第一行某处出发，一开始面向正下，目标达到最后一行某处（保证可达），它会重复执行一段由五种语句构成的代码，分别是：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">代码格式</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>FORWARD</code></td>
<td style="text-align:center">向前一格，如果面前无法到达或为边界则忽略此语句</td>
</tr>
<tr>
<td style="text-align:center"><code>LEFT</code></td>
<td style="text-align:center">左转</td>
</tr>
<tr>
<td style="text-align:center"><code>RIGHT</code></td>
<td style="text-align:center">右转</td>
</tr>
<tr>
<td style="text-align:center"><code>GOTO x</code></td>
<td style="text-align:center">跳转到第 $x$ 行继续进行</td>
</tr>
<tr>
<td style="text-align:center"><code>IF-OPEN x</code></td>
<td style="text-align:center">如果当前可以进行 <code>FORWARD</code> 操作，则跳转到第 $x$ 行，否则到下一行</td>
</tr>
</tbody>
</table>
</div>
<p>输入网格，输出行数最少的代码。（多解任意输出）</p>
<p>$n,m\in[1,10]$。</p>
<p>时限 2s。</p>
<p>source: ICPC Asia Regional Contest, Yokohama, 2021–03–17; Problem C</p>
<p>link: <a href="http://qoj.ac/contest/802/problem/2265">http://qoj.ac/contest/802/problem/2265</a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先注意到迷宫通解：摸墙。容易写出以下的通解代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LEFT</span><br><span class="line">IF-OPEN 5</span><br><span class="line">RIGHT</span><br><span class="line">GOTO 2</span><br><span class="line">FORWARD</span><br></pre></td></tr></table></figure>
<p>（注意起点、终点一定在墙边）</p>
<p>考察行数 $\le 4$ 的代码，发现长度为 $4$ 的代码都仅有 $9^4=6561$ 种，非常小。</p>
<p>枚举代码，暴力计算直到重复。单次状态数为 $4\times4\times10\times10=1600$，完全可以接受。</p>
<p>时间复杂度 $\Theta(nm)$。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>懒得打 dfs 了，无脑复制粘贴多好（</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> mirai &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> maze[<span class="number">15</span>][<span class="number">15</span>];</span><br><span class="line"><span class="type">int</span> prog[<span class="number">4</span>];</span><br><span class="line"><span class="type">bool</span> vst[<span class="number">15</span>][<span class="number">15</span>][<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line"><span class="type">char</span> str[<span class="number">11</span>][<span class="number">10</span>] = &#123;<span class="string">&quot;GOTO 4&quot;</span>, <span class="string">&quot;GOTO 3&quot;</span>, <span class="string">&quot;GOTO 2&quot;</span>, <span class="string">&quot;GOTO 1&quot;</span>, <span class="string">&quot;LEFT&quot;</span>, <span class="string">&quot;FORWARD&quot;</span>, <span class="string">&quot;RIGHT&quot;</span>, <span class="string">&quot;IF-OPEN 1&quot;</span>, <span class="string">&quot;IF-OPEN 2&quot;</span>, <span class="string">&quot;IF-OPEN 3&quot;</span>, <span class="string">&quot;IF-OPEN 4&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> n, m;</span><br><span class="line">  std::<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">  std::<span class="built_in">memset</span>(maze, <span class="number">0x01</span>, <span class="built_in">sizeof</span>(maze));</span><br><span class="line">  <span class="type">int</span> y1, y2;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">      <span class="type">char</span> ch;</span><br><span class="line">      std::<span class="built_in">scanf</span>(<span class="string">&quot; %c&quot;</span>, &amp;ch);</span><br><span class="line">      maze[i][j] = (ch == <span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">      <span class="keyword">if</span> (ch == <span class="string">&#x27;S&#x27;</span>) &#123;</span><br><span class="line">        y1 = j;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (ch == <span class="string">&#x27;G&#x27;</span>) &#123;</span><br><span class="line">        y2 = j;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="type">int</span> len;</span><br><span class="line">  <span class="type">int</span> move[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;&#125;;</span><br><span class="line">  <span class="keyword">auto</span> halt = [&amp;](<span class="type">int</span> len2) -&gt; <span class="type">bool</span> &#123;</span><br><span class="line"><span class="comment">//    std::printf(&quot;halt(%d)\n&quot;, len2);</span></span><br><span class="line">    std::<span class="built_in">memset</span>(vst, <span class="number">0x00</span>, <span class="built_in">sizeof</span>(vst));</span><br><span class="line">    <span class="type">int</span> x = <span class="number">1</span>, y = y1, l = <span class="number">0</span>, f = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (x == n &amp;&amp; y == y2) &#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line">      <span class="keyword">if</span> (vst[x][y][l][f]) &#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line">      vst[x][y][l][f] = <span class="literal">true</span>;</span><br><span class="line">      <span class="type">int</span> ord = std::<span class="built_in">abs</span>(prog[l]), open = !maze[x + move[f][<span class="number">0</span>]][y + move[f][<span class="number">1</span>]];</span><br><span class="line"><span class="comment">//      std::printf(&quot; %d %d %d %d %d %d\n&quot;, x, y, l, f, ord, open);</span></span><br><span class="line">      <span class="keyword">if</span> (ord == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (open) &#123;</span><br><span class="line">          x += move[f][<span class="number">0</span>];</span><br><span class="line">          y += move[f][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        l = (l + <span class="number">1</span>) % len2;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ord == <span class="number">1</span>) &#123;</span><br><span class="line">        f = (f + prog[l]) &amp; <span class="number">3</span>;</span><br><span class="line">        l = (l + <span class="number">1</span>) % len2;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (open || prog[l] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">          l = ord - <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          l = (l + <span class="number">1</span>) % len2;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  len = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (prog[<span class="number">0</span>] = <span class="number">-5</span>; prog[<span class="number">0</span>] &lt;= <span class="number">5</span>; ++prog[<span class="number">0</span>]) &#123;</span><br><span class="line">    <span class="type">int</span> ord = std::<span class="built_in">abs</span>(prog[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span> (ord == <span class="number">2</span> || ord &gt;= len + <span class="number">2</span>) &#123; <span class="keyword">continue</span>; &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">halt</span>(len)) &#123;</span><br><span class="line">      std::<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, len);</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">        std::<span class="built_in">puts</span>(str[prog[i] + <span class="number">5</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  len = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">for</span> (prog[<span class="number">0</span>] = <span class="number">-5</span>; prog[<span class="number">0</span>] &lt;= <span class="number">5</span>; ++prog[<span class="number">0</span>]) &#123;</span><br><span class="line">    <span class="type">int</span> ord = std::<span class="built_in">abs</span>(prog[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span> (ord == <span class="number">2</span> || ord &gt;= len + <span class="number">2</span>) &#123; <span class="keyword">continue</span>; &#125;</span><br><span class="line">    <span class="keyword">for</span> (prog[<span class="number">1</span>] = <span class="number">-5</span>; prog[<span class="number">1</span>] &lt;= <span class="number">5</span>; ++prog[<span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="type">int</span> ord = std::<span class="built_in">abs</span>(prog[<span class="number">1</span>]);</span><br><span class="line">      <span class="keyword">if</span> (ord == <span class="number">3</span> || ord &gt;= len + <span class="number">2</span>) &#123; <span class="keyword">continue</span>; &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">halt</span>(len)) &#123;</span><br><span class="line">        std::<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, len);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">          std::<span class="built_in">puts</span>(str[prog[i] + <span class="number">5</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  len = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">for</span> (prog[<span class="number">0</span>] = <span class="number">-5</span>; prog[<span class="number">0</span>] &lt;= <span class="number">5</span>; ++prog[<span class="number">0</span>]) &#123;</span><br><span class="line">    <span class="type">int</span> ord = std::<span class="built_in">abs</span>(prog[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span> (ord == <span class="number">2</span> || ord &gt;= len + <span class="number">2</span>) &#123; <span class="keyword">continue</span>; &#125;</span><br><span class="line">    <span class="keyword">for</span> (prog[<span class="number">1</span>] = <span class="number">-5</span>; prog[<span class="number">1</span>] &lt;= <span class="number">5</span>; ++prog[<span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="type">int</span> ord = std::<span class="built_in">abs</span>(prog[<span class="number">1</span>]);</span><br><span class="line">      <span class="keyword">if</span> (ord == <span class="number">3</span> || ord &gt;= len + <span class="number">2</span>) &#123; <span class="keyword">continue</span>; &#125;</span><br><span class="line">      <span class="keyword">for</span> (prog[<span class="number">2</span>] = <span class="number">-5</span>; prog[<span class="number">2</span>] &lt;= <span class="number">5</span>; ++prog[<span class="number">2</span>]) &#123;</span><br><span class="line">        <span class="type">int</span> ord = std::<span class="built_in">abs</span>(prog[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">if</span> (ord == <span class="number">4</span> || ord &gt;= len + <span class="number">2</span>) &#123; <span class="keyword">continue</span>; &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">halt</span>(len)) &#123;</span><br><span class="line">          std::<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, len);</span><br><span class="line">          <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">            std::<span class="built_in">puts</span>(str[prog[i] + <span class="number">5</span>]);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  len = <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">for</span> (prog[<span class="number">0</span>] = <span class="number">-5</span>; prog[<span class="number">0</span>] &lt;= <span class="number">5</span>; ++prog[<span class="number">0</span>]) &#123;</span><br><span class="line">    <span class="type">int</span> ord = std::<span class="built_in">abs</span>(prog[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span> (ord == <span class="number">2</span> || ord &gt;= len + <span class="number">2</span>) &#123; <span class="keyword">continue</span>; &#125;</span><br><span class="line">    <span class="keyword">for</span> (prog[<span class="number">1</span>] = <span class="number">-5</span>; prog[<span class="number">1</span>] &lt;= <span class="number">5</span>; ++prog[<span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="type">int</span> ord = std::<span class="built_in">abs</span>(prog[<span class="number">1</span>]);</span><br><span class="line">      <span class="keyword">if</span> (ord == <span class="number">3</span> || ord &gt;= len + <span class="number">2</span>) &#123; <span class="keyword">continue</span>; &#125;</span><br><span class="line">      <span class="keyword">for</span> (prog[<span class="number">2</span>] = <span class="number">-5</span>; prog[<span class="number">2</span>] &lt;= <span class="number">5</span>; ++prog[<span class="number">2</span>]) &#123;</span><br><span class="line">        <span class="type">int</span> ord = std::<span class="built_in">abs</span>(prog[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">if</span> (ord == <span class="number">4</span> || ord &gt;= len + <span class="number">2</span>) &#123; <span class="keyword">continue</span>; &#125;</span><br><span class="line">        <span class="keyword">for</span> (prog[<span class="number">3</span>] = <span class="number">-5</span>; prog[<span class="number">3</span>] &lt;= <span class="number">5</span>; ++prog[<span class="number">3</span>]) &#123;</span><br><span class="line">          <span class="type">int</span> ord = std::<span class="built_in">abs</span>(prog[<span class="number">3</span>]);</span><br><span class="line">          <span class="keyword">if</span> (ord == <span class="number">5</span> || ord &gt;= len + <span class="number">2</span>) &#123; <span class="keyword">continue</span>; &#125;</span><br><span class="line">          <span class="keyword">if</span> (<span class="built_in">halt</span>(len)) &#123;</span><br><span class="line">            std::<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, len);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">              std::<span class="built_in">puts</span>(str[prog[i] + <span class="number">5</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  std::<span class="built_in">puts</span>(<span class="string">&quot;5&quot;</span>);</span><br><span class="line">  std::<span class="built_in">puts</span>(<span class="string">&quot;LEFT&quot;</span>);</span><br><span class="line">  std::<span class="built_in">puts</span>(<span class="string">&quot;IF-OPEN 5&quot;</span>);</span><br><span class="line">  std::<span class="built_in">puts</span>(<span class="string">&quot;RIGHT&quot;</span>);</span><br><span class="line">  std::<span class="built_in">puts</span>(<span class="string">&quot;GOTO 2&quot;</span>);</span><br><span class="line">  std::<span class="built_in">puts</span>(<span class="string">&quot;FORWARD&quot;</span>);</span><br><span class="line">      </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> mirai::<span class="built_in">main</span>(argc, argv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>专题选讲</category>
      </categories>
      <tags>
        <tag>枚举</tag>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title>[20220115杂题选讲]特征多项式</title>
    <url>/2022/01/19/20220115-characteristic-polynomial/</url>
    <content><![CDATA[<p>一道裸题。</p>
<span id="more"></span>
<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定方阵 $A$，求 $p_A(\lambda)=|\lambda I-A|$。</p>
<p>$n\le 500$，对 $998244353$ 取模。</p>
<p>source: <a href="https://www.luogu.com.cn/problem/P7776">https://www.luogu.com.cn/problem/P7776</a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>正常求 $\R$ 上的矩阵行列式应该是 $\Theta(n^3)$ 的，但是这里显然不能忽略乘法的复杂度，复杂度会达到惊人的 $\Theta(n^4\log n)$，显然不可行，怎么办呢？</p>
<h3 id="算法一"><a href="#算法一" class="headerlink" title="算法一"></a>算法一</h3><p>代 $n+1$ 个值给 $\lambda$，总共 $\Theta(n^4)$ 求出来分别的行列式，$\Theta(n^3)$ 插值，搞定。时间复杂度 $\Theta(n^4)$，空间复杂度 $\Theta(n^3)$。</p>
<p>期望得分 $40$。</p>
<h3 id="算法二"><a href="#算法二" class="headerlink" title="算法二"></a>算法二</h3><p>回顾求行列式的方法：将原本的矩阵变为一个容易求解行列式的矩阵。</p>
<p>我们定义相似矩阵：$A\sim B\Leftrightarrow \exist P:A=PBP^{-1}$。</p>
<p>我们有 $A\sim B\Rightarrow p_A=p_B$，因为：</p>
<script type="math/tex; mode=display">
\begin{aligned}
|\lambda I-A|&=|\lambda I-PBP^{-1}|\\
&=|\lambda PP^{-1}-PBP^{-1}|\\
&=|P^{-1}|\cdot|\lambda PI-PB|\\
&=|P^{-1}|\cdot|P|\cdot|\lambda I-B|\\
&=|\lambda I-B|
\end{aligned}</script><p>这时肯定有人想，要是能消成上三角就好了！但是非常抱歉，大多数形如 $|\lambda I-A|$ 的矩阵不能被消成上三角。</p>
<blockquote>
<p>如果消成上三角，你不就是把这个多项式给分解了么？$\R$ 上分解多项式显然要到 $\C$ 上。</p>
<p>——数学神仙 whd</p>
</blockquote>
<p>我们可以退而求其次，如果我们少消一斜线（$a<em>{12}-a</em>{n-1n}$）（称这样的矩阵是上 Hessenberg 矩阵），这样我们仍然可以在 $\Theta(n^3)$ 的复杂度内递推：</p>
<p>设前 $i$ 行列的特征多项式为 $p<em>i$，则 $p_0=1$，$p_1=\lambda-A</em>{11}$，$p<em>i=(\lambda-A</em>{ii})p<em>{i-1}{\color{red}-}\sum\limits</em>{j=0}^{i-2}p<em>jA</em>{j+1,i}\prod\limits<em>{k=j+2}^iA</em>{k,k+1}$。</p>
<p>注意红色标注的符号，这里符号恒为 $-$ 是因为虽然常数提供的逆序对个数奇偶性一直在变动导致符号变动，但与此同时 $A$ 前的负号的次幂数奇偶性也一直在变动，符号就恒为负了。</p>
<p>注意到这里我们不需要再进行多项式乘法了，复杂度 $\Theta(n^3)$。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>多亏了那个负号，调了好几个小时！</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> max;</span><br><span class="line"><span class="type">int</span> sqrt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> mirai &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> MAXN = <span class="number">505</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">long</span> <span class="type">long</span> MOD = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">int</span> m[MAXN][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">pow</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a, <span class="type">long</span> <span class="type">long</span> p)</span> </span>&#123;</span><br><span class="line">  <span class="type">long</span> <span class="type">long</span> ans = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (p) &#123;</span><br><span class="line">    <span class="keyword">if</span> (p &amp; <span class="number">1</span>) &#123;</span><br><span class="line">      ans = ans * a % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    a = a * a % MOD;</span><br><span class="line">    p &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">long</span> <span class="type">long</span> <span class="title">inv</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">pow</span>(a, MOD - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> p[MAXN][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="comment">//void print(long long a) &#123;</span></span><br><span class="line"><span class="comment">////  std::printf(&quot;%lld&quot;, a);</span></span><br><span class="line"><span class="comment">////  return;</span></span><br><span class="line"><span class="comment">//  if (a &lt;= 10000) &#123;</span></span><br><span class="line"><span class="comment">//    std::printf(&quot;%lld&quot;, a);</span></span><br><span class="line"><span class="comment">//  &#125; else if (MOD - a &lt;= 10000) &#123;</span></span><br><span class="line"><span class="comment">//    std::printf(&quot;%lld&quot;, a - MOD);</span></span><br><span class="line"><span class="comment">//  &#125; else &#123;</span></span><br><span class="line"><span class="comment">//    for (long long i = 1; i &lt;= 10000; ++i) &#123;</span></span><br><span class="line"><span class="comment">//      if (a * i % MOD &lt;= 20000) &#123;</span></span><br><span class="line"><span class="comment">//        std::printf(&quot;%lld/%lld&quot;, a * i % MOD, i);</span></span><br><span class="line"><span class="comment">//        break;</span></span><br><span class="line"><span class="comment">//      &#125;</span></span><br><span class="line"><span class="comment">//      if ((MOD - a * i % MOD) &lt;= 20000) &#123;</span></span><br><span class="line"><span class="comment">//        std::printf(&quot;%lld/%lld&quot;, (a * i % MOD) - MOD, i);</span></span><br><span class="line"><span class="comment">//        break;</span></span><br><span class="line"><span class="comment">//      &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="meta">#<span class="keyword">ifdef</span> MIRAI</span></span><br><span class="line">  std::<span class="built_in">freopen</span>(<span class="string">&quot;ala.out&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">  <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line">  std::<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">      std::<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;m[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">    std::<span class="built_in">printf</span>(<span class="string">&quot;%lld %lld\n&quot;</span>, (MOD - m[<span class="number">1</span>][<span class="number">1</span>]) % MOD, MOD - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (m[i + <span class="number">1</span>][i] == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">2</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (m[j][i] != <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="type">int</span> k = i; k &lt;= n; ++k) &#123;</span><br><span class="line">            std::<span class="built_in">swap</span>(m[i + <span class="number">1</span>][k], m[j][k]);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= n; ++k) &#123;</span><br><span class="line">            std::<span class="built_in">swap</span>(m[k][j], m[k][i + <span class="number">1</span>]);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">2</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">      <span class="type">long</span> <span class="type">long</span> scale = (MOD - <span class="number">1ll</span> * m[j][i] * <span class="built_in">inv</span>(m[i + <span class="number">1</span>][i]) % MOD) % MOD;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> k = i; k &lt;= n; ++k) &#123;</span><br><span class="line">        m[j][k] = (m[j][k] + <span class="number">1ll</span> * m[i + <span class="number">1</span>][k] * scale) % MOD;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= n; ++k) &#123;</span><br><span class="line">        m[k][i + <span class="number">1</span>] = (<span class="number">1ll</span> * m[k][j] * scale - m[k][i + <span class="number">1</span>]) % MOD;</span><br><span class="line">        m[k][i + <span class="number">1</span>] = !!m[k][i + <span class="number">1</span>] * (MOD - m[k][i + <span class="number">1</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//  std::printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">//  for (int i = 1; i &lt;= n; ++i) &#123;</span></span><br><span class="line"><span class="comment">//    for (int j = 1; j &lt;= n; ++j) &#123;</span></span><br><span class="line"><span class="comment">//      print(m[i][j]);</span></span><br><span class="line"><span class="comment">//      std::printf(&quot; &quot;);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    std::printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line">  </span><br><span class="line">  p[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">  p[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">  p[<span class="number">1</span>][<span class="number">0</span>] = !!m[<span class="number">1</span>][<span class="number">1</span>] * (MOD - m[<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= i; ++k) &#123;</span><br><span class="line">      p[i][k] = (<span class="number">1ll</span> * m[i][i] * p[i - <span class="number">1</span>][k] - p[i - <span class="number">1</span>][k - <span class="number">1</span>]) % MOD;</span><br><span class="line">      p[i][k] = !!p[i][k] * (MOD - p[i][k]);</span><br><span class="line">    &#125;</span><br><span class="line">    p[i][<span class="number">0</span>] = <span class="number">1ll</span> * p[i - <span class="number">1</span>][<span class="number">0</span>] * m[i][i] % MOD;</span><br><span class="line">    p[i][<span class="number">0</span>] = !!p[i][<span class="number">0</span>] * (MOD - p[i][<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//    std::printf(&quot; %d: &quot;, i);</span></span><br><span class="line"><span class="comment">//    for (int k = 0; k &lt;= n; ++k) &#123;</span></span><br><span class="line"><span class="comment">//      print(p[i][k]);</span></span><br><span class="line"><span class="comment">//      std::printf(&quot; &quot;);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    std::printf(&quot;\n&quot;);</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> k1 = m[i][i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = i - <span class="number">2</span>; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line">      <span class="type">long</span> <span class="type">long</span> tmp = <span class="number">1ll</span> * k1 * m[j + <span class="number">1</span>][i] % MOD;</span><br><span class="line">      tmp = !!tmp * (MOD - tmp);</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt;= i; ++k) &#123;</span><br><span class="line">        p[i][k] = (p[i][k] + <span class="number">1ll</span> * p[j][k] * tmp) % MOD;</span><br><span class="line">      &#125;</span><br><span class="line">      k1 = <span class="number">1ll</span> * k1 * m[j + <span class="number">1</span>][j] % MOD;</span><br><span class="line"><span class="comment">//      std::printf(&quot; %d, %d: &quot;, i, j);</span></span><br><span class="line"><span class="comment">//      for (int k = 0; k &lt;= n; ++k) &#123;</span></span><br><span class="line"><span class="comment">//        print(p[i][k]);</span></span><br><span class="line"><span class="comment">//        std::printf(&quot; &quot;);</span></span><br><span class="line"><span class="comment">//      &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    std::printf(&quot;\n&quot;);</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    std::<span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>, p[n][i]);</span><br><span class="line">  &#125;</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> mirai::<span class="built_in">main</span>(argc, argv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数学</category>
        <category>杂题选讲</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>多项式</tag>
        <tag>矩阵</tag>
        <tag>Gauss消元</tag>
        <tag>行列式</tag>
        <tag>特征多项式</tag>
      </tags>
  </entry>
  <entry>
    <title>[20220115杂题选讲]Knight</title>
    <url>/2022/01/15/20220115-knight/</url>
    <content><![CDATA[<p>注意到一个二分图的性质，从而转化为博弈论简单题。</p>
<span id="more"></span>
<h2 id="大意"><a href="#大意" class="headerlink" title="大意"></a>大意</h2><p>在一个有障碍的 $n\times m$ 的国际象棋棋盘上，Alice 和 Bob 各有一只广义马，位置不同，且不在障碍上。</p>
<p>正常的马跳 $1\times 2$ 的日字，这里的马跳 $r\times c$ 的大日（？）字，其中 $r,c\in[1,1000]$。</p>
<p>任何一匹马在任何时候都不能跳到障碍或对方的马上。</p>
<p>如果一方无法走子，或无论怎么走子棋盘都将与之前的局面重复，则判此方负。</p>
<p>容易证明，游戏必在有限步内结束，且至少有一方有必胜策略，问谁有必胜策略？</p>
<p>$n,m\le 1000$。</p>
<p>source: 35th Petrozavodsk Programming Camp, Summer 2018; Day 8: Yuhao Du Contest 5, Grand Prix of Zhejiang, Thursday, August 30, 2018.</p>
<p>link: <a href="http://qoj.ac/contest/802/problem/2213">http://qoj.ac/contest/802/problem/2213</a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先对棋盘上的非障碍点连边，当且仅当能一步跳到才连上。</p>
<p>重要引理：无论 $r$ 和 $c$ 怎么取值，棋盘上皆可黑白染色，同色格内无法一步到达。</p>
<blockquote>
<p>证明：假设有情况不能黑白染色，即棋盘上有奇环，那么考察环上一点 $P(0,0)$，走了一个奇环回到原点。</p>
<p>观察横坐标，$k_1r+k_2c=0$，显然 $2\not\mid k_1+k_2$，纵坐标 $k_3r+k_4c=0$ 同理。注意到 $|\Delta x|=r$ 的次数与 $k_1$ 奇偶性相同， 与 $k_4$ 奇偶性相同。故 $k_1\equiv k_4$，$k_2\equiv k_3$。不失一般性，令 $2\mid k_1,k_4$，则 $2\not\mid k_2,k_3$，故 $2\mid c,r$。</p>
<p>但是将 $r,c$ 同时除以 $2$，奇环不会改变，说明如果存在一种 $2\mid r,c$ 的情况，也必然存在一种对应的 $2\mid r,c$ 不成立的情况，矛盾。</p>
</blockquote>
<p>所以棋盘是个二分图！</p>
<p>考虑分类讨论：</p>
<h3 id="情况一"><a href="#情况一" class="headerlink" title="情况一"></a>情况一</h3><p>A 和 B 不在同一个连通块里，A 胜（除非 A 无可达点）。</p>
<p>策略：设 A 的初始点为 $A_0$，其中一个可到的点为 $A_1$，则 A 只需反复横跳，B 在跳了一次之后的每个点都不能再走了（不妨令 A,B 初始点颜色相同，则 A,B 颜色恒相同，B 所在连通块的每个点都最多在棋盘状态中出现一次），B 负。</p>
<h3 id="情况二"><a href="#情况二" class="headerlink" title="情况二"></a>情况二</h3><p>A,B 在同一个连通块内：</p>
<p>先设 A,B 在同色格内，则 A 必胜：</p>
<p>策略：选择一个可到点 $A_1$，执行情况一的策略。注意到 B 无法阻挡 A，因为 A 每次跳时目标点都与 B 当前所在点异色。</p>
<p>若 A,B 在异色格，则 B 必胜，因为 A 走一步就转移到上一种 A,B 同色的情况了。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> mirai &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> map[<span class="number">1010</span>][<span class="number">1010</span>];</span><br><span class="line"><span class="type">bool</span> dist[<span class="number">1010</span>][<span class="number">1010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> n, m, r, c;</span><br><span class="line">  std::<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;r, &amp;c);</span><br><span class="line">  <span class="type">int</span> x1, y1, x2, y2;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">      <span class="type">char</span> ch;</span><br><span class="line">      std::<span class="built_in">scanf</span>(<span class="string">&quot; %c&quot;</span>, &amp;ch);</span><br><span class="line">      <span class="keyword">if</span> (ch == <span class="string">&#x27;@&#x27;</span>) &#123;</span><br><span class="line">        map[i][j] = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (ch == <span class="string">&#x27;A&#x27;</span>) &#123;</span><br><span class="line">        x1 = i;</span><br><span class="line">        y1 = j;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (ch == <span class="string">&#x27;B&#x27;</span>) &#123;</span><br><span class="line">        x2 = i;</span><br><span class="line">        y2 = j;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> move[<span class="number">8</span>][<span class="number">2</span>] = &#123;&#123;r, c&#125;, &#123;r, -c&#125;, &#123;-r, c&#125;, &#123;-r, -c&#125;, &#123;c, r&#125;, &#123;c, -r&#125;, &#123;-c, r&#125;, &#123;-c, -r&#125;&#125;;</span><br><span class="line">  std::queue&lt;std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; que;</span><br><span class="line">  que.<span class="built_in">push</span>(&#123;x1, y1&#125;);</span><br><span class="line">  map[x1][y1] = <span class="literal">true</span>;</span><br><span class="line">  <span class="type">bool</span> updated = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">    <span class="type">int</span> x = que.<span class="built_in">front</span>().first, y = que.<span class="built_in">front</span>().second;</span><br><span class="line">    que.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i) &#123;</span><br><span class="line"><span class="comment">//    std::printf(&quot;%d %d\n&quot;, x, y);</span></span><br><span class="line">      <span class="type">int</span> nx = x + move[i][<span class="number">0</span>], ny = y + move[i][<span class="number">1</span>];</span><br><span class="line">      <span class="keyword">if</span> (nx &lt; <span class="number">1</span> || nx &gt; n || ny &lt; <span class="number">1</span> || ny &gt; m) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (map[nx][ny] == <span class="literal">false</span>) &#123;</span><br><span class="line">        dist[nx][ny] = !dist[x][y];</span><br><span class="line">        <span class="keyword">if</span> (nx == x2 &amp;&amp; ny == y2 &amp;&amp; !(x == x1 &amp;&amp; x == x2)) &#123;</span><br><span class="line">          std::<span class="built_in">puts</span>(dist[nx][ny] ? <span class="string">&quot;Bob&quot;</span> : <span class="string">&quot;Alice&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        que.<span class="built_in">push</span>(&#123;nx, ny&#125;);</span><br><span class="line">        <span class="keyword">if</span> (!(nx == x2 &amp;&amp; ny == y2)) &#123;</span><br><span class="line">          map[nx][ny] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        updated = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">  std::<span class="built_in">puts</span>(updated ? <span class="string">&quot;Alice&quot;</span> : <span class="string">&quot;Bob&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> mirai::<span class="built_in">main</span>(argc, argv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>专题选讲</category>
        <category>博弈论</category>
      </categories>
      <tags>
        <tag>博弈论</tag>
        <tag>二分图</tag>
      </tags>
  </entry>
  <entry>
    <title>[20220115杂题选讲]Territories</title>
    <url>/2022/01/15/20220115-territories/</url>
    <content><![CDATA[<p>一道奇怪的贪心题，难点主要在对子矩阵补集的处理上。</p>
<span id="more"></span>
<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>在一个 $n\times m$ 的矩阵上放置 $k$ 个带点权的点，每个点有一个不能放置的子矩阵，最后一个位置的权值为其上所有点权值和。设 $(i, j)$ 权值为 ${\rm val}(i, j)$，求 $\max\left{\sum\limits_{i,j}\dfrac{\mathrm {val}^2(i,j)-\mathrm {val}(i,j)}{2}\right}$。</p>
<p>$n,m\le 1000$，$1\le k \le 10^5$。</p>
<p>source: 39th Petrozavodsk Programming Camp, Summer 2020; Day 1: Warsaw U Contest, Friday, August 21, 2020.</p>
<p>link: <a href="http://qoj.ac/contest/802/problem/1243">http://qoj.ac/contest/802/problem/1243</a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>注意到 $f(x)=\dfrac{x^2-x}2$ 显然满足 $f(x)+f(y)&lt;f(x+y)$，故应尽量集中点。</p>
<p>首先枚举点 $P$，将所有点放置于点 $P$。接下来我们发现，对于两个相对的大矩阵顶点 $A,B$，任何点不可能同时不能被放置于 $A,B$。再枚举剩下的点优先放的定点 $P_2$，剩下的点放在 $P_2$ 的对边即可。</p>
<p>具体实现时注意可以维护五个二维前缀和：所有子矩阵的权值前缀和、包含四个角的子矩阵的权值前缀和来避免暴力查询。（不知道为什么，大多数人维护了 $16\sim 17$ 个前缀和）</p>
<p>时间复杂度 $\Theta(nm)$，空间复杂度 $\Theta(nm)$。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;random&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> mirai &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> MAXN = <span class="number">100000</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x1[MAXN], x2[MAXN], y1[MAXN], y2[MAXN], pop[MAXN];</span><br><span class="line"><span class="type">int</span> s[<span class="number">1005</span>][<span class="number">1005</span>], s2[<span class="number">4</span>][<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="type">bool</span> chk[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="function">std::mt19937 <span class="title">rand2</span><span class="params">(<span class="number">19260817</span>)</span></span>;</span><br><span class="line">  <span class="type">int</span> cnt, n, m;</span><br><span class="line">  std::<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;cnt, &amp;n, &amp;m);</span><br><span class="line">  <span class="type">long</span> <span class="type">long</span> total = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cnt; ++i) &#123;</span><br><span class="line">    std::<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d%d&quot;</span>, &amp;x1[i], &amp;y1[i], &amp;x2[i], &amp;y2[i], &amp;pop[i]);</span><br><span class="line">    total += pop[i];</span><br><span class="line">    s[x2[i]][y2[i]] += pop[i];</span><br><span class="line">    s[x2[i]][y1[i] - <span class="number">1</span>] -= pop[i];</span><br><span class="line">    s[x1[i] - <span class="number">1</span>][y2[i]] -= pop[i];</span><br><span class="line">    s[x1[i] - <span class="number">1</span>][y1[i] - <span class="number">1</span>] += pop[i];</span><br><span class="line">    <span class="keyword">auto</span> update = [&amp;](<span class="type">int</span> k) &#123;</span><br><span class="line">      s2[k][x2[i]][y2[i]] += pop[i];</span><br><span class="line">      s2[k][x2[i]][y1[i] - <span class="number">1</span>] -= pop[i];</span><br><span class="line">      s2[k][x1[i] - <span class="number">1</span>][y2[i]] -= pop[i];</span><br><span class="line">      s2[k][x1[i] - <span class="number">1</span>][y1[i] - <span class="number">1</span>] += pop[i];</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (x1[i] == <span class="number">1</span> &amp;&amp; y1[i] == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="built_in">update</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x2[i] == n &amp;&amp; y1[i] == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="built_in">update</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x1[i] == <span class="number">1</span> &amp;&amp; y2[i] == m) &#123;</span><br><span class="line">      <span class="built_in">update</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x2[i] == n &amp;&amp; y2[i] == m) &#123;</span><br><span class="line">      <span class="built_in">update</span>(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; --i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = m; j &gt;= <span class="number">1</span>; --j) &#123;</span><br><span class="line">      s[i][j] += s[i + <span class="number">1</span>][j] + s[i][j + <span class="number">1</span>] - s[i + <span class="number">1</span>][j + <span class="number">1</span>];</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k) &#123;</span><br><span class="line">        s2[k][i][j] += s2[k][i + <span class="number">1</span>][j] + s2[k][i][j + <span class="number">1</span>] - s2[k][i + <span class="number">1</span>][j + <span class="number">1</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">long</span> <span class="type">long</span> ans = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">      <span class="type">long</span> <span class="type">long</span> a1 = total - s[i][j];</span><br><span class="line">      <span class="keyword">auto</span> count = [&amp;](<span class="type">int</span> k) -&gt; <span class="type">long</span> <span class="type">long</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> a2 = s2[k][i][j];</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> a3 = total - a1 - a2;</span><br><span class="line">        <span class="keyword">return</span> a2 * (a2 - <span class="number">1</span>) / <span class="number">2</span> + a3 * (a3 - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">      &#125;;</span><br><span class="line">      ans = std::<span class="built_in">max</span>(ans, a1 * (a1 - <span class="number">1</span>) / <span class="number">2</span> + std::<span class="built_in">max</span>(&#123;<span class="built_in">count</span>(<span class="number">0</span>), <span class="built_in">count</span>(<span class="number">1</span>), <span class="built_in">count</span>(<span class="number">2</span>), <span class="built_in">count</span>(<span class="number">3</span>)&#125;));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> mirai::<span class="built_in">main</span>(argc, argv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>做题笔记</category>
      </categories>
      <tags>
        <tag>贪心，枚举</tag>
      </tags>
  </entry>
  <entry>
    <title>NTT 模数表</title>
    <url>/2022/02/06/20220206-NTT-%E6%A8%A1%E6%95%B0%E8%A1%A8/</url>
    <content><![CDATA[<p>形如 $q\times 2^k+1$ 的素数，以及它们的最小原根。</p>
<span id="more"></span>
<p>这里提供了两种排版：表格排版和 C 风格数组排版。</p>
<p>生成代码见文末。</p>
<h2 id="表格排版"><a href="#表格排版" class="headerlink" title="表格排版"></a>表格排版</h2><p>为了减轻渲染压力，数据没有使用 MathJax。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">$q$</th>
<th style="text-align:center">$p=q\times2^{21}+1$</th>
<th style="text-align:center">$\min g$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">11</td>
<td style="text-align:center">23068673</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">33</td>
<td style="text-align:center">69206017</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">39</td>
<td style="text-align:center">81788929</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">50</td>
<td style="text-align:center">104857601</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">53</td>
<td style="text-align:center">111149057</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">54</td>
<td style="text-align:center">113246209</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">63</td>
<td style="text-align:center">132120577</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">65</td>
<td style="text-align:center">136314881</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">66</td>
<td style="text-align:center">138412033</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">74</td>
<td style="text-align:center">155189249</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">78</td>
<td style="text-align:center">163577857</td>
<td style="text-align:center">23</td>
</tr>
<tr>
<td style="text-align:center">80</td>
<td style="text-align:center">167772161</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">81</td>
<td style="text-align:center">169869313</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">89</td>
<td style="text-align:center">186646529</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">95</td>
<td style="text-align:center">199229441</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">101</td>
<td style="text-align:center">211812353</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">110</td>
<td style="text-align:center">230686721</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">119</td>
<td style="text-align:center">249561089</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">123</td>
<td style="text-align:center">257949697</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">129</td>
<td style="text-align:center">270532609</td>
<td style="text-align:center">22</td>
</tr>
<tr>
<td style="text-align:center">131</td>
<td style="text-align:center">274726913</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">180</td>
<td style="text-align:center">377487361</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">183</td>
<td style="text-align:center">383778817</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">185</td>
<td style="text-align:center">387973121</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">198</td>
<td style="text-align:center">415236097</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">219</td>
<td style="text-align:center">459276289</td>
<td style="text-align:center">11</td>
</tr>
<tr>
<td style="text-align:center">221</td>
<td style="text-align:center">463470593</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">224</td>
<td style="text-align:center">469762049</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">275</td>
<td style="text-align:center">576716801</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">284</td>
<td style="text-align:center">595591169</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">285</td>
<td style="text-align:center">597688321</td>
<td style="text-align:center">11</td>
</tr>
<tr>
<td style="text-align:center">303</td>
<td style="text-align:center">635437057</td>
<td style="text-align:center">11</td>
</tr>
<tr>
<td style="text-align:center">305</td>
<td style="text-align:center">639631361</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">308</td>
<td style="text-align:center">645922817</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">309</td>
<td style="text-align:center">648019969</td>
<td style="text-align:center">17</td>
</tr>
<tr>
<td style="text-align:center">318</td>
<td style="text-align:center">666894337</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">326</td>
<td style="text-align:center">683671553</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">339</td>
<td style="text-align:center">710934529</td>
<td style="text-align:center">17</td>
</tr>
<tr>
<td style="text-align:center">341</td>
<td style="text-align:center">715128833</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">353</td>
<td style="text-align:center">740294657</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">360</td>
<td style="text-align:center">754974721</td>
<td style="text-align:center">11</td>
</tr>
<tr>
<td style="text-align:center">375</td>
<td style="text-align:center">786432001</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">381</td>
<td style="text-align:center">799014913</td>
<td style="text-align:center">13</td>
</tr>
<tr>
<td style="text-align:center">393</td>
<td style="text-align:center">824180737</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">420</td>
<td style="text-align:center">880803841</td>
<td style="text-align:center">26</td>
</tr>
<tr>
<td style="text-align:center">428</td>
<td style="text-align:center">897581057</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">429</td>
<td style="text-align:center">899678209</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">438</td>
<td style="text-align:center">918552577</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">441</td>
<td style="text-align:center">924844033</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">446</td>
<td style="text-align:center">935329793</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">450</td>
<td style="text-align:center">943718401</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">453</td>
<td style="text-align:center">950009857</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">459</td>
<td style="text-align:center">962592769</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">465</td>
<td style="text-align:center">975175681</td>
<td style="text-align:center">17</td>
</tr>
<tr>
<td style="text-align:center">470</td>
<td style="text-align:center">985661441</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">476</td>
<td style="text-align:center">998244353</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">479</td>
<td style="text-align:center">1004535809</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">483</td>
<td style="text-align:center">1012924417</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">521</td>
<td style="text-align:center">1092616193</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">528</td>
<td style="text-align:center">1107296257</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">543</td>
<td style="text-align:center">1138753537</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">549</td>
<td style="text-align:center">1151336449</td>
<td style="text-align:center">11</td>
</tr>
<tr>
<td style="text-align:center">554</td>
<td style="text-align:center">1161822209</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">575</td>
<td style="text-align:center">1205862401</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">578</td>
<td style="text-align:center">1212153857</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">579</td>
<td style="text-align:center">1214251009</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">581</td>
<td style="text-align:center">1218445313</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">584</td>
<td style="text-align:center">1224736769</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">611</td>
<td style="text-align:center">1281359873</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">620</td>
<td style="text-align:center">1300234241</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">623</td>
<td style="text-align:center">1306525697</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">630</td>
<td style="text-align:center">1321205761</td>
<td style="text-align:center">11</td>
</tr>
<tr>
<td style="text-align:center">633</td>
<td style="text-align:center">1327497217</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">651</td>
<td style="text-align:center">1365245953</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">675</td>
<td style="text-align:center">1415577601</td>
<td style="text-align:center">17</td>
</tr>
<tr>
<td style="text-align:center">686</td>
<td style="text-align:center">1438646273</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">708</td>
<td style="text-align:center">1484783617</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">735</td>
<td style="text-align:center">1541406721</td>
<td style="text-align:center">17</td>
</tr>
<tr>
<td style="text-align:center">743</td>
<td style="text-align:center">1558183937</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">749</td>
<td style="text-align:center">1570766849</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">750</td>
<td style="text-align:center">1572864001</td>
<td style="text-align:center">13</td>
</tr>
<tr>
<td style="text-align:center">789</td>
<td style="text-align:center">1654652929</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">815</td>
<td style="text-align:center">1709178881</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">816</td>
<td style="text-align:center">1711276033</td>
<td style="text-align:center">29</td>
</tr>
<tr>
<td style="text-align:center">854</td>
<td style="text-align:center">1790967809</td>
<td style="text-align:center">13</td>
</tr>
<tr>
<td style="text-align:center">864</td>
<td style="text-align:center">1811939329</td>
<td style="text-align:center">13</td>
</tr>
<tr>
<td style="text-align:center">875</td>
<td style="text-align:center">1835008001</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">890</td>
<td style="text-align:center">1866465281</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">891</td>
<td style="text-align:center">1868562433</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">903</td>
<td style="text-align:center">1893728257</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">921</td>
<td style="text-align:center">1931476993</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">953</td>
<td style="text-align:center">1998585857</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">960</td>
<td style="text-align:center">2013265921</td>
<td style="text-align:center">31</td>
</tr>
<tr>
<td style="text-align:center">966</td>
<td style="text-align:center">2025848833</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">996</td>
<td style="text-align:center">2088763393</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">999</td>
<td style="text-align:center">2095054849</td>
<td style="text-align:center">11</td>
</tr>
<tr>
<td style="text-align:center">1001</td>
<td style="text-align:center">2099249153</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1008</td>
<td style="text-align:center">2113929217</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">1016</td>
<td style="text-align:center">2130706433</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1026</td>
<td style="text-align:center">2151677953</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">1034</td>
<td style="text-align:center">2168455169</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">1041</td>
<td style="text-align:center">2183135233</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">1043</td>
<td style="text-align:center">2187329537</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1053</td>
<td style="text-align:center">2208301057</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">1055</td>
<td style="text-align:center">2212495361</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1059</td>
<td style="text-align:center">2220883969</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">1065</td>
<td style="text-align:center">2233466881</td>
<td style="text-align:center">11</td>
</tr>
<tr>
<td style="text-align:center">1073</td>
<td style="text-align:center">2250244097</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1088</td>
<td style="text-align:center">2281701377</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1095</td>
<td style="text-align:center">2296381441</td>
<td style="text-align:center">11</td>
</tr>
<tr>
<td style="text-align:center">1103</td>
<td style="text-align:center">2313158657</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1106</td>
<td style="text-align:center">2319450113</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1118</td>
<td style="text-align:center">2344615937</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1130</td>
<td style="text-align:center">2369781761</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1146</td>
<td style="text-align:center">2403336193</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">1169</td>
<td style="text-align:center">2451570689</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1178</td>
<td style="text-align:center">2470445057</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1179</td>
<td style="text-align:center">2472542209</td>
<td style="text-align:center">17</td>
</tr>
<tr>
<td style="text-align:center">1184</td>
<td style="text-align:center">2483027969</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1208</td>
<td style="text-align:center">2533359617</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1220</td>
<td style="text-align:center">2558525441</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1254</td>
<td style="text-align:center">2629828609</td>
<td style="text-align:center">13</td>
</tr>
<tr>
<td style="text-align:center">1256</td>
<td style="text-align:center">2634022913</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1274</td>
<td style="text-align:center">2671771649</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1275</td>
<td style="text-align:center">2673868801</td>
<td style="text-align:center">22</td>
</tr>
<tr>
<td style="text-align:center">1278</td>
<td style="text-align:center">2680160257</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">1290</td>
<td style="text-align:center">2705326081</td>
<td style="text-align:center">11</td>
</tr>
<tr>
<td style="text-align:center">1296</td>
<td style="text-align:center">2717908993</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">1298</td>
<td style="text-align:center">2722103297</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1310</td>
<td style="text-align:center">2747269121</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">1319</td>
<td style="text-align:center">2766143489</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1326</td>
<td style="text-align:center">2780823553</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">1338</td>
<td style="text-align:center">2805989377</td>
<td style="text-align:center">15</td>
</tr>
<tr>
<td style="text-align:center">1340</td>
<td style="text-align:center">2810183681</td>
<td style="text-align:center">11</td>
</tr>
<tr>
<td style="text-align:center">1361</td>
<td style="text-align:center">2854223873</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1368</td>
<td style="text-align:center">2868903937</td>
<td style="text-align:center">35</td>
</tr>
<tr>
<td style="text-align:center">1376</td>
<td style="text-align:center">2885681153</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1388</td>
<td style="text-align:center">2910846977</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1389</td>
<td style="text-align:center">2912944129</td>
<td style="text-align:center">11</td>
</tr>
<tr>
<td style="text-align:center">1395</td>
<td style="text-align:center">2925527041</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">1415</td>
<td style="text-align:center">2967470081</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">1421</td>
<td style="text-align:center">2980052993</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1428</td>
<td style="text-align:center">2994733057</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">1430</td>
<td style="text-align:center">2998927361</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1431</td>
<td style="text-align:center">3001024513</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">1433</td>
<td style="text-align:center">3005218817</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1466</td>
<td style="text-align:center">3074424833</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1484</td>
<td style="text-align:center">3112173569</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1485</td>
<td style="text-align:center">3114270721</td>
<td style="text-align:center">17</td>
</tr>
<tr>
<td style="text-align:center">1509</td>
<td style="text-align:center">3164602369</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">1514</td>
<td style="text-align:center">3175088129</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1515</td>
<td style="text-align:center">3177185281</td>
<td style="text-align:center">11</td>
</tr>
<tr>
<td style="text-align:center">1530</td>
<td style="text-align:center">3208642561</td>
<td style="text-align:center">13</td>
</tr>
<tr>
<td style="text-align:center">1533</td>
<td style="text-align:center">3214934017</td>
<td style="text-align:center">17</td>
</tr>
<tr>
<td style="text-align:center">1536</td>
<td style="text-align:center">3221225473</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">1544</td>
<td style="text-align:center">3238002689</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1551</td>
<td style="text-align:center">3252682753</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">1563</td>
<td style="text-align:center">3277848577</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">1580</td>
<td style="text-align:center">3313500161</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">1593</td>
<td style="text-align:center">3340763137</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">1601</td>
<td style="text-align:center">3357540353</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1625</td>
<td style="text-align:center">3407872001</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">1628</td>
<td style="text-align:center">3414163457</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1629</td>
<td style="text-align:center">3416260609</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">1638</td>
<td style="text-align:center">3435134977</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">1646</td>
<td style="text-align:center">3451912193</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1653</td>
<td style="text-align:center">3466592257</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">1659</td>
<td style="text-align:center">3479175169</td>
<td style="text-align:center">11</td>
</tr>
<tr>
<td style="text-align:center">1661</td>
<td style="text-align:center">3483369473</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1664</td>
<td style="text-align:center">3489660929</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1673</td>
<td style="text-align:center">3508535297</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1674</td>
<td style="text-align:center">3510632449</td>
<td style="text-align:center">41</td>
</tr>
<tr>
<td style="text-align:center">1694</td>
<td style="text-align:center">3552575489</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1706</td>
<td style="text-align:center">3577741313</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1715</td>
<td style="text-align:center">3596615681</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1718</td>
<td style="text-align:center">3602907137</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1724</td>
<td style="text-align:center">3615490049</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1730</td>
<td style="text-align:center">3628072961</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1733</td>
<td style="text-align:center">3634364417</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1748</td>
<td style="text-align:center">3665821697</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1758</td>
<td style="text-align:center">3686793217</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">1775</td>
<td style="text-align:center">3722444801</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1779</td>
<td style="text-align:center">3730833409</td>
<td style="text-align:center">19</td>
</tr>
<tr>
<td style="text-align:center">1788</td>
<td style="text-align:center">3749707777</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">1821</td>
<td style="text-align:center">3818913793</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">1830</td>
<td style="text-align:center">3837788161</td>
<td style="text-align:center">31</td>
</tr>
<tr>
<td style="text-align:center">1856</td>
<td style="text-align:center">3892314113</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1859</td>
<td style="text-align:center">3898605569</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">1871</td>
<td style="text-align:center">3923771393</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1878</td>
<td style="text-align:center">3938451457</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">1880</td>
<td style="text-align:center">3942645761</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1914</td>
<td style="text-align:center">4013948929</td>
<td style="text-align:center">19</td>
</tr>
<tr>
<td style="text-align:center">1944</td>
<td style="text-align:center">4076863489</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">1958</td>
<td style="text-align:center">4106223617</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1961</td>
<td style="text-align:center">4112515073</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1995</td>
<td style="text-align:center">4183818241</td>
<td style="text-align:center">13</td>
</tr>
<tr>
<td style="text-align:center">2000</td>
<td style="text-align:center">4194304001</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">2009</td>
<td style="text-align:center">4213178369</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">2013</td>
<td style="text-align:center">4221566977</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">2028</td>
<td style="text-align:center">4253024257</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">2039</td>
<td style="text-align:center">4276092929</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">2058</td>
<td style="text-align:center">4315938817</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">2075</td>
<td style="text-align:center">4351590401</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">2096</td>
<td style="text-align:center">4395630593</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">2103</td>
<td style="text-align:center">4410310657</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">2129</td>
<td style="text-align:center">4464836609</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">2138</td>
<td style="text-align:center">4483710977</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">2174</td>
<td style="text-align:center">4559208449</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">2178</td>
<td style="text-align:center">4567597057</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">2186</td>
<td style="text-align:center">4584374273</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">2208</td>
<td style="text-align:center">4630511617</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">2214</td>
<td style="text-align:center">4643094529</td>
<td style="text-align:center">11</td>
</tr>
<tr>
<td style="text-align:center">2226</td>
<td style="text-align:center">4668260353</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">2235</td>
<td style="text-align:center">4687134721</td>
<td style="text-align:center">14</td>
</tr>
<tr>
<td style="text-align:center">2243</td>
<td style="text-align:center">4703911937</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">2283</td>
<td style="text-align:center">4787798017</td>
<td style="text-align:center">11</td>
</tr>
<tr>
<td style="text-align:center">2291</td>
<td style="text-align:center">4804575233</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">2310</td>
<td style="text-align:center">4844421121</td>
<td style="text-align:center">13</td>
</tr>
<tr>
<td style="text-align:center">2318</td>
<td style="text-align:center">4861198337</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">2328</td>
<td style="text-align:center">4882169857</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">2331</td>
<td style="text-align:center">4888461313</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">2333</td>
<td style="text-align:center">4892655617</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">2339</td>
<td style="text-align:center">4905238529</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">2349</td>
<td style="text-align:center">4926210049</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">2369</td>
<td style="text-align:center">4968153089</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">2375</td>
<td style="text-align:center">4980736001</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">2385</td>
<td style="text-align:center">5001707521</td>
<td style="text-align:center">14</td>
</tr>
<tr>
<td style="text-align:center">2394</td>
<td style="text-align:center">5020581889</td>
<td style="text-align:center">13</td>
</tr>
<tr>
<td style="text-align:center">2399</td>
<td style="text-align:center">5031067649</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">2405</td>
<td style="text-align:center">5043650561</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">2411</td>
<td style="text-align:center">5056233473</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">2415</td>
<td style="text-align:center">5064622081</td>
<td style="text-align:center">37</td>
</tr>
<tr>
<td style="text-align:center">2450</td>
<td style="text-align:center">5138022401</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">2460</td>
<td style="text-align:center">5158993921</td>
<td style="text-align:center">31</td>
</tr>
<tr>
<td style="text-align:center">2466</td>
<td style="text-align:center">5171576833</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">2468</td>
<td style="text-align:center">5175771137</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">2481</td>
<td style="text-align:center">5203034113</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">2499</td>
<td style="text-align:center">5240782849</td>
<td style="text-align:center">41</td>
</tr>
<tr>
<td style="text-align:center">2504</td>
<td style="text-align:center">5251268609</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">2531</td>
<td style="text-align:center">5307891713</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">2543</td>
<td style="text-align:center">5333057537</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">2550</td>
<td style="text-align:center">5347737601</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">2558</td>
<td style="text-align:center">5364514817</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">2565</td>
<td style="text-align:center">5379194881</td>
<td style="text-align:center">13</td>
</tr>
<tr>
<td style="text-align:center">2571</td>
<td style="text-align:center">5391777793</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">2594</td>
<td style="text-align:center">5440012289</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">2606</td>
<td style="text-align:center">5465178113</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">2609</td>
<td style="text-align:center">5471469569</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">2621</td>
<td style="text-align:center">5496635393</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">2625</td>
<td style="text-align:center">5505024001</td>
<td style="text-align:center">23</td>
</tr>
<tr>
<td style="text-align:center">2630</td>
<td style="text-align:center">5515509761</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">2636</td>
<td style="text-align:center">5528092673</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">2640</td>
<td style="text-align:center">5536481281</td>
<td style="text-align:center">19</td>
</tr>
<tr>
<td style="text-align:center">2649</td>
<td style="text-align:center">5555355649</td>
<td style="text-align:center">11</td>
</tr>
<tr>
<td style="text-align:center">2658</td>
<td style="text-align:center">5574230017</td>
<td style="text-align:center">14</td>
</tr>
<tr>
<td style="text-align:center">2660</td>
<td style="text-align:center">5578424321</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">2663</td>
<td style="text-align:center">5584715777</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">2669</td>
<td style="text-align:center">5597298689</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">2684</td>
<td style="text-align:center">5628755969</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">2690</td>
<td style="text-align:center">5641338881</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">2703</td>
<td style="text-align:center">5668601857</td>
<td style="text-align:center">11</td>
</tr>
<tr>
<td style="text-align:center">2723</td>
<td style="text-align:center">5710544897</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">2741</td>
<td style="text-align:center">5748293633</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">2754</td>
<td style="text-align:center">5775556609</td>
<td style="text-align:center">38</td>
</tr>
<tr>
<td style="text-align:center">2759</td>
<td style="text-align:center">5786042369</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">2760</td>
<td style="text-align:center">5788139521</td>
<td style="text-align:center">11</td>
</tr>
<tr>
<td style="text-align:center">2765</td>
<td style="text-align:center">5798625281</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">2784</td>
<td style="text-align:center">5838471169</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">2840</td>
<td style="text-align:center">5955911681</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">2868</td>
<td style="text-align:center">6014631937</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">2870</td>
<td style="text-align:center">6018826241</td>
<td style="text-align:center">15</td>
</tr>
<tr>
<td style="text-align:center">2889</td>
<td style="text-align:center">6058672129</td>
<td style="text-align:center">17</td>
</tr>
<tr>
<td style="text-align:center">2903</td>
<td style="text-align:center">6088032257</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">2913</td>
<td style="text-align:center">6109003777</td>
<td style="text-align:center">11</td>
</tr>
<tr>
<td style="text-align:center">2940</td>
<td style="text-align:center">6165626881</td>
<td style="text-align:center">13</td>
</tr>
<tr>
<td style="text-align:center">2945</td>
<td style="text-align:center">6176112641</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">2948</td>
<td style="text-align:center">6182404097</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">2951</td>
<td style="text-align:center">6188695553</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">2954</td>
<td style="text-align:center">6194987009</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">2955</td>
<td style="text-align:center">6197084161</td>
<td style="text-align:center">17</td>
</tr>
<tr>
<td style="text-align:center">2958</td>
<td style="text-align:center">6203375617</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">2963</td>
<td style="text-align:center">6213861377</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">2973</td>
<td style="text-align:center">6234832897</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">2978</td>
<td style="text-align:center">6245318657</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">2979</td>
<td style="text-align:center">6247415809</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">3020</td>
<td style="text-align:center">6333399041</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">3026</td>
<td style="text-align:center">6345981953</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">3068</td>
<td style="text-align:center">6434062337</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">3078</td>
<td style="text-align:center">6455033857</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">3083</td>
<td style="text-align:center">6465519617</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">3105</td>
<td style="text-align:center">6511656961</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">3116</td>
<td style="text-align:center">6534725633</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">3131</td>
<td style="text-align:center">6566182913</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">3143</td>
<td style="text-align:center">6591348737</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">3144</td>
<td style="text-align:center">6593445889</td>
<td style="text-align:center">17</td>
</tr>
<tr>
<td style="text-align:center">3153</td>
<td style="text-align:center">6612320257</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">3155</td>
<td style="text-align:center">6616514561</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">3165</td>
<td style="text-align:center">6637486081</td>
<td style="text-align:center">19</td>
</tr>
<tr>
<td style="text-align:center">3176</td>
<td style="text-align:center">6660554753</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">3179</td>
<td style="text-align:center">6666846209</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">3185</td>
<td style="text-align:center">6679429121</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">3189</td>
<td style="text-align:center">6687817729</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">3201</td>
<td style="text-align:center">6712983553</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">3204</td>
<td style="text-align:center">6719275009</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">3213</td>
<td style="text-align:center">6738149377</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">3215</td>
<td style="text-align:center">6742343681</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">3243</td>
<td style="text-align:center">6801063937</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">3245</td>
<td style="text-align:center">6805258241</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">3246</td>
<td style="text-align:center">6807355393</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">3248</td>
<td style="text-align:center">6811549697</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">3251</td>
<td style="text-align:center">6817841153</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">3278</td>
<td style="text-align:center">6874464257</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">3293</td>
<td style="text-align:center">6905921537</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">3299</td>
<td style="text-align:center">6918504449</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">3315</td>
<td style="text-align:center">6952058881</td>
<td style="text-align:center">23</td>
</tr>
<tr>
<td style="text-align:center">3336</td>
<td style="text-align:center">6996099073</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">3339</td>
<td style="text-align:center">7002390529</td>
<td style="text-align:center">19</td>
</tr>
<tr>
<td style="text-align:center">3365</td>
<td style="text-align:center">7056916481</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">3368</td>
<td style="text-align:center">7063207937</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">3374</td>
<td style="text-align:center">7075790849</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">3378</td>
<td style="text-align:center">7084179457</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">3384</td>
<td style="text-align:center">7096762369</td>
<td style="text-align:center">13</td>
</tr>
<tr>
<td style="text-align:center">3386</td>
<td style="text-align:center">7100956673</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">3461</td>
<td style="text-align:center">7258243073</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">3483</td>
<td style="text-align:center">7304380417</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">3504</td>
<td style="text-align:center">7348420609</td>
<td style="text-align:center">11</td>
</tr>
<tr>
<td style="text-align:center">3509</td>
<td style="text-align:center">7358906369</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">3510</td>
<td style="text-align:center">7361003521</td>
<td style="text-align:center">29</td>
</tr>
<tr>
<td style="text-align:center">3531</td>
<td style="text-align:center">7405043713</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">3539</td>
<td style="text-align:center">7421820929</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">3543</td>
<td style="text-align:center">7430209537</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">3551</td>
<td style="text-align:center">7446986753</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">3561</td>
<td style="text-align:center">7467958273</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">3564</td>
<td style="text-align:center">7474249729</td>
<td style="text-align:center">13</td>
</tr>
<tr>
<td style="text-align:center">3599</td>
<td style="text-align:center">7547650049</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">3605</td>
<td style="text-align:center">7560232961</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">3608</td>
<td style="text-align:center">7566524417</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">3633</td>
<td style="text-align:center">7618953217</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">3651</td>
<td style="text-align:center">7656701953</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">3680</td>
<td style="text-align:center">7717519361</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">3708</td>
<td style="text-align:center">7776239617</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">3713</td>
<td style="text-align:center">7786725377</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">3719</td>
<td style="text-align:center">7799308289</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">3725</td>
<td style="text-align:center">7811891201</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">3726</td>
<td style="text-align:center">7813988353</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">3728</td>
<td style="text-align:center">7818182657</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">3740</td>
<td style="text-align:center">7843348481</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">3741</td>
<td style="text-align:center">7845445633</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">3743</td>
<td style="text-align:center">7849639937</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">3746</td>
<td style="text-align:center">7855931393</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">3755</td>
<td style="text-align:center">7874805761</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">3759</td>
<td style="text-align:center">7883194369</td>
<td style="text-align:center">11</td>
</tr>
<tr>
<td style="text-align:center">3771</td>
<td style="text-align:center">7908360193</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">3776</td>
<td style="text-align:center">7918845953</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">3804</td>
<td style="text-align:center">7977566209</td>
<td style="text-align:center">11</td>
</tr>
<tr>
<td style="text-align:center">3830</td>
<td style="text-align:center">8032092161</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">3836</td>
<td style="text-align:center">8044675073</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">3846</td>
<td style="text-align:center">8065646593</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">3854</td>
<td style="text-align:center">8082423809</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">3894</td>
<td style="text-align:center">8166309889</td>
<td style="text-align:center">14</td>
</tr>
<tr>
<td style="text-align:center">3896</td>
<td style="text-align:center">8170504193</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">3920</td>
<td style="text-align:center">8220835841</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">3923</td>
<td style="text-align:center">8227127297</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">3929</td>
<td style="text-align:center">8239710209</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">3930</td>
<td style="text-align:center">8241807361</td>
<td style="text-align:center">11</td>
</tr>
<tr>
<td style="text-align:center">3935</td>
<td style="text-align:center">8252293121</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">3948</td>
<td style="text-align:center">8279556097</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">3950</td>
<td style="text-align:center">8283750401</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">3960</td>
<td style="text-align:center">8304721921</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">3966</td>
<td style="text-align:center">8317304833</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">3969</td>
<td style="text-align:center">8323596289</td>
<td style="text-align:center">13</td>
</tr>
<tr>
<td style="text-align:center">3974</td>
<td style="text-align:center">8334082049</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">3995</td>
<td style="text-align:center">8378122241</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">3999</td>
<td style="text-align:center">8386510849</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">4013</td>
<td style="text-align:center">8415870977</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4028</td>
<td style="text-align:center">8447328257</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4041</td>
<td style="text-align:center">8474591233</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">4044</td>
<td style="text-align:center">8480882689</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">4049</td>
<td style="text-align:center">8491368449</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4068</td>
<td style="text-align:center">8531214337</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">4071</td>
<td style="text-align:center">8537505793</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">4103</td>
<td style="text-align:center">8604614657</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4118</td>
<td style="text-align:center">8636071937</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4124</td>
<td style="text-align:center">8648654849</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4133</td>
<td style="text-align:center">8667529217</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4134</td>
<td style="text-align:center">8669626369</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">4145</td>
<td style="text-align:center">8692695041</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">4151</td>
<td style="text-align:center">8705277953</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">4154</td>
<td style="text-align:center">8711569409</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4155</td>
<td style="text-align:center">8713666561</td>
<td style="text-align:center">13</td>
</tr>
<tr>
<td style="text-align:center">4175</td>
<td style="text-align:center">8755609601</td>
<td style="text-align:center">11</td>
</tr>
<tr>
<td style="text-align:center">4203</td>
<td style="text-align:center">8814329857</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">4214</td>
<td style="text-align:center">8837398529</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4223</td>
<td style="text-align:center">8856272897</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4224</td>
<td style="text-align:center">8858370049</td>
<td style="text-align:center">23</td>
</tr>
<tr>
<td style="text-align:center">4235</td>
<td style="text-align:center">8881438721</td>
<td style="text-align:center">15</td>
</tr>
<tr>
<td style="text-align:center">4239</td>
<td style="text-align:center">8889827329</td>
<td style="text-align:center">17</td>
</tr>
<tr>
<td style="text-align:center">4250</td>
<td style="text-align:center">8912896001</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4254</td>
<td style="text-align:center">8921284609</td>
<td style="text-align:center">14</td>
</tr>
<tr>
<td style="text-align:center">4265</td>
<td style="text-align:center">8944353281</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4286</td>
<td style="text-align:center">8988393473</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4289</td>
<td style="text-align:center">8994684929</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4296</td>
<td style="text-align:center">9009364993</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">4313</td>
<td style="text-align:center">9045016577</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4319</td>
<td style="text-align:center">9057599489</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4335</td>
<td style="text-align:center">9091153921</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">4349</td>
<td style="text-align:center">9120514049</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4376</td>
<td style="text-align:center">9177137153</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4379</td>
<td style="text-align:center">9183428609</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4385</td>
<td style="text-align:center">9196011521</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4400</td>
<td style="text-align:center">9227468801</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4406</td>
<td style="text-align:center">9240051713</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4413</td>
<td style="text-align:center">9254731777</td>
<td style="text-align:center">15</td>
</tr>
<tr>
<td style="text-align:center">4421</td>
<td style="text-align:center">9271508993</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4424</td>
<td style="text-align:center">9277800449</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4443</td>
<td style="text-align:center">9317646337</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">4466</td>
<td style="text-align:center">9365880833</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">4478</td>
<td style="text-align:center">9391046657</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4499</td>
<td style="text-align:center">9435086849</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4511</td>
<td style="text-align:center">9460252673</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4518</td>
<td style="text-align:center">9474932737</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">4533</td>
<td style="text-align:center">9506390017</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">4536</td>
<td style="text-align:center">9512681473</td>
<td style="text-align:center">15</td>
</tr>
<tr>
<td style="text-align:center">4544</td>
<td style="text-align:center">9529458689</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4545</td>
<td style="text-align:center">9531555841</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">4551</td>
<td style="text-align:center">9544138753</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">4578</td>
<td style="text-align:center">9600761857</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">4580</td>
<td style="text-align:center">9604956161</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4583</td>
<td style="text-align:center">9611247617</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4593</td>
<td style="text-align:center">9632219137</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">4595</td>
<td style="text-align:center">9636413441</td>
<td style="text-align:center">11</td>
</tr>
<tr>
<td style="text-align:center">4601</td>
<td style="text-align:center">9648996353</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4610</td>
<td style="text-align:center">9667870721</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4629</td>
<td style="text-align:center">9707716609</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">4655</td>
<td style="text-align:center">9762242561</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4670</td>
<td style="text-align:center">9793699841</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4671</td>
<td style="text-align:center">9795796993</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">4673</td>
<td style="text-align:center">9799991297</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4704</td>
<td style="text-align:center">9865003009</td>
<td style="text-align:center">19</td>
</tr>
<tr>
<td style="text-align:center">4716</td>
<td style="text-align:center">9890168833</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">4733</td>
<td style="text-align:center">9925820417</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4770</td>
<td style="text-align:center">10003415041</td>
<td style="text-align:center">23</td>
</tr>
<tr>
<td style="text-align:center">4775</td>
<td style="text-align:center">10013900801</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4788</td>
<td style="text-align:center">10041163777</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">4791</td>
<td style="text-align:center">10047455233</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">4793</td>
<td style="text-align:center">10051649537</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4811</td>
<td style="text-align:center">10089398273</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4839</td>
<td style="text-align:center">10148118529</td>
<td style="text-align:center">11</td>
</tr>
<tr>
<td style="text-align:center">4853</td>
<td style="text-align:center">10177478657</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4865</td>
<td style="text-align:center">10202644481</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">4868</td>
<td style="text-align:center">10208935937</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4883</td>
<td style="text-align:center">10240393217</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4886</td>
<td style="text-align:center">10246684673</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4896</td>
<td style="text-align:center">10267656193</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">4923</td>
<td style="text-align:center">10324279297</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">4925</td>
<td style="text-align:center">10328473601</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4953</td>
<td style="text-align:center">10387193857</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">4964</td>
<td style="text-align:center">10410262529</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4970</td>
<td style="text-align:center">10422845441</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4979</td>
<td style="text-align:center">10441719809</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4991</td>
<td style="text-align:center">10466885633</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4994</td>
<td style="text-align:center">10473177089</td>
<td style="text-align:center">12</td>
</tr>
<tr>
<td style="text-align:center">4998</td>
<td style="text-align:center">10481565697</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">5000</td>
<td style="text-align:center">10485760001</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">5013</td>
<td style="text-align:center">10513022977</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">5030</td>
<td style="text-align:center">10548674561</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">5051</td>
<td style="text-align:center">10592714753</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">5064</td>
<td style="text-align:center">10619977729</td>
<td style="text-align:center">29</td>
</tr>
<tr>
<td style="text-align:center">5066</td>
<td style="text-align:center">10624172033</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">5073</td>
<td style="text-align:center">10638852097</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">5078</td>
<td style="text-align:center">10649337857</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">5084</td>
<td style="text-align:center">10661920769</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">5090</td>
<td style="text-align:center">10674503681</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">5124</td>
<td style="text-align:center">10745806849</td>
<td style="text-align:center">19</td>
</tr>
<tr>
<td style="text-align:center">5138</td>
<td style="text-align:center">10775166977</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">5139</td>
<td style="text-align:center">10777264129</td>
<td style="text-align:center">13</td>
</tr>
<tr>
<td style="text-align:center">5154</td>
<td style="text-align:center">10808721409</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">5169</td>
<td style="text-align:center">10840178689</td>
<td style="text-align:center">11</td>
</tr>
<tr>
<td style="text-align:center">5171</td>
<td style="text-align:center">10844372993</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">5174</td>
<td style="text-align:center">10850664449</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">5181</td>
<td style="text-align:center">10865344513</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">5184</td>
<td style="text-align:center">10871635969</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">5198</td>
<td style="text-align:center">10900996097</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">5225</td>
<td style="text-align:center">10957619201</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">5238</td>
<td style="text-align:center">10984882177</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">5240</td>
<td style="text-align:center">10989076481</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">5255</td>
<td style="text-align:center">11020533761</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">5258</td>
<td style="text-align:center">11026825217</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">5261</td>
<td style="text-align:center">11033116673</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">5276</td>
<td style="text-align:center">11064573953</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">5286</td>
<td style="text-align:center">11085545473</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">5301</td>
<td style="text-align:center">11117002753</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">5303</td>
<td style="text-align:center">11121197057</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">5304</td>
<td style="text-align:center">11123294209</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">5306</td>
<td style="text-align:center">11127488513</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">5310</td>
<td style="text-align:center">11135877121</td>
<td style="text-align:center">11</td>
</tr>
<tr>
<td style="text-align:center">5321</td>
<td style="text-align:center">11158945793</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">5328</td>
<td style="text-align:center">11173625857</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">5358</td>
<td style="text-align:center">11236540417</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">5399</td>
<td style="text-align:center">11322523649</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">5408</td>
<td style="text-align:center">11341398017</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">5414</td>
<td style="text-align:center">11353980929</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">5423</td>
<td style="text-align:center">11372855297</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">5433</td>
<td style="text-align:center">11393826817</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">5435</td>
<td style="text-align:center">11398021121</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">5444</td>
<td style="text-align:center">11416895489</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">5451</td>
<td style="text-align:center">11431575553</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">5463</td>
<td style="text-align:center">11456741377</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">5475</td>
<td style="text-align:center">11481907201</td>
<td style="text-align:center">13</td>
</tr>
<tr>
<td style="text-align:center">5481</td>
<td style="text-align:center">11494490113</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">5493</td>
<td style="text-align:center">11519655937</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">5499</td>
<td style="text-align:center">11532238849</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">5510</td>
<td style="text-align:center">11555307521</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">5511</td>
<td style="text-align:center">11557404673</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">5525</td>
<td style="text-align:center">11586764801</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">5540</td>
<td style="text-align:center">11618222081</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">5561</td>
<td style="text-align:center">11662262273</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">5573</td>
<td style="text-align:center">11687428097</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">5576</td>
<td style="text-align:center">11693719553</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">5579</td>
<td style="text-align:center">11700011009</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">5586</td>
<td style="text-align:center">11714691073</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">5588</td>
<td style="text-align:center">11718885377</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">5603</td>
<td style="text-align:center">11750342657</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">5609</td>
<td style="text-align:center">11762925569</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">5618</td>
<td style="text-align:center">11781799937</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">5628</td>
<td style="text-align:center">11802771457</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">5649</td>
<td style="text-align:center">11846811649</td>
<td style="text-align:center">22</td>
</tr>
<tr>
<td style="text-align:center">5658</td>
<td style="text-align:center">11865686017</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">5691</td>
<td style="text-align:center">11934892033</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">5705</td>
<td style="text-align:center">11964252161</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">5724</td>
<td style="text-align:center">12004098049</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">5729</td>
<td style="text-align:center">12014583809</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">5741</td>
<td style="text-align:center">12039749633</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">5754</td>
<td style="text-align:center">12067012609</td>
<td style="text-align:center">13</td>
</tr>
<tr>
<td style="text-align:center">5765</td>
<td style="text-align:center">12090081281</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">5775</td>
<td style="text-align:center">12111052801</td>
<td style="text-align:center">17</td>
</tr>
<tr>
<td style="text-align:center">5784</td>
<td style="text-align:center">12129927169</td>
<td style="text-align:center">14</td>
</tr>
<tr>
<td style="text-align:center">5825</td>
<td style="text-align:center">12215910401</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">5831</td>
<td style="text-align:center">12228493313</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">5834</td>
<td style="text-align:center">12234784769</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">5864</td>
<td style="text-align:center">12297699329</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">5870</td>
<td style="text-align:center">12310282241</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">5873</td>
<td style="text-align:center">12316573697</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">5876</td>
<td style="text-align:center">12322865153</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">5888</td>
<td style="text-align:center">12348030977</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">5895</td>
<td style="text-align:center">12362711041</td>
<td style="text-align:center">19</td>
</tr>
<tr>
<td style="text-align:center">5906</td>
<td style="text-align:center">12385779713</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">5913</td>
<td style="text-align:center">12400459777</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">5940</td>
<td style="text-align:center">12457082881</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">5943</td>
<td style="text-align:center">12463374337</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">5951</td>
<td style="text-align:center">12480151553</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">5975</td>
<td style="text-align:center">12530483201</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">5988</td>
<td style="text-align:center">12557746177</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">5999</td>
<td style="text-align:center">12580814849</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">6041</td>
<td style="text-align:center">12668895233</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">6053</td>
<td style="text-align:center">12694061057</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">6071</td>
<td style="text-align:center">12731809793</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">6084</td>
<td style="text-align:center">12759072769</td>
<td style="text-align:center">19</td>
</tr>
<tr>
<td style="text-align:center">6086</td>
<td style="text-align:center">12763267073</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">6090</td>
<td style="text-align:center">12771655681</td>
<td style="text-align:center">23</td>
</tr>
<tr>
<td style="text-align:center">6098</td>
<td style="text-align:center">12788432897</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">6104</td>
<td style="text-align:center">12801015809</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">6111</td>
<td style="text-align:center">12815695873</td>
<td style="text-align:center">15</td>
</tr>
<tr>
<td style="text-align:center">6135</td>
<td style="text-align:center">12866027521</td>
<td style="text-align:center">17</td>
</tr>
<tr>
<td style="text-align:center">6161</td>
<td style="text-align:center">12920553473</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">6164</td>
<td style="text-align:center">12926844929</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">6188</td>
<td style="text-align:center">12977176577</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">6203</td>
<td style="text-align:center">13008633857</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">6213</td>
<td style="text-align:center">13029605377</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">6225</td>
<td style="text-align:center">13054771201</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">6251</td>
<td style="text-align:center">13109297153</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">6260</td>
<td style="text-align:center">13128171521</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">6263</td>
<td style="text-align:center">13134462977</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">6276</td>
<td style="text-align:center">13161725953</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">6288</td>
<td style="text-align:center">13186891777</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">6303</td>
<td style="text-align:center">13218349057</td>
<td style="text-align:center">15</td>
</tr>
<tr>
<td style="text-align:center">6305</td>
<td style="text-align:center">13222543361</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">6309</td>
<td style="text-align:center">13230931969</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">6324</td>
<td style="text-align:center">13262389249</td>
<td style="text-align:center">11</td>
</tr>
<tr>
<td style="text-align:center">6338</td>
<td style="text-align:center">13291749377</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">6371</td>
<td style="text-align:center">13360955393</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">6380</td>
<td style="text-align:center">13379829761</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">6381</td>
<td style="text-align:center">13381926913</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">6386</td>
<td style="text-align:center">13392412673</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">6389</td>
<td style="text-align:center">13398704129</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">6413</td>
<td style="text-align:center">13449035777</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">6423</td>
<td style="text-align:center">13470007297</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">6431</td>
<td style="text-align:center">13486784513</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">6444</td>
<td style="text-align:center">13514047489</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">6464</td>
<td style="text-align:center">13555990529</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">6465</td>
<td style="text-align:center">13558087681</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">6485</td>
<td style="text-align:center">13600030721</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">6491</td>
<td style="text-align:center">13612613633</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">6515</td>
<td style="text-align:center">13662945281</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">6519</td>
<td style="text-align:center">13671333889</td>
<td style="text-align:center">13</td>
</tr>
<tr>
<td style="text-align:center">6521</td>
<td style="text-align:center">13675528193</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">6540</td>
<td style="text-align:center">13715374081</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">6545</td>
<td style="text-align:center">13725859841</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">6555</td>
<td style="text-align:center">13746831361</td>
<td style="text-align:center">29</td>
</tr>
<tr>
<td style="text-align:center">6560</td>
<td style="text-align:center">13757317121</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">6606</td>
<td style="text-align:center">13853786113</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">6608</td>
<td style="text-align:center">13857980417</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">6611</td>
<td style="text-align:center">13864271873</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">6633</td>
<td style="text-align:center">13910409217</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">6636</td>
<td style="text-align:center">13916700673</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">6644</td>
<td style="text-align:center">13933477889</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">6659</td>
<td style="text-align:center">13964935169</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">6669</td>
<td style="text-align:center">13985906689</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">6678</td>
<td style="text-align:center">14004781057</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">6683</td>
<td style="text-align:center">14015266817</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">6689</td>
<td style="text-align:center">14027849729</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">6696</td>
<td style="text-align:center">14042529793</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">6720</td>
<td style="text-align:center">14092861441</td>
<td style="text-align:center">19</td>
</tr>
<tr>
<td style="text-align:center">6728</td>
<td style="text-align:center">14109638657</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">6729</td>
<td style="text-align:center">14111735809</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">6735</td>
<td style="text-align:center">14124318721</td>
<td style="text-align:center">13</td>
</tr>
<tr>
<td style="text-align:center">6743</td>
<td style="text-align:center">14141095937</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">6750</td>
<td style="text-align:center">14155776001</td>
<td style="text-align:center">21</td>
</tr>
<tr>
<td style="text-align:center">6755</td>
<td style="text-align:center">14166261761</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">6756</td>
<td style="text-align:center">14168358913</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">6813</td>
<td style="text-align:center">14287896577</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">6815</td>
<td style="text-align:center">14292090881</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">6821</td>
<td style="text-align:center">14304673793</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">6848</td>
<td style="text-align:center">14361296897</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">6854</td>
<td style="text-align:center">14373879809</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">6855</td>
<td style="text-align:center">14375976961</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">6863</td>
<td style="text-align:center">14392754177</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">6870</td>
<td style="text-align:center">14407434241</td>
<td style="text-align:center">13</td>
</tr>
<tr>
<td style="text-align:center">6900</td>
<td style="text-align:center">14470348801</td>
<td style="text-align:center">14</td>
</tr>
<tr>
<td style="text-align:center">6903</td>
<td style="text-align:center">14476640257</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">6918</td>
<td style="text-align:center">14508097537</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">6956</td>
<td style="text-align:center">14587789313</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">6969</td>
<td style="text-align:center">14615052289</td>
<td style="text-align:center">13</td>
</tr>
<tr>
<td style="text-align:center">6974</td>
<td style="text-align:center">14625538049</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">6989</td>
<td style="text-align:center">14656995329</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">6995</td>
<td style="text-align:center">14669578241</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">7049</td>
<td style="text-align:center">14782824449</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">7050</td>
<td style="text-align:center">14784921601</td>
<td style="text-align:center">13</td>
</tr>
<tr>
<td style="text-align:center">7061</td>
<td style="text-align:center">14807990273</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">7068</td>
<td style="text-align:center">14822670337</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">7071</td>
<td style="text-align:center">14828961793</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">7073</td>
<td style="text-align:center">14833156097</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">7079</td>
<td style="text-align:center">14845739009</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">7085</td>
<td style="text-align:center">14858321921</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">7110</td>
<td style="text-align:center">14910750721</td>
<td style="text-align:center">14</td>
</tr>
<tr>
<td style="text-align:center">7119</td>
<td style="text-align:center">14929625089</td>
<td style="text-align:center">13</td>
</tr>
<tr>
<td style="text-align:center">7121</td>
<td style="text-align:center">14933819393</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">7124</td>
<td style="text-align:center">14940110849</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">7130</td>
<td style="text-align:center">14952693761</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">7131</td>
<td style="text-align:center">14954790913</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">7164</td>
<td style="text-align:center">15023996929</td>
<td style="text-align:center">37</td>
</tr>
<tr>
<td style="text-align:center">7169</td>
<td style="text-align:center">15034482689</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">7173</td>
<td style="text-align:center">15042871297</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">7184</td>
<td style="text-align:center">15065939969</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">7185</td>
<td style="text-align:center">15068037121</td>
<td style="text-align:center">13</td>
</tr>
<tr>
<td style="text-align:center">7193</td>
<td style="text-align:center">15084814337</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">7214</td>
<td style="text-align:center">15128854529</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">7224</td>
<td style="text-align:center">15149826049</td>
<td style="text-align:center">11</td>
</tr>
<tr>
<td style="text-align:center">7226</td>
<td style="text-align:center">15154020353</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">7241</td>
<td style="text-align:center">15185477633</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">7260</td>
<td style="text-align:center">15225323521</td>
<td style="text-align:center">13</td>
</tr>
<tr>
<td style="text-align:center">7263</td>
<td style="text-align:center">15231614977</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">7271</td>
<td style="text-align:center">15248392193</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">7275</td>
<td style="text-align:center">15256780801</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">7278</td>
<td style="text-align:center">15263072257</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">7310</td>
<td style="text-align:center">15330181121</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">7326</td>
<td style="text-align:center">15363735553</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">7338</td>
<td style="text-align:center">15388901377</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">7355</td>
<td style="text-align:center">15424552961</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">7394</td>
<td style="text-align:center">15506341889</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">7406</td>
<td style="text-align:center">15531507713</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">7418</td>
<td style="text-align:center">15556673537</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">7434</td>
<td style="text-align:center">15590227969</td>
<td style="text-align:center">11</td>
</tr>
<tr>
<td style="text-align:center">7439</td>
<td style="text-align:center">15600713729</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">7448</td>
<td style="text-align:center">15619588097</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">7464</td>
<td style="text-align:center">15653142529</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">7476</td>
<td style="text-align:center">15678308353</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">7479</td>
<td style="text-align:center">15684599809</td>
<td style="text-align:center">11</td>
</tr>
<tr>
<td style="text-align:center">7481</td>
<td style="text-align:center">15688794113</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">7490</td>
<td style="text-align:center">15707668481</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">7508</td>
<td style="text-align:center">15745417217</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">7530</td>
<td style="text-align:center">15791554561</td>
<td style="text-align:center">11</td>
</tr>
<tr>
<td style="text-align:center">7535</td>
<td style="text-align:center">15802040321</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">7554</td>
<td style="text-align:center">15841886209</td>
<td style="text-align:center">11</td>
</tr>
<tr>
<td style="text-align:center">7560</td>
<td style="text-align:center">15854469121</td>
<td style="text-align:center">11</td>
</tr>
<tr>
<td style="text-align:center">7578</td>
<td style="text-align:center">15892217857</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">7598</td>
<td style="text-align:center">15934160897</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">7613</td>
<td style="text-align:center">15965618177</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">7653</td>
<td style="text-align:center">16049504257</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">7665</td>
<td style="text-align:center">16074670081</td>
<td style="text-align:center">11</td>
</tr>
<tr>
<td style="text-align:center">7668</td>
<td style="text-align:center">16080961537</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">7679</td>
<td style="text-align:center">16104030209</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">7691</td>
<td style="text-align:center">16129196033</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">7700</td>
<td style="text-align:center">16148070401</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">7709</td>
<td style="text-align:center">16166944769</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">7730</td>
<td style="text-align:center">16210984961</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">7764</td>
<td style="text-align:center">16282288129</td>
<td style="text-align:center">11</td>
</tr>
<tr>
<td style="text-align:center">7794</td>
<td style="text-align:center">16345202689</td>
<td style="text-align:center">11</td>
</tr>
<tr>
<td style="text-align:center">7800</td>
<td style="text-align:center">16357785601</td>
<td style="text-align:center">17</td>
</tr>
<tr>
<td style="text-align:center">7809</td>
<td style="text-align:center">16376659969</td>
<td style="text-align:center">11</td>
</tr>
<tr>
<td style="text-align:center">7833</td>
<td style="text-align:center">16426991617</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">7850</td>
<td style="text-align:center">16462643201</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">7856</td>
<td style="text-align:center">16475226113</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">7868</td>
<td style="text-align:center">16500391937</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">7869</td>
<td style="text-align:center">16502489089</td>
<td style="text-align:center">23</td>
</tr>
<tr>
<td style="text-align:center">7875</td>
<td style="text-align:center">16515072001</td>
<td style="text-align:center">17</td>
</tr>
<tr>
<td style="text-align:center">7901</td>
<td style="text-align:center">16569597953</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">7904</td>
<td style="text-align:center">16575889409</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">7928</td>
<td style="text-align:center">16626221057</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">7938</td>
<td style="text-align:center">16647192577</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">7955</td>
<td style="text-align:center">16682844161</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">7970</td>
<td style="text-align:center">16714301441</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">7976</td>
<td style="text-align:center">16726884353</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">7989</td>
<td style="text-align:center">16754147329</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">8001</td>
<td style="text-align:center">16779313153</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">8010</td>
<td style="text-align:center">16798187521</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">8018</td>
<td style="text-align:center">16814964737</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">8019</td>
<td style="text-align:center">16817061889</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">8030</td>
<td style="text-align:center">16840130561</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">8034</td>
<td style="text-align:center">16848519169</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">8045</td>
<td style="text-align:center">16871587841</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">8051</td>
<td style="text-align:center">16884170753</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">8060</td>
<td style="text-align:center">16903045121</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">8069</td>
<td style="text-align:center">16921919489</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">8093</td>
<td style="text-align:center">16972251137</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">8109</td>
<td style="text-align:center">17005805569</td>
<td style="text-align:center">23</td>
</tr>
<tr>
<td style="text-align:center">8150</td>
<td style="text-align:center">17091788801</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">8153</td>
<td style="text-align:center">17098080257</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">8165</td>
<td style="text-align:center">17123246081</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">8190</td>
<td style="text-align:center">17175674881</td>
<td style="text-align:center">22</td>
</tr>
<tr>
<td style="text-align:center">8204</td>
<td style="text-align:center">17205035009</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">8219</td>
<td style="text-align:center">17236492289</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">8223</td>
<td style="text-align:center">17244880897</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">8226</td>
<td style="text-align:center">17251172353</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">8241</td>
<td style="text-align:center">17282629633</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">8243</td>
<td style="text-align:center">17286823937</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">8256</td>
<td style="text-align:center">17314086913</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">8270</td>
<td style="text-align:center">17343447041</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">8276</td>
<td style="text-align:center">17356029953</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">8283</td>
<td style="text-align:center">17370710017</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">8289</td>
<td style="text-align:center">17383292929</td>
<td style="text-align:center">11</td>
</tr>
<tr>
<td style="text-align:center">8313</td>
<td style="text-align:center">17433624577</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">8318</td>
<td style="text-align:center">17444110337</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">8319</td>
<td style="text-align:center">17446207489</td>
<td style="text-align:center">17</td>
</tr>
<tr>
<td style="text-align:center">8330</td>
<td style="text-align:center">17469276161</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">8333</td>
<td style="text-align:center">17475567617</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">8345</td>
<td style="text-align:center">17500733441</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">8358</td>
<td style="text-align:center">17527996417</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">8391</td>
<td style="text-align:center">17597202433</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">8411</td>
<td style="text-align:center">17639145473</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">8414</td>
<td style="text-align:center">17645436929</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">8426</td>
<td style="text-align:center">17670602753</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">8445</td>
<td style="text-align:center">17710448641</td>
<td style="text-align:center">11</td>
</tr>
<tr>
<td style="text-align:center">8498</td>
<td style="text-align:center">17821597697</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">8501</td>
<td style="text-align:center">17827889153</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">8529</td>
<td style="text-align:center">17886609409</td>
<td style="text-align:center">13</td>
</tr>
<tr>
<td style="text-align:center">8534</td>
<td style="text-align:center">17897095169</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">8555</td>
<td style="text-align:center">17941135361</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">8604</td>
<td style="text-align:center">18043895809</td>
<td style="text-align:center">17</td>
</tr>
<tr>
<td style="text-align:center">8621</td>
<td style="text-align:center">18079547393</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">8643</td>
<td style="text-align:center">18125684737</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">8649</td>
<td style="text-align:center">18138267649</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">8660</td>
<td style="text-align:center">18161336321</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">8685</td>
<td style="text-align:center">18213765121</td>
<td style="text-align:center">17</td>
</tr>
<tr>
<td style="text-align:center">8703</td>
<td style="text-align:center">18251513857</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">8718</td>
<td style="text-align:center">18282971137</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">8733</td>
<td style="text-align:center">18314428417</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">8748</td>
<td style="text-align:center">18345885697</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">8768</td>
<td style="text-align:center">18387828737</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">8771</td>
<td style="text-align:center">18394120193</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">8790</td>
<td style="text-align:center">18433966081</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">8796</td>
<td style="text-align:center">18446548993</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">8814</td>
<td style="text-align:center">18484297729</td>
<td style="text-align:center">22</td>
</tr>
<tr>
<td style="text-align:center">8834</td>
<td style="text-align:center">18526240769</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">8843</td>
<td style="text-align:center">18545115137</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">8844</td>
<td style="text-align:center">18547212289</td>
<td style="text-align:center">17</td>
</tr>
<tr>
<td style="text-align:center">8873</td>
<td style="text-align:center">18608029697</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">8874</td>
<td style="text-align:center">18610126849</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">8886</td>
<td style="text-align:center">18635292673</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">8888</td>
<td style="text-align:center">18639486977</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">8916</td>
<td style="text-align:center">18698207233</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">8919</td>
<td style="text-align:center">18704498689</td>
<td style="text-align:center">11</td>
</tr>
<tr>
<td style="text-align:center">8921</td>
<td style="text-align:center">18708692993</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">8939</td>
<td style="text-align:center">18746441729</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">8955</td>
<td style="text-align:center">18779996161</td>
<td style="text-align:center">14</td>
</tr>
<tr>
<td style="text-align:center">8990</td>
<td style="text-align:center">18853396481</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">8996</td>
<td style="text-align:center">18865979393</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">9000</td>
<td style="text-align:center">18874368001</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">9026</td>
<td style="text-align:center">18928893953</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">9030</td>
<td style="text-align:center">18937282561</td>
<td style="text-align:center">13</td>
</tr>
<tr>
<td style="text-align:center">9035</td>
<td style="text-align:center">18947768321</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">9038</td>
<td style="text-align:center">18954059777</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">9039</td>
<td style="text-align:center">18956156929</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">9044</td>
<td style="text-align:center">18966642689</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">9045</td>
<td style="text-align:center">18968739841</td>
<td style="text-align:center">29</td>
</tr>
<tr>
<td style="text-align:center">9075</td>
<td style="text-align:center">19031654401</td>
<td style="text-align:center">34</td>
</tr>
<tr>
<td style="text-align:center">9086</td>
<td style="text-align:center">19054723073</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">9119</td>
<td style="text-align:center">19123929089</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">9125</td>
<td style="text-align:center">19136512001</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">9158</td>
<td style="text-align:center">19205718017</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">9159</td>
<td style="text-align:center">19207815169</td>
<td style="text-align:center">23</td>
</tr>
<tr>
<td style="text-align:center">9171</td>
<td style="text-align:center">19232980993</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">9173</td>
<td style="text-align:center">19237175297</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">9180</td>
<td style="text-align:center">19251855361</td>
<td style="text-align:center">22</td>
</tr>
<tr>
<td style="text-align:center">9185</td>
<td style="text-align:center">19262341121</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">9186</td>
<td style="text-align:center">19264438273</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">9228</td>
<td style="text-align:center">19352518657</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">9266</td>
<td style="text-align:center">19432210433</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">9275</td>
<td style="text-align:center">19451084801</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">9294</td>
<td style="text-align:center">19490930689</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">9305</td>
<td style="text-align:center">19513999361</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">9314</td>
<td style="text-align:center">19532873729</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">9321</td>
<td style="text-align:center">19547553793</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">9341</td>
<td style="text-align:center">19589496833</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">9345</td>
<td style="text-align:center">19597885441</td>
<td style="text-align:center">31</td>
</tr>
<tr>
<td style="text-align:center">9350</td>
<td style="text-align:center">19608371201</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">9356</td>
<td style="text-align:center">19620954113</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">9363</td>
<td style="text-align:center">19635634177</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">9369</td>
<td style="text-align:center">19648217089</td>
<td style="text-align:center">13</td>
</tr>
<tr>
<td style="text-align:center">9371</td>
<td style="text-align:center">19652411393</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">9398</td>
<td style="text-align:center">19709034497</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">9411</td>
<td style="text-align:center">19736297473</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">9423</td>
<td style="text-align:center">19761463297</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">9429</td>
<td style="text-align:center">19774046209</td>
<td style="text-align:center">19</td>
</tr>
<tr>
<td style="text-align:center">9453</td>
<td style="text-align:center">19824377857</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">9464</td>
<td style="text-align:center">19847446529</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">9483</td>
<td style="text-align:center">19887292417</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">9485</td>
<td style="text-align:center">19891486721</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">9516</td>
<td style="text-align:center">19956498433</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">9518</td>
<td style="text-align:center">19960692737</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">9525</td>
<td style="text-align:center">19975372801</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">9536</td>
<td style="text-align:center">19998441473</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">9539</td>
<td style="text-align:center">20004732929</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">9555</td>
<td style="text-align:center">20038287361</td>
<td style="text-align:center">31</td>
</tr>
<tr>
<td style="text-align:center">9579</td>
<td style="text-align:center">20088619009</td>
<td style="text-align:center">11</td>
</tr>
<tr>
<td style="text-align:center">9585</td>
<td style="text-align:center">20101201921</td>
<td style="text-align:center">13</td>
</tr>
<tr>
<td style="text-align:center">9591</td>
<td style="text-align:center">20113784833</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">9593</td>
<td style="text-align:center">20117979137</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">9606</td>
<td style="text-align:center">20145242113</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">9623</td>
<td style="text-align:center">20180893697</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">9626</td>
<td style="text-align:center">20187185153</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">9639</td>
<td style="text-align:center">20214448129</td>
<td style="text-align:center">22</td>
</tr>
<tr>
<td style="text-align:center">9650</td>
<td style="text-align:center">20237516801</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">9653</td>
<td style="text-align:center">20243808257</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">9689</td>
<td style="text-align:center">20319305729</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">9693</td>
<td style="text-align:center">20327694337</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">9711</td>
<td style="text-align:center">20365443073</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">9713</td>
<td style="text-align:center">20369637377</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">9714</td>
<td style="text-align:center">20371734529</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">9720</td>
<td style="text-align:center">20384317441</td>
<td style="text-align:center">14</td>
</tr>
<tr>
<td style="text-align:center">9726</td>
<td style="text-align:center">20396900353</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">9738</td>
<td style="text-align:center">20422066177</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">9765</td>
<td style="text-align:center">20478689281</td>
<td style="text-align:center">11</td>
</tr>
<tr>
<td style="text-align:center">9776</td>
<td style="text-align:center">20501757953</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">9779</td>
<td style="text-align:center">20508049409</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">9783</td>
<td style="text-align:center">20516438017</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">9803</td>
<td style="text-align:center">20558381057</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">9809</td>
<td style="text-align:center">20570963969</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">9824</td>
<td style="text-align:center">20602421249</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">9825</td>
<td style="text-align:center">20604518401</td>
<td style="text-align:center">21</td>
</tr>
<tr>
<td style="text-align:center">9843</td>
<td style="text-align:center">20642267137</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">9854</td>
<td style="text-align:center">20665335809</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">9875</td>
<td style="text-align:center">20709376001</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">9899</td>
<td style="text-align:center">20759707649</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">9926</td>
<td style="text-align:center">20816330753</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">9951</td>
<td style="text-align:center">20868759553</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">9959</td>
<td style="text-align:center">20885536769</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">9965</td>
<td style="text-align:center">20898119681</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">9978</td>
<td style="text-align:center">20925382657</td>
<td style="text-align:center">15</td>
</tr>
<tr>
<td style="text-align:center">9998</td>
<td style="text-align:center">20967325697</td>
<td style="text-align:center">3</td>
</tr>
</tbody>
</table>
</div>
<h2 id="C-风格数组排版"><a href="#C-风格数组排版" class="headerlink" title="C 风格数组排版"></a>C 风格数组排版</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&#123;11,23068673,3&#125;,</span><br><span class="line">&#123;33,69206017,5&#125;,</span><br><span class="line">&#123;39,81788929,7&#125;,</span><br><span class="line">&#123;50,104857601,3&#125;,</span><br><span class="line">&#123;53,111149057,3&#125;,</span><br><span class="line">&#123;54,113246209,7&#125;,</span><br><span class="line">&#123;63,132120577,5&#125;,</span><br><span class="line">&#123;65,136314881,3&#125;,</span><br><span class="line">&#123;66,138412033,5&#125;,</span><br><span class="line">&#123;74,155189249,6&#125;,</span><br><span class="line">&#123;78,163577857,23&#125;,</span><br><span class="line">&#123;80,167772161,3&#125;,</span><br><span class="line">&#123;81,169869313,5&#125;,</span><br><span class="line">&#123;89,186646529,3&#125;,</span><br><span class="line">&#123;95,199229441,3&#125;,</span><br><span class="line">&#123;101,211812353,3&#125;,</span><br><span class="line">&#123;110,230686721,6&#125;,</span><br><span class="line">&#123;119,249561089,3&#125;,</span><br><span class="line">&#123;123,257949697,5&#125;,</span><br><span class="line">&#123;129,270532609,22&#125;,</span><br><span class="line">&#123;131,274726913,3&#125;,</span><br><span class="line">&#123;180,377487361,7&#125;,</span><br><span class="line">&#123;183,383778817,5&#125;,</span><br><span class="line">&#123;185,387973121,6&#125;,</span><br><span class="line">&#123;198,415236097,5&#125;,</span><br><span class="line">&#123;219,459276289,11&#125;,</span><br><span class="line">&#123;221,463470593,3&#125;,</span><br><span class="line">&#123;224,469762049,3&#125;,</span><br><span class="line">&#123;275,576716801,6&#125;,</span><br><span class="line">&#123;284,595591169,3&#125;,</span><br><span class="line">&#123;285,597688321,11&#125;,</span><br><span class="line">&#123;303,635437057,11&#125;,</span><br><span class="line">&#123;305,639631361,6&#125;,</span><br><span class="line">&#123;308,645922817,3&#125;,</span><br><span class="line">&#123;309,648019969,17&#125;,</span><br><span class="line">&#123;318,666894337,5&#125;,</span><br><span class="line">&#123;326,683671553,3&#125;,</span><br><span class="line">&#123;339,710934529,17&#125;,</span><br><span class="line">&#123;341,715128833,3&#125;,</span><br><span class="line">&#123;353,740294657,3&#125;,</span><br><span class="line">&#123;360,754974721,11&#125;,</span><br><span class="line">&#123;375,786432001,7&#125;,</span><br><span class="line">&#123;381,799014913,13&#125;,</span><br><span class="line">&#123;393,824180737,5&#125;,</span><br><span class="line">&#123;420,880803841,26&#125;,</span><br><span class="line">&#123;428,897581057,3&#125;,</span><br><span class="line">&#123;429,899678209,7&#125;,</span><br><span class="line">&#123;438,918552577,5&#125;,</span><br><span class="line">&#123;441,924844033,5&#125;,</span><br><span class="line">&#123;446,935329793,3&#125;,</span><br><span class="line">&#123;450,943718401,7&#125;,</span><br><span class="line">&#123;453,950009857,7&#125;,</span><br><span class="line">&#123;459,962592769,7&#125;,</span><br><span class="line">&#123;465,975175681,17&#125;,</span><br><span class="line">&#123;470,985661441,3&#125;,</span><br><span class="line">&#123;476,998244353,3&#125;,</span><br><span class="line">&#123;479,1004535809,3&#125;,</span><br><span class="line">&#123;483,1012924417,5&#125;,</span><br><span class="line">&#123;521,1092616193,3&#125;,</span><br><span class="line">&#123;528,1107296257,10&#125;,</span><br><span class="line">&#123;543,1138753537,5&#125;,</span><br><span class="line">&#123;549,1151336449,11&#125;,</span><br><span class="line">&#123;554,1161822209,3&#125;,</span><br><span class="line">&#123;575,1205862401,3&#125;,</span><br><span class="line">&#123;578,1212153857,3&#125;,</span><br><span class="line">&#123;579,1214251009,7&#125;,</span><br><span class="line">&#123;581,1218445313,3&#125;,</span><br><span class="line">&#123;584,1224736769,3&#125;,</span><br><span class="line">&#123;611,1281359873,3&#125;,</span><br><span class="line">&#123;620,1300234241,3&#125;,</span><br><span class="line">&#123;623,1306525697,3&#125;,</span><br><span class="line">&#123;630,1321205761,11&#125;,</span><br><span class="line">&#123;633,1327497217,5&#125;,</span><br><span class="line">&#123;651,1365245953,10&#125;,</span><br><span class="line">&#123;675,1415577601,17&#125;,</span><br><span class="line">&#123;686,1438646273,3&#125;,</span><br><span class="line">&#123;708,1484783617,5&#125;,</span><br><span class="line">&#123;735,1541406721,17&#125;,</span><br><span class="line">&#123;743,1558183937,3&#125;,</span><br><span class="line">&#123;749,1570766849,3&#125;,</span><br><span class="line">&#123;750,1572864001,13&#125;,</span><br><span class="line">&#123;789,1654652929,7&#125;,</span><br><span class="line">&#123;815,1709178881,3&#125;,</span><br><span class="line">&#123;816,1711276033,29&#125;,</span><br><span class="line">&#123;854,1790967809,13&#125;,</span><br><span class="line">&#123;864,1811939329,13&#125;,</span><br><span class="line">&#123;875,1835008001,6&#125;,</span><br><span class="line">&#123;890,1866465281,3&#125;,</span><br><span class="line">&#123;891,1868562433,7&#125;,</span><br><span class="line">&#123;903,1893728257,5&#125;,</span><br><span class="line">&#123;921,1931476993,5&#125;,</span><br><span class="line">&#123;953,1998585857,3&#125;,</span><br><span class="line">&#123;960,2013265921,31&#125;,</span><br><span class="line">&#123;966,2025848833,10&#125;,</span><br><span class="line">&#123;996,2088763393,5&#125;,</span><br><span class="line">&#123;999,2095054849,11&#125;,</span><br><span class="line">&#123;1001,2099249153,3&#125;,</span><br><span class="line">&#123;1008,2113929217,5&#125;,</span><br><span class="line">&#123;1016,2130706433,3&#125;,</span><br><span class="line">&#123;1026,2151677953,7&#125;,</span><br><span class="line">&#123;1034,2168455169,6&#125;,</span><br><span class="line">&#123;1041,2183135233,5&#125;,</span><br><span class="line">&#123;1043,2187329537,3&#125;,</span><br><span class="line">&#123;1053,2208301057,5&#125;,</span><br><span class="line">&#123;1055,2212495361,3&#125;,</span><br><span class="line">&#123;1059,2220883969,7&#125;,</span><br><span class="line">&#123;1065,2233466881,11&#125;,</span><br><span class="line">&#123;1073,2250244097,3&#125;,</span><br><span class="line">&#123;1088,2281701377,3&#125;,</span><br><span class="line">&#123;1095,2296381441,11&#125;,</span><br><span class="line">&#123;1103,2313158657,3&#125;,</span><br><span class="line">&#123;1106,2319450113,3&#125;,</span><br><span class="line">&#123;1118,2344615937,3&#125;,</span><br><span class="line">&#123;1130,2369781761,3&#125;,</span><br><span class="line">&#123;1146,2403336193,5&#125;,</span><br><span class="line">&#123;1169,2451570689,3&#125;,</span><br><span class="line">&#123;1178,2470445057,3&#125;,</span><br><span class="line">&#123;1179,2472542209,17&#125;,</span><br><span class="line">&#123;1184,2483027969,3&#125;,</span><br><span class="line">&#123;1208,2533359617,3&#125;,</span><br><span class="line">&#123;1220,2558525441,3&#125;,</span><br><span class="line">&#123;1254,2629828609,13&#125;,</span><br><span class="line">&#123;1256,2634022913,3&#125;,</span><br><span class="line">&#123;1274,2671771649,3&#125;,</span><br><span class="line">&#123;1275,2673868801,22&#125;,</span><br><span class="line">&#123;1278,2680160257,7&#125;,</span><br><span class="line">&#123;1290,2705326081,11&#125;,</span><br><span class="line">&#123;1296,2717908993,5&#125;,</span><br><span class="line">&#123;1298,2722103297,3&#125;,</span><br><span class="line">&#123;1310,2747269121,6&#125;,</span><br><span class="line">&#123;1319,2766143489,3&#125;,</span><br><span class="line">&#123;1326,2780823553,10&#125;,</span><br><span class="line">&#123;1338,2805989377,15&#125;,</span><br><span class="line">&#123;1340,2810183681,11&#125;,</span><br><span class="line">&#123;1361,2854223873,3&#125;,</span><br><span class="line">&#123;1368,2868903937,35&#125;,</span><br><span class="line">&#123;1376,2885681153,3&#125;,</span><br><span class="line">&#123;1388,2910846977,3&#125;,</span><br><span class="line">&#123;1389,2912944129,11&#125;,</span><br><span class="line">&#123;1395,2925527041,7&#125;,</span><br><span class="line">&#123;1415,2967470081,6&#125;,</span><br><span class="line">&#123;1421,2980052993,3&#125;,</span><br><span class="line">&#123;1428,2994733057,10&#125;,</span><br><span class="line">&#123;1430,2998927361,3&#125;,</span><br><span class="line">&#123;1431,3001024513,5&#125;,</span><br><span class="line">&#123;1433,3005218817,3&#125;,</span><br><span class="line">&#123;1466,3074424833,3&#125;,</span><br><span class="line">&#123;1484,3112173569,3&#125;,</span><br><span class="line">&#123;1485,3114270721,17&#125;,</span><br><span class="line">&#123;1509,3164602369,7&#125;,</span><br><span class="line">&#123;1514,3175088129,3&#125;,</span><br><span class="line">&#123;1515,3177185281,11&#125;,</span><br><span class="line">&#123;1530,3208642561,13&#125;,</span><br><span class="line">&#123;1533,3214934017,17&#125;,</span><br><span class="line">&#123;1536,3221225473,5&#125;,</span><br><span class="line">&#123;1544,3238002689,3&#125;,</span><br><span class="line">&#123;1551,3252682753,7&#125;,</span><br><span class="line">&#123;1563,3277848577,7&#125;,</span><br><span class="line">&#123;1580,3313500161,6&#125;,</span><br><span class="line">&#123;1593,3340763137,7&#125;,</span><br><span class="line">&#123;1601,3357540353,3&#125;,</span><br><span class="line">&#123;1625,3407872001,6&#125;,</span><br><span class="line">&#123;1628,3414163457,3&#125;,</span><br><span class="line">&#123;1629,3416260609,7&#125;,</span><br><span class="line">&#123;1638,3435134977,10&#125;,</span><br><span class="line">&#123;1646,3451912193,3&#125;,</span><br><span class="line">&#123;1653,3466592257,5&#125;,</span><br><span class="line">&#123;1659,3479175169,11&#125;,</span><br><span class="line">&#123;1661,3483369473,3&#125;,</span><br><span class="line">&#123;1664,3489660929,3&#125;,</span><br><span class="line">&#123;1673,3508535297,3&#125;,</span><br><span class="line">&#123;1674,3510632449,41&#125;,</span><br><span class="line">&#123;1694,3552575489,3&#125;,</span><br><span class="line">&#123;1706,3577741313,3&#125;,</span><br><span class="line">&#123;1715,3596615681,3&#125;,</span><br><span class="line">&#123;1718,3602907137,3&#125;,</span><br><span class="line">&#123;1724,3615490049,3&#125;,</span><br><span class="line">&#123;1730,3628072961,3&#125;,</span><br><span class="line">&#123;1733,3634364417,3&#125;,</span><br><span class="line">&#123;1748,3665821697,3&#125;,</span><br><span class="line">&#123;1758,3686793217,5&#125;,</span><br><span class="line">&#123;1775,3722444801,3&#125;,</span><br><span class="line">&#123;1779,3730833409,19&#125;,</span><br><span class="line">&#123;1788,3749707777,5&#125;,</span><br><span class="line">&#123;1821,3818913793,5&#125;,</span><br><span class="line">&#123;1830,3837788161,31&#125;,</span><br><span class="line">&#123;1856,3892314113,3&#125;,</span><br><span class="line">&#123;1859,3898605569,6&#125;,</span><br><span class="line">&#123;1871,3923771393,3&#125;,</span><br><span class="line">&#123;1878,3938451457,10&#125;,</span><br><span class="line">&#123;1880,3942645761,3&#125;,</span><br><span class="line">&#123;1914,4013948929,19&#125;,</span><br><span class="line">&#123;1944,4076863489,7&#125;,</span><br><span class="line">&#123;1958,4106223617,3&#125;,</span><br><span class="line">&#123;1961,4112515073,3&#125;,</span><br><span class="line">&#123;1995,4183818241,13&#125;,</span><br><span class="line">&#123;2000,4194304001,3&#125;,</span><br><span class="line">&#123;2009,4213178369,3&#125;,</span><br><span class="line">&#123;2013,4221566977,5&#125;,</span><br><span class="line">&#123;2028,4253024257,5&#125;,</span><br><span class="line">&#123;2039,4276092929,3&#125;,</span><br><span class="line">&#123;2058,4315938817,5&#125;,</span><br><span class="line">&#123;2075,4351590401,3&#125;,</span><br><span class="line">&#123;2096,4395630593,3&#125;,</span><br><span class="line">&#123;2103,4410310657,10&#125;,</span><br><span class="line">&#123;2129,4464836609,3&#125;,</span><br><span class="line">&#123;2138,4483710977,3&#125;,</span><br><span class="line">&#123;2174,4559208449,3&#125;,</span><br><span class="line">&#123;2178,4567597057,10&#125;,</span><br><span class="line">&#123;2186,4584374273,3&#125;,</span><br><span class="line">&#123;2208,4630511617,5&#125;,</span><br><span class="line">&#123;2214,4643094529,11&#125;,</span><br><span class="line">&#123;2226,4668260353,10&#125;,</span><br><span class="line">&#123;2235,4687134721,14&#125;,</span><br><span class="line">&#123;2243,4703911937,3&#125;,</span><br><span class="line">&#123;2283,4787798017,11&#125;,</span><br><span class="line">&#123;2291,4804575233,3&#125;,</span><br><span class="line">&#123;2310,4844421121,13&#125;,</span><br><span class="line">&#123;2318,4861198337,3&#125;,</span><br><span class="line">&#123;2328,4882169857,5&#125;,</span><br><span class="line">&#123;2331,4888461313,5&#125;,</span><br><span class="line">&#123;2333,4892655617,3&#125;,</span><br><span class="line">&#123;2339,4905238529,3&#125;,</span><br><span class="line">&#123;2349,4926210049,7&#125;,</span><br><span class="line">&#123;2369,4968153089,6&#125;,</span><br><span class="line">&#123;2375,4980736001,3&#125;,</span><br><span class="line">&#123;2385,5001707521,14&#125;,</span><br><span class="line">&#123;2394,5020581889,13&#125;,</span><br><span class="line">&#123;2399,5031067649,3&#125;,</span><br><span class="line">&#123;2405,5043650561,3&#125;,</span><br><span class="line">&#123;2411,5056233473,3&#125;,</span><br><span class="line">&#123;2415,5064622081,37&#125;,</span><br><span class="line">&#123;2450,5138022401,3&#125;,</span><br><span class="line">&#123;2460,5158993921,31&#125;,</span><br><span class="line">&#123;2466,5171576833,5&#125;,</span><br><span class="line">&#123;2468,5175771137,3&#125;,</span><br><span class="line">&#123;2481,5203034113,5&#125;,</span><br><span class="line">&#123;2499,5240782849,41&#125;,</span><br><span class="line">&#123;2504,5251268609,3&#125;,</span><br><span class="line">&#123;2531,5307891713,3&#125;,</span><br><span class="line">&#123;2543,5333057537,3&#125;,</span><br><span class="line">&#123;2550,5347737601,7&#125;,</span><br><span class="line">&#123;2558,5364514817,3&#125;,</span><br><span class="line">&#123;2565,5379194881,13&#125;,</span><br><span class="line">&#123;2571,5391777793,5&#125;,</span><br><span class="line">&#123;2594,5440012289,3&#125;,</span><br><span class="line">&#123;2606,5465178113,3&#125;,</span><br><span class="line">&#123;2609,5471469569,3&#125;,</span><br><span class="line">&#123;2621,5496635393,3&#125;,</span><br><span class="line">&#123;2625,5505024001,23&#125;,</span><br><span class="line">&#123;2630,5515509761,3&#125;,</span><br><span class="line">&#123;2636,5528092673,3&#125;,</span><br><span class="line">&#123;2640,5536481281,19&#125;,</span><br><span class="line">&#123;2649,5555355649,11&#125;,</span><br><span class="line">&#123;2658,5574230017,14&#125;,</span><br><span class="line">&#123;2660,5578424321,3&#125;,</span><br><span class="line">&#123;2663,5584715777,3&#125;,</span><br><span class="line">&#123;2669,5597298689,3&#125;,</span><br><span class="line">&#123;2684,5628755969,3&#125;,</span><br><span class="line">&#123;2690,5641338881,3&#125;,</span><br><span class="line">&#123;2703,5668601857,11&#125;,</span><br><span class="line">&#123;2723,5710544897,3&#125;,</span><br><span class="line">&#123;2741,5748293633,3&#125;,</span><br><span class="line">&#123;2754,5775556609,38&#125;,</span><br><span class="line">&#123;2759,5786042369,6&#125;,</span><br><span class="line">&#123;2760,5788139521,11&#125;,</span><br><span class="line">&#123;2765,5798625281,3&#125;,</span><br><span class="line">&#123;2784,5838471169,7&#125;,</span><br><span class="line">&#123;2840,5955911681,3&#125;,</span><br><span class="line">&#123;2868,6014631937,7&#125;,</span><br><span class="line">&#123;2870,6018826241,15&#125;,</span><br><span class="line">&#123;2889,6058672129,17&#125;,</span><br><span class="line">&#123;2903,6088032257,3&#125;,</span><br><span class="line">&#123;2913,6109003777,11&#125;,</span><br><span class="line">&#123;2940,6165626881,13&#125;,</span><br><span class="line">&#123;2945,6176112641,3&#125;,</span><br><span class="line">&#123;2948,6182404097,3&#125;,</span><br><span class="line">&#123;2951,6188695553,3&#125;,</span><br><span class="line">&#123;2954,6194987009,3&#125;,</span><br><span class="line">&#123;2955,6197084161,17&#125;,</span><br><span class="line">&#123;2958,6203375617,5&#125;,</span><br><span class="line">&#123;2963,6213861377,3&#125;,</span><br><span class="line">&#123;2973,6234832897,5&#125;,</span><br><span class="line">&#123;2978,6245318657,3&#125;,</span><br><span class="line">&#123;2979,6247415809,7&#125;,</span><br><span class="line">&#123;3020,6333399041,3&#125;,</span><br><span class="line">&#123;3026,6345981953,3&#125;,</span><br><span class="line">&#123;3068,6434062337,3&#125;,</span><br><span class="line">&#123;3078,6455033857,7&#125;,</span><br><span class="line">&#123;3083,6465519617,3&#125;,</span><br><span class="line">&#123;3105,6511656961,7&#125;,</span><br><span class="line">&#123;3116,6534725633,3&#125;,</span><br><span class="line">&#123;3131,6566182913,3&#125;,</span><br><span class="line">&#123;3143,6591348737,3&#125;,</span><br><span class="line">&#123;3144,6593445889,17&#125;,</span><br><span class="line">&#123;3153,6612320257,5&#125;,</span><br><span class="line">&#123;3155,6616514561,3&#125;,</span><br><span class="line">&#123;3165,6637486081,19&#125;,</span><br><span class="line">&#123;3176,6660554753,3&#125;,</span><br><span class="line">&#123;3179,6666846209,6&#125;,</span><br><span class="line">&#123;3185,6679429121,6&#125;,</span><br><span class="line">&#123;3189,6687817729,7&#125;,</span><br><span class="line">&#123;3201,6712983553,5&#125;,</span><br><span class="line">&#123;3204,6719275009,7&#125;,</span><br><span class="line">&#123;3213,6738149377,5&#125;,</span><br><span class="line">&#123;3215,6742343681,3&#125;,</span><br><span class="line">&#123;3243,6801063937,5&#125;,</span><br><span class="line">&#123;3245,6805258241,7&#125;,</span><br><span class="line">&#123;3246,6807355393,5&#125;,</span><br><span class="line">&#123;3248,6811549697,5&#125;,</span><br><span class="line">&#123;3251,6817841153,3&#125;,</span><br><span class="line">&#123;3278,6874464257,3&#125;,</span><br><span class="line">&#123;3293,6905921537,3&#125;,</span><br><span class="line">&#123;3299,6918504449,3&#125;,</span><br><span class="line">&#123;3315,6952058881,23&#125;,</span><br><span class="line">&#123;3336,6996099073,10&#125;,</span><br><span class="line">&#123;3339,7002390529,19&#125;,</span><br><span class="line">&#123;3365,7056916481,3&#125;,</span><br><span class="line">&#123;3368,7063207937,3&#125;,</span><br><span class="line">&#123;3374,7075790849,3&#125;,</span><br><span class="line">&#123;3378,7084179457,5&#125;,</span><br><span class="line">&#123;3384,7096762369,13&#125;,</span><br><span class="line">&#123;3386,7100956673,3&#125;,</span><br><span class="line">&#123;3461,7258243073,3&#125;,</span><br><span class="line">&#123;3483,7304380417,10&#125;,</span><br><span class="line">&#123;3504,7348420609,11&#125;,</span><br><span class="line">&#123;3509,7358906369,3&#125;,</span><br><span class="line">&#123;3510,7361003521,29&#125;,</span><br><span class="line">&#123;3531,7405043713,5&#125;,</span><br><span class="line">&#123;3539,7421820929,3&#125;,</span><br><span class="line">&#123;3543,7430209537,10&#125;,</span><br><span class="line">&#123;3551,7446986753,3&#125;,</span><br><span class="line">&#123;3561,7467958273,5&#125;,</span><br><span class="line">&#123;3564,7474249729,13&#125;,</span><br><span class="line">&#123;3599,7547650049,3&#125;,</span><br><span class="line">&#123;3605,7560232961,6&#125;,</span><br><span class="line">&#123;3608,7566524417,3&#125;,</span><br><span class="line">&#123;3633,7618953217,5&#125;,</span><br><span class="line">&#123;3651,7656701953,5&#125;,</span><br><span class="line">&#123;3680,7717519361,3&#125;,</span><br><span class="line">&#123;3708,7776239617,5&#125;,</span><br><span class="line">&#123;3713,7786725377,3&#125;,</span><br><span class="line">&#123;3719,7799308289,3&#125;,</span><br><span class="line">&#123;3725,7811891201,3&#125;,</span><br><span class="line">&#123;3726,7813988353,5&#125;,</span><br><span class="line">&#123;3728,7818182657,3&#125;,</span><br><span class="line">&#123;3740,7843348481,7&#125;,</span><br><span class="line">&#123;3741,7845445633,5&#125;,</span><br><span class="line">&#123;3743,7849639937,5&#125;,</span><br><span class="line">&#123;3746,7855931393,3&#125;,</span><br><span class="line">&#123;3755,7874805761,3&#125;,</span><br><span class="line">&#123;3759,7883194369,11&#125;,</span><br><span class="line">&#123;3771,7908360193,5&#125;,</span><br><span class="line">&#123;3776,7918845953,3&#125;,</span><br><span class="line">&#123;3804,7977566209,11&#125;,</span><br><span class="line">&#123;3830,8032092161,3&#125;,</span><br><span class="line">&#123;3836,8044675073,3&#125;,</span><br><span class="line">&#123;3846,8065646593,10&#125;,</span><br><span class="line">&#123;3854,8082423809,3&#125;,</span><br><span class="line">&#123;3894,8166309889,14&#125;,</span><br><span class="line">&#123;3896,8170504193,3&#125;,</span><br><span class="line">&#123;3920,8220835841,3&#125;,</span><br><span class="line">&#123;3923,8227127297,3&#125;,</span><br><span class="line">&#123;3929,8239710209,3&#125;,</span><br><span class="line">&#123;3930,8241807361,11&#125;,</span><br><span class="line">&#123;3935,8252293121,3&#125;,</span><br><span class="line">&#123;3948,8279556097,5&#125;,</span><br><span class="line">&#123;3950,8283750401,6&#125;,</span><br><span class="line">&#123;3960,8304721921,7&#125;,</span><br><span class="line">&#123;3966,8317304833,5&#125;,</span><br><span class="line">&#123;3969,8323596289,13&#125;,</span><br><span class="line">&#123;3974,8334082049,3&#125;,</span><br><span class="line">&#123;3995,8378122241,3&#125;,</span><br><span class="line">&#123;3999,8386510849,7&#125;,</span><br><span class="line">&#123;4013,8415870977,3&#125;,</span><br><span class="line">&#123;4028,8447328257,3&#125;,</span><br><span class="line">&#123;4041,8474591233,10&#125;,</span><br><span class="line">&#123;4044,8480882689,7&#125;,</span><br><span class="line">&#123;4049,8491368449,3&#125;,</span><br><span class="line">&#123;4068,8531214337,10&#125;,</span><br><span class="line">&#123;4071,8537505793,5&#125;,</span><br><span class="line">&#123;4103,8604614657,3&#125;,</span><br><span class="line">&#123;4118,8636071937,3&#125;,</span><br><span class="line">&#123;4124,8648654849,3&#125;,</span><br><span class="line">&#123;4133,8667529217,3&#125;,</span><br><span class="line">&#123;4134,8669626369,7&#125;,</span><br><span class="line">&#123;4145,8692695041,6&#125;,</span><br><span class="line">&#123;4151,8705277953,6&#125;,</span><br><span class="line">&#123;4154,8711569409,3&#125;,</span><br><span class="line">&#123;4155,8713666561,13&#125;,</span><br><span class="line">&#123;4175,8755609601,11&#125;,</span><br><span class="line">&#123;4203,8814329857,5&#125;,</span><br><span class="line">&#123;4214,8837398529,3&#125;,</span><br><span class="line">&#123;4223,8856272897,3&#125;,</span><br><span class="line">&#123;4224,8858370049,23&#125;,</span><br><span class="line">&#123;4235,8881438721,15&#125;,</span><br><span class="line">&#123;4239,8889827329,17&#125;,</span><br><span class="line">&#123;4250,8912896001,3&#125;,</span><br><span class="line">&#123;4254,8921284609,14&#125;,</span><br><span class="line">&#123;4265,8944353281,3&#125;,</span><br><span class="line">&#123;4286,8988393473,3&#125;,</span><br><span class="line">&#123;4289,8994684929,3&#125;,</span><br><span class="line">&#123;4296,9009364993,5&#125;,</span><br><span class="line">&#123;4313,9045016577,3&#125;,</span><br><span class="line">&#123;4319,9057599489,3&#125;,</span><br><span class="line">&#123;4335,9091153921,7&#125;,</span><br><span class="line">&#123;4349,9120514049,3&#125;,</span><br><span class="line">&#123;4376,9177137153,3&#125;,</span><br><span class="line">&#123;4379,9183428609,3&#125;,</span><br><span class="line">&#123;4385,9196011521,3&#125;,</span><br><span class="line">&#123;4400,9227468801,3&#125;,</span><br><span class="line">&#123;4406,9240051713,3&#125;,</span><br><span class="line">&#123;4413,9254731777,15&#125;,</span><br><span class="line">&#123;4421,9271508993,3&#125;,</span><br><span class="line">&#123;4424,9277800449,3&#125;,</span><br><span class="line">&#123;4443,9317646337,5&#125;,</span><br><span class="line">&#123;4466,9365880833,5&#125;,</span><br><span class="line">&#123;4478,9391046657,3&#125;,</span><br><span class="line">&#123;4499,9435086849,3&#125;,</span><br><span class="line">&#123;4511,9460252673,3&#125;,</span><br><span class="line">&#123;4518,9474932737,5&#125;,</span><br><span class="line">&#123;4533,9506390017,5&#125;,</span><br><span class="line">&#123;4536,9512681473,15&#125;,</span><br><span class="line">&#123;4544,9529458689,3&#125;,</span><br><span class="line">&#123;4545,9531555841,7&#125;,</span><br><span class="line">&#123;4551,9544138753,10&#125;,</span><br><span class="line">&#123;4578,9600761857,5&#125;,</span><br><span class="line">&#123;4580,9604956161,3&#125;,</span><br><span class="line">&#123;4583,9611247617,3&#125;,</span><br><span class="line">&#123;4593,9632219137,10&#125;,</span><br><span class="line">&#123;4595,9636413441,11&#125;,</span><br><span class="line">&#123;4601,9648996353,3&#125;,</span><br><span class="line">&#123;4610,9667870721,3&#125;,</span><br><span class="line">&#123;4629,9707716609,7&#125;,</span><br><span class="line">&#123;4655,9762242561,3&#125;,</span><br><span class="line">&#123;4670,9793699841,3&#125;,</span><br><span class="line">&#123;4671,9795796993,5&#125;,</span><br><span class="line">&#123;4673,9799991297,3&#125;,</span><br><span class="line">&#123;4704,9865003009,19&#125;,</span><br><span class="line">&#123;4716,9890168833,10&#125;,</span><br><span class="line">&#123;4733,9925820417,3&#125;,</span><br><span class="line">&#123;4770,10003415041,23&#125;,</span><br><span class="line">&#123;4775,10013900801,3&#125;,</span><br><span class="line">&#123;4788,10041163777,10&#125;,</span><br><span class="line">&#123;4791,10047455233,5&#125;,</span><br><span class="line">&#123;4793,10051649537,3&#125;,</span><br><span class="line">&#123;4811,10089398273,3&#125;,</span><br><span class="line">&#123;4839,10148118529,11&#125;,</span><br><span class="line">&#123;4853,10177478657,3&#125;,</span><br><span class="line">&#123;4865,10202644481,6&#125;,</span><br><span class="line">&#123;4868,10208935937,3&#125;,</span><br><span class="line">&#123;4883,10240393217,3&#125;,</span><br><span class="line">&#123;4886,10246684673,3&#125;,</span><br><span class="line">&#123;4896,10267656193,5&#125;,</span><br><span class="line">&#123;4923,10324279297,5&#125;,</span><br><span class="line">&#123;4925,10328473601,3&#125;,</span><br><span class="line">&#123;4953,10387193857,5&#125;,</span><br><span class="line">&#123;4964,10410262529,3&#125;,</span><br><span class="line">&#123;4970,10422845441,3&#125;,</span><br><span class="line">&#123;4979,10441719809,3&#125;,</span><br><span class="line">&#123;4991,10466885633,3&#125;,</span><br><span class="line">&#123;4994,10473177089,12&#125;,</span><br><span class="line">&#123;4998,10481565697,10&#125;,</span><br><span class="line">&#123;5000,10485760001,3&#125;,</span><br><span class="line">&#123;5013,10513022977,5&#125;,</span><br><span class="line">&#123;5030,10548674561,3&#125;,</span><br><span class="line">&#123;5051,10592714753,3&#125;,</span><br><span class="line">&#123;5064,10619977729,29&#125;,</span><br><span class="line">&#123;5066,10624172033,3&#125;,</span><br><span class="line">&#123;5073,10638852097,5&#125;,</span><br><span class="line">&#123;5078,10649337857,3&#125;,</span><br><span class="line">&#123;5084,10661920769,3&#125;,</span><br><span class="line">&#123;5090,10674503681,3&#125;,</span><br><span class="line">&#123;5124,10745806849,19&#125;,</span><br><span class="line">&#123;5138,10775166977,3&#125;,</span><br><span class="line">&#123;5139,10777264129,13&#125;,</span><br><span class="line">&#123;5154,10808721409,7&#125;,</span><br><span class="line">&#123;5169,10840178689,11&#125;,</span><br><span class="line">&#123;5171,10844372993,3&#125;,</span><br><span class="line">&#123;5174,10850664449,3&#125;,</span><br><span class="line">&#123;5181,10865344513,10&#125;,</span><br><span class="line">&#123;5184,10871635969,7&#125;,</span><br><span class="line">&#123;5198,10900996097,3&#125;,</span><br><span class="line">&#123;5225,10957619201,3&#125;,</span><br><span class="line">&#123;5238,10984882177,5&#125;,</span><br><span class="line">&#123;5240,10989076481,3&#125;,</span><br><span class="line">&#123;5255,11020533761,3&#125;,</span><br><span class="line">&#123;5258,11026825217,3&#125;,</span><br><span class="line">&#123;5261,11033116673,3&#125;,</span><br><span class="line">&#123;5276,11064573953,3&#125;,</span><br><span class="line">&#123;5286,11085545473,5&#125;,</span><br><span class="line">&#123;5301,11117002753,5&#125;,</span><br><span class="line">&#123;5303,11121197057,3&#125;,</span><br><span class="line">&#123;5304,11123294209,7&#125;,</span><br><span class="line">&#123;5306,11127488513,3&#125;,</span><br><span class="line">&#123;5310,11135877121,11&#125;,</span><br><span class="line">&#123;5321,11158945793,3&#125;,</span><br><span class="line">&#123;5328,11173625857,5&#125;,</span><br><span class="line">&#123;5358,11236540417,10&#125;,</span><br><span class="line">&#123;5399,11322523649,3&#125;,</span><br><span class="line">&#123;5408,11341398017,3&#125;,</span><br><span class="line">&#123;5414,11353980929,3&#125;,</span><br><span class="line">&#123;5423,11372855297,6&#125;,</span><br><span class="line">&#123;5433,11393826817,10&#125;,</span><br><span class="line">&#123;5435,11398021121,3&#125;,</span><br><span class="line">&#123;5444,11416895489,3&#125;,</span><br><span class="line">&#123;5451,11431575553,5&#125;,</span><br><span class="line">&#123;5463,11456741377,5&#125;,</span><br><span class="line">&#123;5475,11481907201,13&#125;,</span><br><span class="line">&#123;5481,11494490113,5&#125;,</span><br><span class="line">&#123;5493,11519655937,5&#125;,</span><br><span class="line">&#123;5499,11532238849,7&#125;,</span><br><span class="line">&#123;5510,11555307521,6&#125;,</span><br><span class="line">&#123;5511,11557404673,5&#125;,</span><br><span class="line">&#123;5525,11586764801,3&#125;,</span><br><span class="line">&#123;5540,11618222081,3&#125;,</span><br><span class="line">&#123;5561,11662262273,3&#125;,</span><br><span class="line">&#123;5573,11687428097,3&#125;,</span><br><span class="line">&#123;5576,11693719553,3&#125;,</span><br><span class="line">&#123;5579,11700011009,3&#125;,</span><br><span class="line">&#123;5586,11714691073,5&#125;,</span><br><span class="line">&#123;5588,11718885377,3&#125;,</span><br><span class="line">&#123;5603,11750342657,3&#125;,</span><br><span class="line">&#123;5609,11762925569,3&#125;,</span><br><span class="line">&#123;5618,11781799937,3&#125;,</span><br><span class="line">&#123;5628,11802771457,10&#125;,</span><br><span class="line">&#123;5649,11846811649,22&#125;,</span><br><span class="line">&#123;5658,11865686017,5&#125;,</span><br><span class="line">&#123;5691,11934892033,5&#125;,</span><br><span class="line">&#123;5705,11964252161,3&#125;,</span><br><span class="line">&#123;5724,12004098049,7&#125;,</span><br><span class="line">&#123;5729,12014583809,3&#125;,</span><br><span class="line">&#123;5741,12039749633,3&#125;,</span><br><span class="line">&#123;5754,12067012609,13&#125;,</span><br><span class="line">&#123;5765,12090081281,3&#125;,</span><br><span class="line">&#123;5775,12111052801,17&#125;,</span><br><span class="line">&#123;5784,12129927169,14&#125;,</span><br><span class="line">&#123;5825,12215910401,3&#125;,</span><br><span class="line">&#123;5831,12228493313,5&#125;,</span><br><span class="line">&#123;5834,12234784769,3&#125;,</span><br><span class="line">&#123;5864,12297699329,3&#125;,</span><br><span class="line">&#123;5870,12310282241,3&#125;,</span><br><span class="line">&#123;5873,12316573697,6&#125;,</span><br><span class="line">&#123;5876,12322865153,3&#125;,</span><br><span class="line">&#123;5888,12348030977,5&#125;,</span><br><span class="line">&#123;5895,12362711041,19&#125;,</span><br><span class="line">&#123;5906,12385779713,3&#125;,</span><br><span class="line">&#123;5913,12400459777,5&#125;,</span><br><span class="line">&#123;5940,12457082881,7&#125;,</span><br><span class="line">&#123;5943,12463374337,5&#125;,</span><br><span class="line">&#123;5951,12480151553,3&#125;,</span><br><span class="line">&#123;5975,12530483201,7&#125;,</span><br><span class="line">&#123;5988,12557746177,5&#125;,</span><br><span class="line">&#123;5999,12580814849,3&#125;,</span><br><span class="line">&#123;6041,12668895233,3&#125;,</span><br><span class="line">&#123;6053,12694061057,3&#125;,</span><br><span class="line">&#123;6071,12731809793,3&#125;,</span><br><span class="line">&#123;6084,12759072769,19&#125;,</span><br><span class="line">&#123;6086,12763267073,3&#125;,</span><br><span class="line">&#123;6090,12771655681,23&#125;,</span><br><span class="line">&#123;6098,12788432897,3&#125;,</span><br><span class="line">&#123;6104,12801015809,3&#125;,</span><br><span class="line">&#123;6111,12815695873,15&#125;,</span><br><span class="line">&#123;6135,12866027521,17&#125;,</span><br><span class="line">&#123;6161,12920553473,3&#125;,</span><br><span class="line">&#123;6164,12926844929,3&#125;,</span><br><span class="line">&#123;6188,12977176577,3&#125;,</span><br><span class="line">&#123;6203,13008633857,3&#125;,</span><br><span class="line">&#123;6213,13029605377,7&#125;,</span><br><span class="line">&#123;6225,13054771201,7&#125;,</span><br><span class="line">&#123;6251,13109297153,3&#125;,</span><br><span class="line">&#123;6260,13128171521,6&#125;,</span><br><span class="line">&#123;6263,13134462977,3&#125;,</span><br><span class="line">&#123;6276,13161725953,5&#125;,</span><br><span class="line">&#123;6288,13186891777,5&#125;,</span><br><span class="line">&#123;6303,13218349057,15&#125;,</span><br><span class="line">&#123;6305,13222543361,3&#125;,</span><br><span class="line">&#123;6309,13230931969,7&#125;,</span><br><span class="line">&#123;6324,13262389249,11&#125;,</span><br><span class="line">&#123;6338,13291749377,3&#125;,</span><br><span class="line">&#123;6371,13360955393,3&#125;,</span><br><span class="line">&#123;6380,13379829761,3&#125;,</span><br><span class="line">&#123;6381,13381926913,5&#125;,</span><br><span class="line">&#123;6386,13392412673,3&#125;,</span><br><span class="line">&#123;6389,13398704129,3&#125;,</span><br><span class="line">&#123;6413,13449035777,3&#125;,</span><br><span class="line">&#123;6423,13470007297,5&#125;,</span><br><span class="line">&#123;6431,13486784513,3&#125;,</span><br><span class="line">&#123;6444,13514047489,7&#125;,</span><br><span class="line">&#123;6464,13555990529,3&#125;,</span><br><span class="line">&#123;6465,13558087681,7&#125;,</span><br><span class="line">&#123;6485,13600030721,3&#125;,</span><br><span class="line">&#123;6491,13612613633,3&#125;,</span><br><span class="line">&#123;6515,13662945281,6&#125;,</span><br><span class="line">&#123;6519,13671333889,13&#125;,</span><br><span class="line">&#123;6521,13675528193,3&#125;,</span><br><span class="line">&#123;6540,13715374081,7&#125;,</span><br><span class="line">&#123;6545,13725859841,6&#125;,</span><br><span class="line">&#123;6555,13746831361,29&#125;,</span><br><span class="line">&#123;6560,13757317121,3&#125;,</span><br><span class="line">&#123;6606,13853786113,10&#125;,</span><br><span class="line">&#123;6608,13857980417,3&#125;,</span><br><span class="line">&#123;6611,13864271873,5&#125;,</span><br><span class="line">&#123;6633,13910409217,10&#125;,</span><br><span class="line">&#123;6636,13916700673,5&#125;,</span><br><span class="line">&#123;6644,13933477889,3&#125;,</span><br><span class="line">&#123;6659,13964935169,3&#125;,</span><br><span class="line">&#123;6669,13985906689,7&#125;,</span><br><span class="line">&#123;6678,14004781057,5&#125;,</span><br><span class="line">&#123;6683,14015266817,3&#125;,</span><br><span class="line">&#123;6689,14027849729,3&#125;,</span><br><span class="line">&#123;6696,14042529793,5&#125;,</span><br><span class="line">&#123;6720,14092861441,19&#125;,</span><br><span class="line">&#123;6728,14109638657,3&#125;,</span><br><span class="line">&#123;6729,14111735809,7&#125;,</span><br><span class="line">&#123;6735,14124318721,13&#125;,</span><br><span class="line">&#123;6743,14141095937,3&#125;,</span><br><span class="line">&#123;6750,14155776001,21&#125;,</span><br><span class="line">&#123;6755,14166261761,6&#125;,</span><br><span class="line">&#123;6756,14168358913,5&#125;,</span><br><span class="line">&#123;6813,14287896577,5&#125;,</span><br><span class="line">&#123;6815,14292090881,3&#125;,</span><br><span class="line">&#123;6821,14304673793,3&#125;,</span><br><span class="line">&#123;6848,14361296897,3&#125;,</span><br><span class="line">&#123;6854,14373879809,6&#125;,</span><br><span class="line">&#123;6855,14375976961,7&#125;,</span><br><span class="line">&#123;6863,14392754177,3&#125;,</span><br><span class="line">&#123;6870,14407434241,13&#125;,</span><br><span class="line">&#123;6900,14470348801,14&#125;,</span><br><span class="line">&#123;6903,14476640257,5&#125;,</span><br><span class="line">&#123;6918,14508097537,5&#125;,</span><br><span class="line">&#123;6956,14587789313,3&#125;,</span><br><span class="line">&#123;6969,14615052289,13&#125;,</span><br><span class="line">&#123;6974,14625538049,3&#125;,</span><br><span class="line">&#123;6989,14656995329,3&#125;,</span><br><span class="line">&#123;6995,14669578241,3&#125;,</span><br><span class="line">&#123;7049,14782824449,3&#125;,</span><br><span class="line">&#123;7050,14784921601,13&#125;,</span><br><span class="line">&#123;7061,14807990273,3&#125;,</span><br><span class="line">&#123;7068,14822670337,10&#125;,</span><br><span class="line">&#123;7071,14828961793,5&#125;,</span><br><span class="line">&#123;7073,14833156097,3&#125;,</span><br><span class="line">&#123;7079,14845739009,3&#125;,</span><br><span class="line">&#123;7085,14858321921,3&#125;,</span><br><span class="line">&#123;7110,14910750721,14&#125;,</span><br><span class="line">&#123;7119,14929625089,13&#125;,</span><br><span class="line">&#123;7121,14933819393,3&#125;,</span><br><span class="line">&#123;7124,14940110849,3&#125;,</span><br><span class="line">&#123;7130,14952693761,3&#125;,</span><br><span class="line">&#123;7131,14954790913,5&#125;,</span><br><span class="line">&#123;7164,15023996929,37&#125;,</span><br><span class="line">&#123;7169,15034482689,3&#125;,</span><br><span class="line">&#123;7173,15042871297,5&#125;,</span><br><span class="line">&#123;7184,15065939969,3&#125;,</span><br><span class="line">&#123;7185,15068037121,13&#125;,</span><br><span class="line">&#123;7193,15084814337,3&#125;,</span><br><span class="line">&#123;7214,15128854529,3&#125;,</span><br><span class="line">&#123;7224,15149826049,11&#125;,</span><br><span class="line">&#123;7226,15154020353,3&#125;,</span><br><span class="line">&#123;7241,15185477633,3&#125;,</span><br><span class="line">&#123;7260,15225323521,13&#125;,</span><br><span class="line">&#123;7263,15231614977,5&#125;,</span><br><span class="line">&#123;7271,15248392193,3&#125;,</span><br><span class="line">&#123;7275,15256780801,7&#125;,</span><br><span class="line">&#123;7278,15263072257,10&#125;,</span><br><span class="line">&#123;7310,15330181121,7&#125;,</span><br><span class="line">&#123;7326,15363735553,5&#125;,</span><br><span class="line">&#123;7338,15388901377,5&#125;,</span><br><span class="line">&#123;7355,15424552961,6&#125;,</span><br><span class="line">&#123;7394,15506341889,3&#125;,</span><br><span class="line">&#123;7406,15531507713,3&#125;,</span><br><span class="line">&#123;7418,15556673537,3&#125;,</span><br><span class="line">&#123;7434,15590227969,11&#125;,</span><br><span class="line">&#123;7439,15600713729,3&#125;,</span><br><span class="line">&#123;7448,15619588097,3&#125;,</span><br><span class="line">&#123;7464,15653142529,7&#125;,</span><br><span class="line">&#123;7476,15678308353,5&#125;,</span><br><span class="line">&#123;7479,15684599809,11&#125;,</span><br><span class="line">&#123;7481,15688794113,3&#125;,</span><br><span class="line">&#123;7490,15707668481,3&#125;,</span><br><span class="line">&#123;7508,15745417217,3&#125;,</span><br><span class="line">&#123;7530,15791554561,11&#125;,</span><br><span class="line">&#123;7535,15802040321,3&#125;,</span><br><span class="line">&#123;7554,15841886209,11&#125;,</span><br><span class="line">&#123;7560,15854469121,11&#125;,</span><br><span class="line">&#123;7578,15892217857,7&#125;,</span><br><span class="line">&#123;7598,15934160897,3&#125;,</span><br><span class="line">&#123;7613,15965618177,3&#125;,</span><br><span class="line">&#123;7653,16049504257,5&#125;,</span><br><span class="line">&#123;7665,16074670081,11&#125;,</span><br><span class="line">&#123;7668,16080961537,5&#125;,</span><br><span class="line">&#123;7679,16104030209,6&#125;,</span><br><span class="line">&#123;7691,16129196033,3&#125;,</span><br><span class="line">&#123;7700,16148070401,3&#125;,</span><br><span class="line">&#123;7709,16166944769,3&#125;,</span><br><span class="line">&#123;7730,16210984961,3&#125;,</span><br><span class="line">&#123;7764,16282288129,11&#125;,</span><br><span class="line">&#123;7794,16345202689,11&#125;,</span><br><span class="line">&#123;7800,16357785601,17&#125;,</span><br><span class="line">&#123;7809,16376659969,11&#125;,</span><br><span class="line">&#123;7833,16426991617,5&#125;,</span><br><span class="line">&#123;7850,16462643201,3&#125;,</span><br><span class="line">&#123;7856,16475226113,3&#125;,</span><br><span class="line">&#123;7868,16500391937,3&#125;,</span><br><span class="line">&#123;7869,16502489089,23&#125;,</span><br><span class="line">&#123;7875,16515072001,17&#125;,</span><br><span class="line">&#123;7901,16569597953,3&#125;,</span><br><span class="line">&#123;7904,16575889409,3&#125;,</span><br><span class="line">&#123;7928,16626221057,3&#125;,</span><br><span class="line">&#123;7938,16647192577,5&#125;,</span><br><span class="line">&#123;7955,16682844161,3&#125;,</span><br><span class="line">&#123;7970,16714301441,6&#125;,</span><br><span class="line">&#123;7976,16726884353,3&#125;,</span><br><span class="line">&#123;7989,16754147329,7&#125;,</span><br><span class="line">&#123;8001,16779313153,5&#125;,</span><br><span class="line">&#123;8010,16798187521,7&#125;,</span><br><span class="line">&#123;8018,16814964737,3&#125;,</span><br><span class="line">&#123;8019,16817061889,7&#125;,</span><br><span class="line">&#123;8030,16840130561,6&#125;,</span><br><span class="line">&#123;8034,16848519169,7&#125;,</span><br><span class="line">&#123;8045,16871587841,3&#125;,</span><br><span class="line">&#123;8051,16884170753,3&#125;,</span><br><span class="line">&#123;8060,16903045121,3&#125;,</span><br><span class="line">&#123;8069,16921919489,3&#125;,</span><br><span class="line">&#123;8093,16972251137,3&#125;,</span><br><span class="line">&#123;8109,17005805569,23&#125;,</span><br><span class="line">&#123;8150,17091788801,3&#125;,</span><br><span class="line">&#123;8153,17098080257,3&#125;,</span><br><span class="line">&#123;8165,17123246081,6&#125;,</span><br><span class="line">&#123;8190,17175674881,22&#125;,</span><br><span class="line">&#123;8204,17205035009,3&#125;,</span><br><span class="line">&#123;8219,17236492289,3&#125;,</span><br><span class="line">&#123;8223,17244880897,5&#125;,</span><br><span class="line">&#123;8226,17251172353,5&#125;,</span><br><span class="line">&#123;8241,17282629633,5&#125;,</span><br><span class="line">&#123;8243,17286823937,3&#125;,</span><br><span class="line">&#123;8256,17314086913,10&#125;,</span><br><span class="line">&#123;8270,17343447041,3&#125;,</span><br><span class="line">&#123;8276,17356029953,3&#125;,</span><br><span class="line">&#123;8283,17370710017,5&#125;,</span><br><span class="line">&#123;8289,17383292929,11&#125;,</span><br><span class="line">&#123;8313,17433624577,5&#125;,</span><br><span class="line">&#123;8318,17444110337,3&#125;,</span><br><span class="line">&#123;8319,17446207489,17&#125;,</span><br><span class="line">&#123;8330,17469276161,6&#125;,</span><br><span class="line">&#123;8333,17475567617,3&#125;,</span><br><span class="line">&#123;8345,17500733441,3&#125;,</span><br><span class="line">&#123;8358,17527996417,5&#125;,</span><br><span class="line">&#123;8391,17597202433,5&#125;,</span><br><span class="line">&#123;8411,17639145473,5&#125;,</span><br><span class="line">&#123;8414,17645436929,6&#125;,</span><br><span class="line">&#123;8426,17670602753,3&#125;,</span><br><span class="line">&#123;8445,17710448641,11&#125;,</span><br><span class="line">&#123;8498,17821597697,3&#125;,</span><br><span class="line">&#123;8501,17827889153,3&#125;,</span><br><span class="line">&#123;8529,17886609409,13&#125;,</span><br><span class="line">&#123;8534,17897095169,3&#125;,</span><br><span class="line">&#123;8555,17941135361,3&#125;,</span><br><span class="line">&#123;8604,18043895809,17&#125;,</span><br><span class="line">&#123;8621,18079547393,3&#125;,</span><br><span class="line">&#123;8643,18125684737,5&#125;,</span><br><span class="line">&#123;8649,18138267649,7&#125;,</span><br><span class="line">&#123;8660,18161336321,3&#125;,</span><br><span class="line">&#123;8685,18213765121,17&#125;,</span><br><span class="line">&#123;8703,18251513857,7&#125;,</span><br><span class="line">&#123;8718,18282971137,10&#125;,</span><br><span class="line">&#123;8733,18314428417,5&#125;,</span><br><span class="line">&#123;8748,18345885697,10&#125;,</span><br><span class="line">&#123;8768,18387828737,3&#125;,</span><br><span class="line">&#123;8771,18394120193,3&#125;,</span><br><span class="line">&#123;8790,18433966081,7&#125;,</span><br><span class="line">&#123;8796,18446548993,5&#125;,</span><br><span class="line">&#123;8814,18484297729,22&#125;,</span><br><span class="line">&#123;8834,18526240769,3&#125;,</span><br><span class="line">&#123;8843,18545115137,3&#125;,</span><br><span class="line">&#123;8844,18547212289,17&#125;,</span><br><span class="line">&#123;8873,18608029697,3&#125;,</span><br><span class="line">&#123;8874,18610126849,7&#125;,</span><br><span class="line">&#123;8886,18635292673,5&#125;,</span><br><span class="line">&#123;8888,18639486977,3&#125;,</span><br><span class="line">&#123;8916,18698207233,7&#125;,</span><br><span class="line">&#123;8919,18704498689,11&#125;,</span><br><span class="line">&#123;8921,18708692993,3&#125;,</span><br><span class="line">&#123;8939,18746441729,6&#125;,</span><br><span class="line">&#123;8955,18779996161,14&#125;,</span><br><span class="line">&#123;8990,18853396481,3&#125;,</span><br><span class="line">&#123;8996,18865979393,3&#125;,</span><br><span class="line">&#123;9000,18874368001,7&#125;,</span><br><span class="line">&#123;9026,18928893953,3&#125;,</span><br><span class="line">&#123;9030,18937282561,13&#125;,</span><br><span class="line">&#123;9035,18947768321,6&#125;,</span><br><span class="line">&#123;9038,18954059777,3&#125;,</span><br><span class="line">&#123;9039,18956156929,7&#125;,</span><br><span class="line">&#123;9044,18966642689,3&#125;,</span><br><span class="line">&#123;9045,18968739841,29&#125;,</span><br><span class="line">&#123;9075,19031654401,34&#125;,</span><br><span class="line">&#123;9086,19054723073,3&#125;,</span><br><span class="line">&#123;9119,19123929089,3&#125;,</span><br><span class="line">&#123;9125,19136512001,3&#125;,</span><br><span class="line">&#123;9158,19205718017,3&#125;,</span><br><span class="line">&#123;9159,19207815169,23&#125;,</span><br><span class="line">&#123;9171,19232980993,5&#125;,</span><br><span class="line">&#123;9173,19237175297,3&#125;,</span><br><span class="line">&#123;9180,19251855361,22&#125;,</span><br><span class="line">&#123;9185,19262341121,3&#125;,</span><br><span class="line">&#123;9186,19264438273,7&#125;,</span><br><span class="line">&#123;9228,19352518657,5&#125;,</span><br><span class="line">&#123;9266,19432210433,3&#125;,</span><br><span class="line">&#123;9275,19451084801,3&#125;,</span><br><span class="line">&#123;9294,19490930689,7&#125;,</span><br><span class="line">&#123;9305,19513999361,6&#125;,</span><br><span class="line">&#123;9314,19532873729,3&#125;,</span><br><span class="line">&#123;9321,19547553793,5&#125;,</span><br><span class="line">&#123;9341,19589496833,3&#125;,</span><br><span class="line">&#123;9345,19597885441,31&#125;,</span><br><span class="line">&#123;9350,19608371201,3&#125;,</span><br><span class="line">&#123;9356,19620954113,3&#125;,</span><br><span class="line">&#123;9363,19635634177,5&#125;,</span><br><span class="line">&#123;9369,19648217089,13&#125;,</span><br><span class="line">&#123;9371,19652411393,3&#125;,</span><br><span class="line">&#123;9398,19709034497,3&#125;,</span><br><span class="line">&#123;9411,19736297473,5&#125;,</span><br><span class="line">&#123;9423,19761463297,5&#125;,</span><br><span class="line">&#123;9429,19774046209,19&#125;,</span><br><span class="line">&#123;9453,19824377857,5&#125;,</span><br><span class="line">&#123;9464,19847446529,3&#125;,</span><br><span class="line">&#123;9483,19887292417,5&#125;,</span><br><span class="line">&#123;9485,19891486721,3&#125;,</span><br><span class="line">&#123;9516,19956498433,5&#125;,</span><br><span class="line">&#123;9518,19960692737,3&#125;,</span><br><span class="line">&#123;9525,19975372801,7&#125;,</span><br><span class="line">&#123;9536,19998441473,3&#125;,</span><br><span class="line">&#123;9539,20004732929,3&#125;,</span><br><span class="line">&#123;9555,20038287361,31&#125;,</span><br><span class="line">&#123;9579,20088619009,11&#125;,</span><br><span class="line">&#123;9585,20101201921,13&#125;,</span><br><span class="line">&#123;9591,20113784833,10&#125;,</span><br><span class="line">&#123;9593,20117979137,3&#125;,</span><br><span class="line">&#123;9606,20145242113,5&#125;,</span><br><span class="line">&#123;9623,20180893697,3&#125;,</span><br><span class="line">&#123;9626,20187185153,3&#125;,</span><br><span class="line">&#123;9639,20214448129,22&#125;,</span><br><span class="line">&#123;9650,20237516801,3&#125;,</span><br><span class="line">&#123;9653,20243808257,3&#125;,</span><br><span class="line">&#123;9689,20319305729,3&#125;,</span><br><span class="line">&#123;9693,20327694337,5&#125;,</span><br><span class="line">&#123;9711,20365443073,5&#125;,</span><br><span class="line">&#123;9713,20369637377,5&#125;,</span><br><span class="line">&#123;9714,20371734529,7&#125;,</span><br><span class="line">&#123;9720,20384317441,14&#125;,</span><br><span class="line">&#123;9726,20396900353,5&#125;,</span><br><span class="line">&#123;9738,20422066177,5&#125;,</span><br><span class="line">&#123;9765,20478689281,11&#125;,</span><br><span class="line">&#123;9776,20501757953,3&#125;,</span><br><span class="line">&#123;9779,20508049409,3&#125;,</span><br><span class="line">&#123;9783,20516438017,10&#125;,</span><br><span class="line">&#123;9803,20558381057,3&#125;,</span><br><span class="line">&#123;9809,20570963969,3&#125;,</span><br><span class="line">&#123;9824,20602421249,3&#125;,</span><br><span class="line">&#123;9825,20604518401,21&#125;,</span><br><span class="line">&#123;9843,20642267137,5&#125;,</span><br><span class="line">&#123;9854,20665335809,3&#125;,</span><br><span class="line">&#123;9875,20709376001,3&#125;,</span><br><span class="line">&#123;9899,20759707649,3&#125;,</span><br><span class="line">&#123;9926,20816330753,3&#125;,</span><br><span class="line">&#123;9951,20868759553,5&#125;,</span><br><span class="line">&#123;9959,20885536769,3&#125;,</span><br><span class="line">&#123;9965,20898119681,3&#125;,</span><br><span class="line">&#123;9978,20925382657,15&#125;,</span><br><span class="line">&#123;9998,20967325697,3&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="生成代码"><a href="#生成代码" class="headerlink" title="生成代码"></a>生成代码</h2><p>语言：Wolfram Mathematica 12.1.</p>
<figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="variable">Ans</span> <span class="operator">=</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="built_in">For</span><span class="punctuation">[</span><span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span><span class="operator">,</span> <span class="variable">i</span> <span class="operator">&lt;</span> <span class="number">10000</span><span class="operator">,</span> <span class="variable">i</span><span class="operator">++,</span></span><br><span class="line"> <span class="variable">tmp</span> <span class="operator">=</span> <span class="variable">i</span><span class="operator">*</span><span class="number">2</span><span class="operator">^</span><span class="number">21</span> <span class="operator">+</span> <span class="number">1</span><span class="operator">;</span></span><br><span class="line"> <span class="built_in">If</span><span class="punctuation">[</span><span class="built_in">PrimeQ</span><span class="punctuation">[</span><span class="variable">tmp</span><span class="punctuation">]</span><span class="operator">,</span></span><br><span class="line">  <span class="built_in">AppendTo</span><span class="punctuation">[</span><span class="variable">Ans</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="variable">i</span><span class="operator">,</span> <span class="variable">tmp</span><span class="operator">,</span> <span class="built_in">PrimitiveRoot</span><span class="punctuation">[</span><span class="variable">tmp</span><span class="punctuation">]</span><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"> <span class="punctuation">]</span></span><br><span class="line"><span class="built_in">Print</span><span class="punctuation">[</span><span class="variable">Ans</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>数论</tag>
        <tag>多项式</tag>
      </tags>
  </entry>
  <entry>
    <title>多项式理论笔记</title>
    <url>/2022/01/20/20220120-polynomial/</url>
    <content><![CDATA[<p>为啥高中同学个个都会多项式？恶补多项式……</p>
<span id="more"></span>
<h2 id="多项式单点求值"><a href="#多项式单点求值" class="headerlink" title="多项式单点求值"></a>多项式单点求值</h2><blockquote>
<p>对于 $f(x)=\sum\limits_{i=0}^na_ix^i$，求 $f(k)$。</p>
</blockquote>
<h3 id="朴素算法"><a href="#朴素算法" class="headerlink" title="朴素算法"></a>朴素算法</h3><p>正常计算是 $\Theta(n^2)$ 的，非常慢。</p>
<h3 id="简单优化"><a href="#简单优化" class="headerlink" title="简单优化"></a>简单优化</h3><p>我们发现主要是 $x^i$ 部分被重复求值了，可以事先 $\Theta(n)$ 递推求完所有的 $x^i$，再计算，时间复杂度 $\Theta(n)$，额外空间复杂度 $\Theta(n)$。</p>
<h3 id="秦九韶算法"><a href="#秦九韶算法" class="headerlink" title="秦九韶算法"></a>秦九韶算法</h3><p>注意到 $ax^2+bx+c=(ax+b)x+c$，容易推广，于是有递推式：</p>
<p>$F<em>0=a_nx,F_i=F</em>{i-1}x+a_{n-i}$，而 $F_n$ 即为所求。时间复杂度 $\Theta(n)$，额外空间复杂度 $O(1)$。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h2 id=""><a href="#" class="headerlink" title=" "></a> </h2>]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>多项式</tag>
      </tags>
  </entry>
  <entry>
    <title>20220219-Koishi-loves-construction</title>
    <url>/2022/02/19/20220219-Koishi-loves-construction/</url>
    <content><![CDATA[<p>简单构造题。注意分奇偶这个常见套路。</p>
<span id="more"></span>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定 $n$，试构造 $1\sim n$ 的排列满足下列限制中的一条，或报告无解：</p>
<ol>
<li>$n$ 个前缀和在模 $n$ 意义下互不相同；</li>
<li>$n$ 个前缀积在模 $n$ 意义下互不相同。</li>
</ol>
<p>给定需满足的限制与 $n$，求排列。</p>
<p>多测，$T\le 10,n\le 10^5$。</p>
<p>source: <a href="https://www.luogu.com.cn/problem/P3599">luogu P3599 Koishi Loves Construction</a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="第一问"><a href="#第一问" class="headerlink" title="第一问"></a>第一问</h3><p>奇数显然不行：$n\mid 1+\cdots+n$，因而 $S<em>n=0$。若 $n$ 放在第 $i$ 位（$i\ne 1$），则 $S_i=S</em>{i-1}$，矛盾，因而 $i=1$。此时 $S_1=S_n=0$，亦矛盾。</p>
<p>对于偶数 $n$：首先放置 $n$ 为首位。对于剩下的部分，我们试着两两配对使和为小定值。这里取 $1$，那么 $S<em>{2k}=k,S</em>{2k+1}=k+a_{2k+1}$（先删去开头的 $0$）。于是发现偶数项不断上升，尝试将奇数项不断下降，于是构造出 $2,-1,4,-3,5,-4,\cdots$。易验证正确性。时间复杂度 $\Theta(n)$。</p>
<h3 id="第二问"><a href="#第二问" class="headerlink" title="第二问"></a>第二问</h3><p>非 $4$ 合数显然不行：如果 $n$ 不在末位而在第 $i$ 位，则 $S<em>j=0(j\ge i)$ ，矛盾。故 $n$ 在末位，$S_n=0$。由 $n\mid (n-1)!$ 知 $S</em>{n-1}=0$，矛盾。</p>
<p>$1,2,4$ 特判一下，剩下奇素数的情况。$n$ 放末位，前面需使前缀积互不相同。考虑求离散对数，转化为 $n-1$ 的第一问。时间复杂度 $\Theta(n)$。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> mirai &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> MAXN = <span class="number">100005</span>;</span><br><span class="line"><span class="type">int</span> a[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pow</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a, <span class="type">int</span> b, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="type">long</span> <span class="type">long</span> ans = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (b) &#123;</span><br><span class="line">    <span class="keyword">if</span> (b &amp; <span class="number">1</span>) &#123;</span><br><span class="line">      ans = ans * a % n;</span><br><span class="line">    &#125;</span><br><span class="line">    a = a * a % n;</span><br><span class="line">    b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> x, t;</span><br><span class="line">  std::<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;t);</span><br><span class="line">  <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        std::<span class="built_in">printf</span>(<span class="string">&quot;2 1\n&quot;</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        std::<span class="built_in">printf</span>(<span class="string">&quot;2 %d &quot;</span>, n);</span><br><span class="line">        <span class="type">int</span> odd = n - <span class="number">1</span>, even = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">          <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            std::<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, odd);</span><br><span class="line">            odd -= <span class="number">2</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            std::<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, even);</span><br><span class="line">            even += <span class="number">2</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        std::<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        std::<span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="type">bool</span> isprime = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        std::<span class="built_in">printf</span>(<span class="string">&quot;2 1\n&quot;</span>);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (n == <span class="number">2</span>) &#123;</span><br><span class="line">        std::<span class="built_in">printf</span>(<span class="string">&quot;2 1 2\n&quot;</span>);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (n == <span class="number">4</span>) &#123;</span><br><span class="line">        std::<span class="built_in">printf</span>(<span class="string">&quot;2 1 3 2 4\n&quot;</span>);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i * i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">          isprime = <span class="literal">false</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!isprime) &#123;</span><br><span class="line">        std::<span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      std::vector&lt;<span class="type">int</span>&gt; primes;</span><br><span class="line">      <span class="type">int</span> num = n - <span class="number">1</span>, now = <span class="number">2</span>;</span><br><span class="line">      <span class="keyword">while</span> (num != <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (num % now == <span class="number">0</span>) &#123;</span><br><span class="line">          primes.<span class="built_in">push_back</span>(now);</span><br><span class="line">          <span class="keyword">while</span> (num % now == <span class="number">0</span>) &#123;</span><br><span class="line">            num /= now;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        now += now == <span class="number">2</span> ? <span class="number">1</span> : <span class="number">2</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="type">int</span> proot = <span class="number">2</span>;</span><br><span class="line">      <span class="comment">// std::printf(&quot;prime: &quot;);</span></span><br><span class="line">      <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i : primes) &#123;</span><br><span class="line">          <span class="comment">// std::printf(&quot;%d &quot;, i);</span></span><br><span class="line">          <span class="keyword">if</span> (<span class="built_in">pow</span>(proot, (n - <span class="number">1</span>) / i, n) == <span class="number">1</span>) &#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        proot++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// std::printf(&quot;\nproot = %d\n&quot;, proot);</span></span><br><span class="line">      a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        a[i] = <span class="built_in">static_cast</span>&lt;<span class="type">long</span> <span class="type">long</span>&gt;(a[i - <span class="number">1</span>]) * proot % n;</span><br><span class="line">        <span class="comment">// std::printf(&quot; %lld&quot;, a[i]);</span></span><br><span class="line">      &#125;</span><br><span class="line">      std::<span class="built_in">printf</span>(<span class="string">&quot;2 1 &quot;</span>);</span><br><span class="line">      <span class="type">int</span> odd = n - <span class="number">2</span>, even = <span class="number">2</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">2</span>; ++i) &#123;</span><br><span class="line">        <span class="comment">// std::printf(&quot;%d &quot;, a[i % 2 == 1 ? i : n - 1 - i]);</span></span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">          std::<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[odd]);</span><br><span class="line">          odd -= <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          std::<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[even]);</span><br><span class="line">          even += <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      std::<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// namespace mirai</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> mirai::<span class="built_in">main</span>(argc, argv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>构造</tag>
      </tags>
  </entry>
  <entry>
    <title>20220219-时间复杂度</title>
    <url>/2022/02/19/20220219-%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</url>
    <content><![CDATA[<p>简单模拟题。</p>
<span id="more"></span>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>略。</p>
<p>source: NOIP2017TG</p>
<p>link: <a href="https://www.luogu.com.cn/problem/P3952">https://www.luogu.com.cn/problem/P3952</a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>直接模拟啥事没有。令 $n=1000$，若 $r-l&gt;101$ 就认为能贡献，若 $r&lt;l$ 则认为不会进入循环。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x) (std::printf(#x <span class="string">&quot; = %d\n&quot;</span>, x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debugl(x) (std::printf(#x <span class="string">&quot; = %ld\n&quot;</span>, x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debugll(x) (std::printf(#x <span class="string">&quot; = %lld\n&quot;</span>, x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debugc(x) (std::printf(#x <span class="string">&quot; = %c\n&quot;</span>, x))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> debug</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> debugl</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> debugll</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> debugc</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debugl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debugll</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debugc</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> mirai &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">custom_hash</span> &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">char</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> <span class="type">char</span>&amp; x)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x ^ <span class="number">19</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::stack&lt;std::pair&lt;<span class="type">char</span>, <span class="type">int</span>&gt;&gt; sta;</span><br><span class="line">std::unordered_set&lt;<span class="type">char</span>, custom_hash&gt; set;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> t;</span><br><span class="line">  std::<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">  <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">    <span class="comment">// std::puts(&quot;=======&quot;);</span></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="type">int</span> pw;</span><br><span class="line">    std::<span class="built_in">scanf</span>(<span class="string">&quot; %c%c%c&quot;</span>, &amp;ch, &amp;ch, &amp;ch); <span class="comment">// O([ch]</span></span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">      pw = <span class="number">0</span>;</span><br><span class="line">      std::<span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;ch); <span class="comment">// )</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      std::<span class="built_in">scanf</span>(<span class="string">&quot;%c%d%c&quot;</span>, &amp;ch, &amp;pw, &amp;ch);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">debug</span>(pw);</span><br><span class="line">    <span class="keyword">while</span> (!sta.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">      sta.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    set.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="type">int</span> count1 = <span class="number">0</span>, count2 = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      <span class="type">char</span> ch;</span><br><span class="line">      std::<span class="built_in">scanf</span>(<span class="string">&quot; %c&quot;</span>, &amp;ch);</span><br><span class="line">      <span class="keyword">if</span> (ans == <span class="number">0x3f3f3f3f</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> ((ch = std::<span class="built_in">getchar</span>()) != <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (ch == <span class="string">&#x27;E&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// std::puts(&quot;E&quot;);</span></span><br><span class="line">        <span class="keyword">if</span> (sta.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">          ans = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> top = sta.<span class="built_in">top</span>();</span><br><span class="line">        <span class="keyword">if</span> (top.second == <span class="number">1</span>) &#123;</span><br><span class="line">          count1--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (top.second == <span class="number">2</span>) &#123;</span><br><span class="line">          count2--;</span><br><span class="line">        &#125;</span><br><span class="line">        set.<span class="built_in">erase</span>(top.first);</span><br><span class="line">        sta.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      std::<span class="built_in">scanf</span>(<span class="string">&quot; %c&quot;</span>, &amp;ch);</span><br><span class="line">      <span class="built_in">debugc</span>(ch);</span><br><span class="line">      <span class="keyword">if</span> (set.<span class="built_in">find</span>(ch) != set.<span class="built_in">end</span>()) &#123;</span><br><span class="line">        ans = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        set.<span class="built_in">insert</span>(ch);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="type">char</span> inp;</span><br><span class="line">      <span class="type">int</span> l = <span class="number">1001</span>;</span><br><span class="line">      std::<span class="built_in">scanf</span>(<span class="string">&quot; %c&quot;</span>, &amp;inp);</span><br><span class="line">      <span class="keyword">if</span> (inp != <span class="string">&#x27;n&#x27;</span>) &#123;</span><br><span class="line">        l = inp - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">while</span> (std::<span class="built_in">isdigit</span>(inp = std::<span class="built_in">getchar</span>())) &#123;</span><br><span class="line">          l = l * <span class="number">10</span> + inp - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="type">int</span> r = <span class="number">1001</span>;</span><br><span class="line">      std::<span class="built_in">scanf</span>(<span class="string">&quot; %c&quot;</span>, &amp;inp);</span><br><span class="line">      <span class="keyword">if</span> (inp != <span class="string">&#x27;n&#x27;</span>) &#123;</span><br><span class="line">        r = inp - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">while</span> (std::<span class="built_in">isdigit</span>(inp = std::<span class="built_in">getchar</span>())) &#123;</span><br><span class="line">          r = r * <span class="number">10</span> + inp - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (ans == <span class="number">0x3f3f3f3f</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">debug</span>(l);</span><br><span class="line">      <span class="built_in">debug</span>(r);</span><br><span class="line">      <span class="type">int</span> now = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> (r - l &gt; <span class="number">100</span>) &#123;</span><br><span class="line">        now = <span class="number">1</span>;</span><br><span class="line">        count1++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (r &lt; l) &#123;</span><br><span class="line">        now = <span class="number">2</span>;</span><br><span class="line">        count2++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">debug</span>(now);</span><br><span class="line">      <span class="keyword">if</span> (count2 == <span class="number">0</span>) &#123;</span><br><span class="line">        ans = std::<span class="built_in">max</span>(ans, count1);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// std::printf(&quot;%2d %2d %d %d %d %d\n&quot;, l == 1001 ? -1 : l, r == 1001 ? -1 : r, ans, now, count1, count2);</span></span><br><span class="line">      sta.<span class="built_in">push</span>(&#123;ch, now&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">debug</span>(ans);</span><br><span class="line">    <span class="keyword">if</span> (ans == <span class="number">0x3f3f3f3f</span> || !sta.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">      std::<span class="built_in">printf</span>(<span class="string">&quot;ERR\n&quot;</span>, ans);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ans == pw) &#123;</span><br><span class="line">      std::<span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      std::<span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// namespace mirai</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> mirai::<span class="built_in">main</span>(argc, argv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title>20220219模拟赛笔记</title>
    <url>/2022/02/19/20220219-%E6%A8%A1%E6%8B%9F%E8%B5%9B%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>又是一次卡在暴力里调不出来爆零……码力太差了……</p>
<span id="more"></span>
<h2 id="时间分配"><a href="#时间分配" class="headerlink" title="时间分配"></a>时间分配</h2><p>起晚了，开头少 15 分钟。</p>
<p>先花了一个小时想了 T1 的 60 分（$n,k\le 3000$ 的情况），其中还发现缺多项式求逆这个知识点……</p>
<p>打了 1h 感觉做法有点假，又打了 T3 $\Theta(n^3)$ 暴力一会就打不动了。</p>
<p>总结：码力差；知识点缺。</p>
<h2 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h2><p>source: <a href="https://codeforces.com/contest/981/problem/H">CF981H</a></p>
]]></content>
      <categories>
        <category>模拟赛</category>
      </categories>
      <tags>
        <tag>模拟赛</tag>
      </tags>
  </entry>
  <entry>
    <title>[THUPC2019]鸭棋</title>
    <url>/2022/02/21/20220221-duckchess/</url>
    <content><![CDATA[<p>直接暴力模拟啥事没有。</p>
<span id="more"></span>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>请看原题面：<a href="https://loj.ac/p/6619">https://loj.ac/p/6619</a></p>
<p>source: THUPC 2019</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>维护两个数组，分别是王的直走步数组和士的斜走步数组。</p>
<p>每次走完一步后（以及走第一步前）暴力计算每一个子可以走到哪些位置，然后一切就好办了，就是复杂度有点高，是 $\Theta(n^2m^2Q)$ 的，不过能过。</p>
<h3 id="王"><a href="#王" class="headerlink" title="王"></a>王</h3><p>直接遍历王数组，检验是否能走。</p>
<h3 id="士"><a href="#士" class="headerlink" title="士"></a>士</h3><p>遍历士数组，检验是否能走。</p>
<h3 id="兵"><a href="#兵" class="headerlink" title="兵"></a>兵</h3><p>遍历王数组和士数组。</p>
<h3 id="马"><a href="#马" class="headerlink" title="马"></a>马</h3><p>遍历两层，第一步的王数组与第二步的士数组。检验 $\Delta x$ 和 $\Delta y$ 是否皆非 0。如果第一步走王步会到达一个棋子就不枚举第二步。</p>
<h3 id="鸭"><a href="#鸭" class="headerlink" title="鸭"></a>鸭</h3><p>与马类似，枚举两层，第一步的王数组和二、三步的士数组。同样检验走第二步之后的 $\Delta x $ 和 $\Delta y$ 是否皆非 0。如果第一步走王步会到达一个棋子就不枚举第二步，如果第二步会到达一个棋子就抛弃这个选择。</p>
<h3 id="象"><a href="#象" class="headerlink" title="象"></a>象</h3><p>遍历士数组，如果走一步没有阻挡就检验走两步是否可行。</p>
<h3 id="车"><a href="#车" class="headerlink" title="车"></a>车</h3><p>遍历士数组，枚举走了多少步，一直走直到遇到一个棋子，如果遇到对方棋子就停下并认为可以吃到那个子。</p>
<h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><p>这里用 <code>std::unordered_set</code> 来存储可走的地方。</p>
<p>这里用 <code>std::array</code> 来存储棋盘，在枚举可达位置的时候使用 <code>std::array::at()</code> 来访问信息，并在外围套上一个 <code>try &#123;&#125; catch(...) &#123;&#125;</code> ，以避免麻烦的边界判断。</p>
<p>这里用正负来区分红、蓝方。</p>
<p><del>不知道为什么第 8 行和第 9 行的初始状态写反了……调了半个小时……</del></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> mirai &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">piece</span> &#123;</span><br><span class="line">  K = <span class="number">1</span>, <span class="comment">// king</span></span><br><span class="line">  G, <span class="comment">// guard</span></span><br><span class="line">  B, <span class="comment">// bishop</span></span><br><span class="line">  N, <span class="comment">// knight</span></span><br><span class="line">  R, <span class="comment">// rook</span></span><br><span class="line">  D, <span class="comment">// duck</span></span><br><span class="line">  P <span class="comment">// pawn</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">char</span> name[<span class="number">8</span>][<span class="number">20</span>] = &#123;<span class="string">&quot;&quot;</span>, <span class="string">&quot;captain&quot;</span>, <span class="string">&quot;guard&quot;</span>, <span class="string">&quot;elephant&quot;</span>, <span class="string">&quot;horse&quot;</span>, <span class="string">&quot;car&quot;</span>, <span class="string">&quot;duck&quot;</span>, <span class="string">&quot;soldier&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> type&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">custom_hash</span> &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function">type <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> type&amp; x)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">custom_hash</span>&lt;<span class="type">int</span>&gt; &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function">std::<span class="type">size_t</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; x)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x ^ <span class="number">0x19260817</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">custom_hash</span>&lt;std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function">std::<span class="type">size_t</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&amp; x)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.first ^ x.second;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::array&lt;std::array&lt;<span class="type">int</span>, 9&gt;, 10&gt; board = &#123;&#123;</span><br><span class="line">  &#123;&#123;R, N, B, G, K, G, B, N, R&#125;&#125;,</span><br><span class="line">  &#123;&#123;&#125;&#125;,</span><br><span class="line">  &#123;&#123;D, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, D&#125;&#125;,</span><br><span class="line">  &#123;&#123;P, <span class="number">0</span>, P, <span class="number">0</span>, P, <span class="number">0</span>, P, <span class="number">0</span>, P&#125;&#125;,</span><br><span class="line">  &#123;&#123;&#125;&#125;,</span><br><span class="line">  &#123;&#123;&#125;&#125;,</span><br><span class="line">  &#123;&#123;-P,  <span class="number">0</span>, -P,  <span class="number">0</span>, -P,  <span class="number">0</span>, -P,  <span class="number">0</span>, -P&#125;&#125;,</span><br><span class="line">  &#123;&#123;-D,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>, -D&#125;&#125;,</span><br><span class="line">  &#123;&#123;&#125;&#125;,</span><br><span class="line">  &#123;&#123;-R, -N, -B, -G, -K, -G, -B, -N, -R&#125;&#125;</span><br><span class="line">&#125;&#125;;</span><br><span class="line">std::unordered_set&lt;std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;, custom_hash&lt;std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&gt; go[<span class="number">10</span>][<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> kdx[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> kdy[<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> gdx[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> gdy[<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">0</span>; x &lt; <span class="number">10</span>; ++x) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">0</span>; y &lt; <span class="number">9</span>; ++y) &#123;</span><br><span class="line">      go[x][y].<span class="built_in">clear</span>();</span><br><span class="line">      <span class="keyword">if</span> (board[x][y] == <span class="number">0</span>) &#123; <span class="keyword">continue</span>; &#125;</span><br><span class="line">      <span class="keyword">auto</span> &amp;piece = board[x][y];</span><br><span class="line">      <span class="type">int</span> army = piece &lt; <span class="number">0</span> ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">      <span class="type">int</span> type = piece / army;</span><br><span class="line">      <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">       <span class="keyword">case</span> K: &#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">             <span class="keyword">if</span> (board.<span class="built_in">at</span>(x + kdx[i]).<span class="built_in">at</span>(y + kdy[i]) * army &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">               go[x][y].<span class="built_in">insert</span>(&#123;x + kdx[i], y + kdy[i]&#125;);</span><br><span class="line">             &#125;</span><br><span class="line">           &#125; <span class="built_in">catch</span> (...) &#123;&#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">case</span> G: &#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">             <span class="keyword">if</span> (board.<span class="built_in">at</span>(x + gdx[i]).<span class="built_in">at</span>(y + gdy[i]) * army &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">               go[x][y].<span class="built_in">insert</span>(&#123;x + gdx[i], y + gdy[i]&#125;);</span><br><span class="line">             &#125;</span><br><span class="line">           &#125; <span class="built_in">catch</span> (...) &#123;&#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">case</span> B: &#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">             <span class="keyword">if</span> (board.<span class="built_in">at</span>(x + gdx[i]).<span class="built_in">at</span>(y + gdy[i]) == <span class="number">0</span> &amp;&amp; </span><br><span class="line">                 board.<span class="built_in">at</span>(x + gdx[i] * <span class="number">2</span>).<span class="built_in">at</span>(y + gdy[i] * <span class="number">2</span>) * army &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">               go[x][y].<span class="built_in">insert</span>(&#123;x + gdx[i] * <span class="number">2</span>, y + gdy[i] * <span class="number">2</span>&#125;);</span><br><span class="line">             &#125;</span><br><span class="line">           &#125; <span class="built_in">catch</span> (...) &#123;&#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">case</span> N: &#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">             <span class="type">int</span> dx = kdx[i] + gdx[j], dy = kdy[i] + gdy[j];</span><br><span class="line">             <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (board.<span class="built_in">at</span>(x + kdx[i]).<span class="built_in">at</span>(y + kdy[i]) == <span class="number">0</span> &amp;&amp; dx &amp;&amp; dy &amp;&amp;</span><br><span class="line">                   board.<span class="built_in">at</span>(x + dx).<span class="built_in">at</span>(y + dy) * army &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                 go[x][y].<span class="built_in">insert</span>(&#123;x + dx, y + dy&#125;);</span><br><span class="line">               &#125;</span><br><span class="line">             &#125; <span class="built_in">catch</span> (...) &#123;&#125;</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">case</span> R: &#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">             <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= <span class="number">9</span>; ++k) &#123;</span><br><span class="line">               <span class="keyword">auto</span> &amp;&amp;tmp = board.<span class="built_in">at</span>(x + k * kdx[i]).<span class="built_in">at</span>(y + k * kdy[i]);</span><br><span class="line">               <span class="keyword">if</span> (tmp * army &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                 go[x][y].<span class="built_in">insert</span>(&#123;x + k * kdx[i], y + k * kdy[i]&#125;);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (tmp * army == <span class="number">0</span>) &#123; <span class="keyword">continue</span>; &#125;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">             &#125;</span><br><span class="line">           &#125; <span class="built_in">catch</span> (...) &#123;&#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">case</span> D: &#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">             <span class="type">int</span> dx = kdx[i] + gdx[j], dy = kdy[i] + gdy[j];</span><br><span class="line">             <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (board.<span class="built_in">at</span>(x + kdx[i]).<span class="built_in">at</span>(y + kdy[i]) == <span class="number">0</span> &amp;&amp; dx &amp;&amp; dy &amp;&amp; board.<span class="built_in">at</span>(x + dx).<span class="built_in">at</span>(y + dy) == <span class="number">0</span> &amp;&amp;</span><br><span class="line">                   board.<span class="built_in">at</span>(x + dx + gdx[j]).<span class="built_in">at</span>(y + dy + gdy[j]) * army &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                 go[x][y].<span class="built_in">insert</span>(&#123;x + dx + gdx[j], y + dy + gdy[j]&#125;);</span><br><span class="line">               &#125;</span><br><span class="line">             &#125; <span class="built_in">catch</span> (...) &#123;&#125; </span><br><span class="line">           &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">case</span> P: &#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">             <span class="keyword">if</span> (board.<span class="built_in">at</span>(x + kdx[i]).<span class="built_in">at</span>(y + kdy[i]) * army &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">               go[x][y].<span class="built_in">insert</span>(&#123;x + kdx[i], y + kdy[i]&#125;);</span><br><span class="line">             &#125;</span><br><span class="line">           &#125; <span class="built_in">catch</span> (...) &#123;&#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">             <span class="keyword">if</span> (board.<span class="built_in">at</span>(x + gdx[i]).<span class="built_in">at</span>(y + gdy[i]) * army &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">               go[x][y].<span class="built_in">insert</span>(&#123;x + gdx[i], y + gdy[i]&#125;);</span><br><span class="line">             &#125;</span><br><span class="line">           &#125; <span class="built_in">catch</span> (...) &#123;&#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> q;</span><br><span class="line">  std::<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q);</span><br><span class="line">  <span class="type">int</span> army = <span class="number">1</span>;</span><br><span class="line">  <span class="type">bool</span> unchecked = <span class="literal">true</span>, game_ended = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> test = <span class="number">0</span>; test &lt; q; ++test) &#123;</span><br><span class="line">    <span class="type">int</span> xs, ys, xt, yt;</span><br><span class="line">    std::<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;xs, &amp;ys, &amp;xt, &amp;yt);</span><br><span class="line">    <span class="comment">// if (1 || test == 22) &#123;</span></span><br><span class="line">      <span class="comment">// for (int i = 0; i &lt; 10; ++i) &#123;</span></span><br><span class="line">        <span class="comment">// for (int j = 0; j &lt; 9; ++j) &#123;</span></span><br><span class="line">          <span class="comment">// std::printf(&quot;%2d &quot;, board[i][j]);</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// std::printf(&quot;\n&quot;);</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">      <span class="comment">// std::printf(&quot;%d %d %d %d\n&quot;, xs, ys, xt, yt);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">if</span> (unchecked) &#123; <span class="built_in">check</span>(); &#125;</span><br><span class="line">    <span class="keyword">if</span> (go[xs][ys].<span class="built_in">find</span>(&#123;xt, yt&#125;) == go[xs][ys].<span class="built_in">end</span>() || game_ended || board[xs][ys] * army &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      std::<span class="built_in">puts</span>(<span class="string">&quot;Invalid command&quot;</span>);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::<span class="built_in">printf</span>(<span class="string">&quot;%s %s;&quot;</span>, board[xs][ys] &gt; <span class="number">0</span> ? <span class="string">&quot;red&quot;</span> : <span class="string">&quot;blue&quot;</span>, name[std::<span class="built_in">abs</span>(board[xs][ys])]);</span><br><span class="line">    <span class="keyword">if</span> (board[xt][yt] == <span class="number">0</span>) &#123;</span><br><span class="line">      std::<span class="built_in">printf</span>(<span class="string">&quot;NA;&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      std::<span class="built_in">printf</span>(<span class="string">&quot;%s %s;&quot;</span>, board[xt][yt] &gt; <span class="number">0</span> ? <span class="string">&quot;red&quot;</span> : <span class="string">&quot;blue&quot;</span>, name[std::<span class="built_in">abs</span>(board[xt][yt])]);</span><br><span class="line">    &#125;</span><br><span class="line">    board[xt][yt] = board[xs][ys];</span><br><span class="line">    board[xs][ys] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">check</span>();</span><br><span class="line">    <span class="comment">// if (1 || test == 22) &#123;</span></span><br><span class="line">      <span class="comment">// for (auto i : go[9][8]) &#123;</span></span><br><span class="line">        <span class="comment">// std::printf(&quot;(%d, %d)\n&quot;, i.first, i.second);</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// for (auto i : go[6][6]) &#123;</span></span><br><span class="line">      <span class="comment">// std::printf(&quot;(%d, %d)\n&quot;, i.first, i.second);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="type">int</span> rkx = <span class="number">-1</span>, rky = <span class="number">-1</span>, bkx = <span class="number">-1</span>, bky = <span class="number">-1</span>; <span class="comment">// Blue King, Red King</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (board[i][j] == K) &#123;</span><br><span class="line">          rkx = i;</span><br><span class="line">          rky = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (board[i][j] == -K) &#123;</span><br><span class="line">          bkx = i;</span><br><span class="line">          bky = j;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    army = -army;</span><br><span class="line">    <span class="keyword">if</span> (rkx == <span class="number">-1</span> || bkx == <span class="number">-1</span>) &#123;</span><br><span class="line">      std::<span class="built_in">printf</span>(<span class="string">&quot;no;yes\n&quot;</span>);</span><br><span class="line">      game_ended = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> checking = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span> &amp;&amp; !checking; ++i) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (go[i][j].<span class="built_in">find</span>(&#123;rkx, rky&#125;) != go[i][j].<span class="built_in">end</span>() || </span><br><span class="line">            go[i][j].<span class="built_in">find</span>(&#123;bkx, bky&#125;) != go[i][j].<span class="built_in">end</span>()) &#123;</span><br><span class="line">          checking = <span class="literal">true</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    std::<span class="built_in">printf</span>(<span class="string">&quot;%s;no\n&quot;</span>, checking ? <span class="string">&quot;yes&quot;</span> : <span class="string">&quot;no&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// namespace mirai</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> mirai::<span class="built_in">main</span>(argc, argv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title>CF Round 773 小记</title>
    <url>/2022/02/23/20220223-CF-Round-773/</url>
    <content><![CDATA[<p>又是一场下分场……</p>
<span id="more"></span>
<h2 id="整体感受"><a href="#整体感受" class="headerlink" title="整体感受"></a>整体感受</h2><p>一眼切 R2A，手滑 +1 了一次。<br>看了 R2B 之后被样例解释误导，+4 并且浪费半小时。<br>R1A 直接切，正确性显然。<br>R1B 看上去也不难做，可是只剩二十分钟了，最后连样例都没过。</p>
<h2 id="R2A-Hard-Way"><a href="#R2A-Hard-Way" class="headerlink" title="R2A Hard Way"></a>R2A Hard Way</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个三个顶点都是自然数的三角形 $\triangle ABC$，称 $\triangle ABC$ 边界上一个点 $P$ 是好的，当且仅当存在 $x$ 轴上的一个点 $Q$ 使得线段 $PQ$ 与 $\triangle ABC$ 的内部无交。Z求不好的点 $P$ 构成的集合的测度。（容易证明它可测）</p>
<p>$t\le 1000$，$x,y\le 10^9$。</p>
<p>link: <a href="https://codeforces.com/contest/1642/problem/A">https://codeforces.com/contest/1642/problem/A</a></p>
<h3 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h3><p>画个图容易知道，当且仅当存在一条平行于 $x$ 轴的边 $AB$，且第三个顶点 $C$ 在这条边下方集合才非空。此时集合为线段 $AB$ 去掉两个端点。</p>
<p>直接做即可。时间复杂度 $\Theta(1)$。</p>
<p>比赛的时候忘了 $C$ 在 $AB$ 下方这个限制了……Wrong answer on pretest 2……</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> mirai &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> t;</span><br><span class="line">  std::<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">  <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">    <span class="type">int</span> x[<span class="number">3</span>], y[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">      std::<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;x[i], &amp;y[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">      <span class="keyword">if</span> (y[i] == y[(i + <span class="number">1</span>) % <span class="number">3</span>] &amp;&amp; y[i] != <span class="number">0</span>) &#123;</span><br><span class="line">        ans = std::<span class="built_in">abs</span>(x[i] - x[(i + <span class="number">1</span>) % <span class="number">3</span>]);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    std::<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// namespace mirai</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> mirai::<span class="built_in">main</span>(argc, argv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="R2B-Power-Walking"><a href="#R2B-Power-Walking" class="headerlink" title="R2B Power Walking"></a>R2B Power Walking</h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>给定 $n$ 个数 $S={a<em>1,\cdots,a_n}$，对每个 $k\in[1,n]$ 求出：$\min{\sum\limits</em>{i=1}^kf(S_i)}$，其中 $S_i(1\le i\le k)$ 是 $S$ 的一个可重集划分，而 $f(S_i)$ 表示将 $S_i$ 变为不可重集后 $S_i$ 的大小。</p>
<p>$t\le 10^5$，$\sum n\le 3\times10^5$，$1\le a_i\le 10^9$。</p>
<p>link: <a href="https://codeforces.com/contest/1642/problem/B">https://codeforces.com/contest/1642/problem/B</a></p>
<h3 id="做法-1"><a href="#做法-1" class="headerlink" title="做法"></a>做法</h3><p>令 $m=f(S)$，则容易知道当 $k\le m$ 时答案为 $m$。（让不同的可重集交集为空）</p>
<p>当 $k&gt;m$ 时，对于其中的 $m$ 个仍然可以采用原来的策略，对于剩下的 $m-k$ 个就直接从原来的 $m$ 个找 $m-k$ 个数扔出来单独成集合即可。容易知道这是最优解。时间复杂度 $\Theta(n\log n)$，因为用了快排来计算 $m$。当然也可以用 <code>std::unordered_set</code> 优化到 $\Theta(n)$。</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> mirai &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[<span class="number">300005</span>];</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">type</span> &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="type">int</span> val, cnt;</span><br><span class="line">&#125;;</span><br><span class="line">type b[<span class="number">300005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> t;</span><br><span class="line">  std::<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">  <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="comment">// std::memset(a, 0x00, sizeof(a));</span></span><br><span class="line">    std::<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">      std::<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    a[n + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    std::<span class="built_in">sort</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> m = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">      <span class="keyword">if</span> (a[i] != a[i + <span class="number">1</span>]) &#123;</span><br><span class="line">        m++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">      std::<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ans);</span><br><span class="line">      ans += i &gt;= m;</span><br><span class="line">    &#125;</span><br><span class="line">    std::<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// namespace mirai</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> mirai::<span class="built_in">main</span>(argc, argv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="R1A-Great-Sequence"><a href="#R1A-Great-Sequence" class="headerlink" title="R1A Great Sequence"></a>R1A Great Sequence</h3><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><p>给定一个可重数集 ${a_1,\cdots,a_n}$，请通过若干次插入数的操作，使得这个数集可以被两两划分成可重有序数对集 ${(x_i,y_i)}$，使得 $\forall (x_i,y_i):x_i=ky_i$。最小化操作数。</p>
<p>$t\le 2\times 10^4$，$\sum n\le 2\times 10^5$，$1\le a_i\le 10^9$，$2\le k\le 10^6$。</p>
<p>link: <a href="https://codeforces.com/contest/1641/problem/A">https://codeforces.com/contest/1641/problem/A</a></p>
<h3 id="做法-2"><a href="#做法-2" class="headerlink" title="做法"></a>做法</h3><p>对原数组排序。每次设当前最小数为 $x$，若 $kx$ 存在则将 $x$ 与 $kx$ 配对；否则添加一个 $kx$ 并与 $x$ 配对。</p>
<p>容易知道这是正确的。</p>
]]></content>
      <categories>
        <category>CF</category>
      </categories>
      <tags>
        <tag>CF</tag>
      </tags>
  </entry>
  <entry>
    <title>[NOIP2015 普及组] 推销员</title>
    <url>/2022/03/26/20220225-%5BNOIP2015-%E6%99%AE%E5%8F%8A%E7%BB%84%5D-%E6%8E%A8%E9%94%80%E5%91%98/</url>
    <content><![CDATA[<p>一道简单的贪心题。</p>
<span id="more"></span>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>$x$ 轴上有 $n$ 个点（$x_i\in\N^\ast$），每个点有权值 $v_i$，有一小人从原点出发，需要选定 $k$ 个位置进行操作，操作方法是：先走到距离最远的点，操作之，在走回来的路上顺路操作需要操作的点。操作第 $i$ 个点会获得 $v_i$ 的收益，走 $1$ 个单位长度会获得 $1$ 的收益，对每个 $k\in[1,n]$ 分别求出最大收益。</p>
<p>$n\le 10^5$，$x_i\le 10^8$，$v_i\le 1000$。</p>
<p>link: <a href="https://www.luogu.com.cn/problem/P2672">https://www.luogu.com.cn/problem/P2672</a></p>
<p>source: PJ 2015</p>
<h2 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h2><p>容易知道 $k$ 的最优选择（之一）一定是 $k-1$ 的最优选择（之一）的超集。</p>
<p>按 $v_i$ 和 $2x_i+v_i$ 分别维护两个点的 <code>std::set</code>，每次贪心选择即可。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> mirai &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">node</span> &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="type">int</span> dist, val;</span><br><span class="line">  <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node&amp; x, <span class="type">const</span> node&amp; y);</span><br><span class="line">  <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> node&amp; x, <span class="type">const</span> node&amp; y);</span><br><span class="line">&#125; a[<span class="number">100005</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node&amp; x, <span class="type">const</span> node&amp; y) &#123;</span><br><span class="line">  <span class="keyword">return</span> x.dist == y.dist ? x.val &lt; y.val : x.dist &lt; y.dist;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> node&amp; x, <span class="type">const</span> node&amp; y) &#123;</span><br><span class="line">  <span class="keyword">return</span> x.dist == y.dist &amp;&amp; x.val == y.val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">comp1</span> &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> node&amp; x, <span class="type">const</span> node&amp; y)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.val != y.val ? x.val &gt; y.val : x.dist &gt; y.dist;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">comp2</span> &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> node&amp; x, <span class="type">const</span> node&amp; y)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * x.dist + x.val != <span class="number">2</span> * y.dist + y.val ? <span class="number">2</span> * x.dist + x.val &gt; <span class="number">2</span> * y.dist + y.val : !(x &lt; y || x == y);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">std::multiset&lt;node, comp1&gt; s1;</span><br><span class="line">std::multiset&lt;node, comp2&gt; s2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line">  std::<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    std::<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i].dist);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    std::<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i].val);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    s2.<span class="built_in">insert</span>(a[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> nowdist = <span class="number">0</span>, nowidx = <span class="number">1</span>;</span><br><span class="line">  <span class="type">long</span> <span class="type">long</span> nowans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    <span class="comment">// std::printf(&quot;s1: &quot;);</span></span><br><span class="line">    <span class="comment">// for (auto i : s1) &#123;</span></span><br><span class="line">      <span class="comment">// std::printf(&quot;(%d, %d) &quot;, i.dist, i.val);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// std::printf(&quot;\ns2: &quot;);</span></span><br><span class="line">    <span class="comment">// for (auto i : s2) &#123;</span></span><br><span class="line">      <span class="comment">// std::printf(&quot;(%d, %d) &quot;, i.dist, i.val);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// std::printf(&quot;\n&quot;);</span></span><br><span class="line">    <span class="type">int</span> maxs2 = <span class="number">-1</span>, maxs1 = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (!s2.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">      <span class="keyword">auto</span> begin = s2.<span class="built_in">begin</span>();</span><br><span class="line">      maxs2 = (begin-&gt;dist - nowdist) * <span class="number">2</span> + begin-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!s1.<span class="built_in">empty</span>()) &#123; maxs1 = s1.<span class="built_in">begin</span>()-&gt;val; &#125;</span><br><span class="line">    <span class="keyword">if</span> (maxs2 &lt;= maxs1) &#123;</span><br><span class="line">      <span class="keyword">auto</span> begin = s1.<span class="built_in">begin</span>();</span><br><span class="line">      nowans += begin-&gt;val;</span><br><span class="line">      s1.<span class="built_in">erase</span>(begin);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">auto</span> begin = s2.<span class="built_in">begin</span>();</span><br><span class="line">      <span class="comment">// std::printf(&quot;&#123;%d, %d&#125;\n&quot;, begin-&gt;dist, begin-&gt;val);</span></span><br><span class="line">      nowans += (begin-&gt;dist - nowdist) * <span class="number">2</span> + begin-&gt;val;</span><br><span class="line">      nowdist = begin-&gt;dist;</span><br><span class="line">      <span class="keyword">while</span> (a[nowidx].dist &lt; begin-&gt;dist) &#123;</span><br><span class="line">    	  <span class="comment">// std::printf(&quot;%d %d %s\n&quot;, i, nowidx, s2.find(a[nowidx]) == s2.end() ? &quot;YES&quot; : &quot;NO&quot;);</span></span><br><span class="line">        <span class="keyword">auto</span> find = s2.<span class="built_in">find</span>(a[nowidx]);</span><br><span class="line">        <span class="keyword">if</span> (find == s2.<span class="built_in">end</span>()) &#123;</span><br><span class="line">          nowidx++;</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        s2.<span class="built_in">erase</span>(s2.<span class="built_in">find</span>(a[nowidx]));</span><br><span class="line">        s1.<span class="built_in">insert</span>(a[nowidx]);</span><br><span class="line">        nowidx++;</span><br><span class="line">      &#125;</span><br><span class="line">      s2.<span class="built_in">erase</span>(begin);</span><br><span class="line">    &#125;</span><br><span class="line">    std::<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, nowans);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// namespace mirai</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> mirai::<span class="built_in">main</span>(argc, argv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>贪心</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>愚蠢错误集合</title>
    <url>/2022/03/04/20220304-%E6%84%9A%E8%A0%A2%E9%94%99%E8%AF%AF%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<p>离谱的错误集合，希望不要重蹈覆辙。</p>
<span id="more"></span>
<p>最近更新：2022-03-04</p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>对 C++ 语法特性不了解所致的错误。</p>
<h3 id="自定义-hash-的格式"><a href="#自定义-hash-的格式" class="headerlink" title="自定义 hash 的格式"></a>自定义 hash 的格式</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">custom_hash</span> &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function">std::<span class="type">size_t</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> type&amp; x)</span> <span class="type">const</span> </span>&#123; <span class="comment">// 注意没有 static，且返回值为 std::size_t</span></span><br><span class="line">    <span class="comment">// do something...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>2022-03-04: 因为这个 CE 了半小时。</li>
</ul>
<h2 id="代码编写错误"><a href="#代码编写错误" class="headerlink" title="代码编写错误"></a>代码编写错误</h2><p>在伪代码不会出现而在真实代码会出现的错误。</p>
<h3 id="std-size-t-的倒序枚举"><a href="#std-size-t-的倒序枚举" class="headerlink" title="std::size_t 的倒序枚举"></a><code>std::size_t</code> 的倒序枚举</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (std::<span class="type">size_t</span> i = vec.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">  <span class="comment">// do something...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码当 <code>vec.size() == 0</code> 时会出问题，因为 <code>std::size_t</code> 是无符号整型。</p>
<ul>
<li>2022-03-18: 因为这个调了 15 分钟。</li>
</ul>
<h3 id="平衡树的旋转操作"><a href="#平衡树的旋转操作" class="headerlink" title="平衡树的旋转操作"></a>平衡树的旋转操作</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// ...</span></span><br><span class="line">  tree[u].fa = x;</span><br><span class="line">  tree[x].son[k] = u; <span class="comment">// 注意父子双方都需要被更新</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"> 	tree[u].fa = tree[v].fa;</span><br><span class="line">  <span class="keyword">if</span> (tree[tree[v].fa]) &#123; tree[tree[v].fa].son[k] = u; &#125; <span class="comment">// 注意不要修改 tree[0]</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  tree[root] = <span class="number">0</span>; <span class="comment">// 注意需要保证 tree[root] = 0</span></span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>2022-05-06: WA 了 45 分钟。</li>
</ul>
<h2 id="不符直觉错误"><a href="#不符直觉错误" class="headerlink" title="不符直觉错误"></a>不符直觉错误</h2><p>与预期表现不符的错误。</p>
<h3 id="动态开点的-size-顺序"><a href="#动态开点的-size-顺序" class="headerlink" title="动态开点的 size 顺序"></a>动态开点的 size 顺序</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (l == r) &#123; <span class="comment">/* do something...*/</span> &#125;</span><br><span class="line">  <span class="type">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">  tree[sze] = &#123;<span class="built_in">build</span>(l, mid), <span class="built_in">build</span>(mid + <span class="number">1</span>, r), <span class="number">0</span>&#125;;</span><br><span class="line">  <span class="keyword">return</span> sze++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意上面的赋值语句实际上将值赋给了左儿子（因为递归的时候 <code>sze</code> 并没有改变）。</p>
<p>一个解决方案是开一个临时变量存储。</p>
<ul>
<li>2022-04-22: 卡了一小会。</li>
</ul>
<h3 id="std-lower-bound-传入-non-LegacyRandomAccessIterator-的复杂度"><a href="#std-lower-bound-传入-non-LegacyRandomAccessIterator-的复杂度" class="headerlink" title="std::lower_bound 传入 non-LegacyRandomAccessIterator 的复杂度"></a><code>std::lower_bound</code> 传入 non-<em>LegacyRandomAccessIterator</em> 的复杂度</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::set&lt;<span class="type">int</span>&gt; set;</span><br><span class="line">std::<span class="built_in">lower_bound</span>(set.<span class="built_in">begin</span>(), set.<span class="built_in">end</span>()</span><br></pre></td></tr></table></figure>
<p><code>std::set&lt;&gt;::iterator</code> 是 <em>LegacyForwardIterator</em>，但是不是 <em>LegacyRandomAccessIterator</em>。非常遗憾，<code>std::lower_bound</code> 仍然能 work，但是它是用遍历的方法——</p>
<blockquote>
<p>The number of comparisons performed is logarithmic in the distance between first and last (At most $\log_2(\mathrm{last} - \mathrm{first}) + O(1)$ comparisons). However, for non-<em>LegacyRandomAccessIterators</em>, the number of iterator increments is linear. Notably, <code>std::set</code> and <code>std::multiset</code> iterators are not random access, and so their member functions <code>std::set::lower_bound</code> (resp. <code>std::multiset::lower_bound</code>) should be preferred.</p>
<p>— from <a href="https://en.cppreference.com/w/cpp/algorithm/lower_bound">CppReference</a></p>
</blockquote>
<ul>
<li>2022-05-16: TLE 了好久。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>随机数效率测试</title>
    <url>/2022/03/04/20220304-%E9%9A%8F%E6%9C%BA%E6%95%B0%E6%95%88%E7%8E%87%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<p>随机数效率测试</p>
<span id="more"></span>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000000</span>; ++i) &#123;</span><br><span class="line">    <span class="built_in">test_func</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试命令：<code>-Wall -O0 -fno-ms-extensions -std=c++14</code></p>
<p>编译器：<code>g++ (tdm64-1) 4.9.2</code>（mingw-w64）</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">随机数生成器</th>
<th style="text-align:center">平均运行时间(ns)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>std::minstd_rand0</code></td>
<td style="text-align:center">10.98</td>
</tr>
<tr>
<td style="text-align:center"><code>std::minstd_rand</code></td>
<td style="text-align:center">11.96</td>
</tr>
<tr>
<td style="text-align:center"><code>std::mt19937</code></td>
<td style="text-align:center">11.82</td>
</tr>
<tr>
<td style="text-align:center"><code>std::mt19937_64</code></td>
<td style="text-align:center"><strong>9.93</strong></td>
</tr>
<tr>
<td style="text-align:center"><code>std::ranlux24_base</code></td>
<td style="text-align:center">12.57</td>
</tr>
<tr>
<td style="text-align:center"><code>std::ranlux48_base</code></td>
<td style="text-align:center">10.31</td>
</tr>
<tr>
<td style="text-align:center"><code>std::ranlux24</code></td>
<td style="text-align:center">112.13</td>
</tr>
<tr>
<td style="text-align:center"><code>std::ranlux48</code></td>
<td style="text-align:center">343.49</td>
</tr>
<tr>
<td style="text-align:center"><code>std::knuth_b</code></td>
<td style="text-align:center">21.41</td>
</tr>
<tr>
<td style="text-align:center"><code>std::rand</code></td>
<td style="text-align:center">10.69</td>
</tr>
<tr>
<td style="text-align:center"><code>shift32</code></td>
<td style="text-align:center">8.30</td>
</tr>
<tr>
<td style="text-align:center"><code>shift64</code></td>
<td style="text-align:center">7.58</td>
</tr>
</tbody>
</table>
</div>
<p><code>shift32</code>，<code>shift64</code> 如下（感谢 zez 同学提供）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::<span class="type">uint64_t</span> x;</span><br><span class="line"><span class="function">std::<span class="type">uint64_t</span> <span class="title">shift64</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  x ^= x &lt;&lt; <span class="number">13</span>;</span><br><span class="line">  x ^= x &gt;&gt; <span class="number">17</span>;</span><br><span class="line">  x ^= x &lt;&lt; <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line">std::<span class="type">uint32_t</span> y;</span><br><span class="line"><span class="function">std::<span class="type">uint32_t</span> <span class="title">shift32</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  y ^= y &lt;&lt; <span class="number">13</span>;</span><br><span class="line">  y ^= y &gt;&gt; <span class="number">17</span>;</span><br><span class="line">  y ^= y &lt;&lt; <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>LOJ6674 赛道修建</title>
    <url>/2022/03/18/20220318-LOJ6674-%E8%B5%9B%E9%81%93%E4%BF%AE%E5%BB%BA/</url>
    <content><![CDATA[<p>一道暴力 bitset 配合 DP 的题。</p>
<p>以后遇到这种题应当考虑使用 bitset。</p>
<span id="more"></span>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一棵树，其中有若干个点被钦定是好的。称一条长度可为 $0$ 的有向简单路径是好的，当且仅当这个路径的终点为好的。对于每个点 $u$，以它为起点的好路径可能有很多条，请分别计算出长度种类数。</p>
<p>$n\le 50000$，TL 3s，ML 1G。</p>
<p>link: <a href="https://loj.ac/p/6674">https://loj.ac/p/6674</a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>暴力地对每个点维护一个 bitset 来统计每个长度是否出现过。</p>
<p>首先维护一个 $f<em>u$ 表示只考虑子树 $u$ 时 $u$ 的长度出现情况。容易推出转移式 $f_u=\left(\left(\mathop\odot\limits</em>{v\in\operatorname{son}_u}f_v\right)\ll 1\right)\odot c_u$，其中 $c_u$ 是 $u$ 是否被钦定，$\odot$ 是按位或。</p>
<p>接下来维护一个 $g<em>u$ 表示子树 $u$ 以外的点对 $u$ 的长度出现情况。容易推出转移式 $g_u=(g</em>{\operatorname{fa}(u)}\ll 1)\odot\mathop\odot\limits<em>{v\in\operatorname{son}</em>{\operatorname{fa}(u)}\land v\ne u} (f_v\ll 2)$。不过后一个和式不好转移。</p>
<p>考虑给每个结点的儿子定序，则每个结点所需的值为其前面所有兄弟以及后面所有兄弟之按位或。维护一个全局的暂存 bitset，先从前往后扫一遍，一边维护前缀或一边按位或给儿子的 $g$ 值；再从后往前扫一遍。这样仅需要存 $2n+O(1)$ 个长为 $n$ 的 bitset，预计空间约为 625MB，可以通过本题。</p>
<p>@<a href="https://loj.ac/u/kunyi">kunyi</a> 同学提供了一个做法：维护 $3n+O(1)$ 个长为 $\dfrac n2$ 的 bitset，预计空间 468.75MB，由于数据比较水就过了……</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>link: <a href="https://loj.ac/s/1415501">https://loj.ac/s/1415501</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> mirai &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> MAXN = <span class="number">50005</span>;</span><br><span class="line"><span class="type">int</span> can[MAXN], fa[MAXN], ans[MAXN];</span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt; graph[MAXN];</span><br><span class="line">std::bitset&lt;MAXN&gt; buf, son[MAXN], anc[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> f)</span> </span>&#123;</span><br><span class="line">  fa[u] = f;</span><br><span class="line">  son[u][<span class="number">0</span>] = can[u];</span><br><span class="line">  <span class="keyword">for</span> (std::<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; graph[u].<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (graph[u][i] == f) &#123;</span><br><span class="line">      graph[u].<span class="built_in">erase</span>(graph[u].<span class="built_in">cbegin</span>() + i);</span><br><span class="line">      --i;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(graph[u][i], u);</span><br><span class="line">    son[u] |= son[graph[u][i]] &lt;&lt; <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">  anc[u][<span class="number">0</span>] = can[u];</span><br><span class="line">  ans[u] = (son[u] | anc[u]).<span class="built_in">count</span>();</span><br><span class="line">  buf = anc[u];</span><br><span class="line">  <span class="keyword">for</span> (std::<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; graph[u].<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">    anc[graph[u][i]] |= buf &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    buf |= son[graph[u][i]] &lt;&lt; <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  buf = anc[u];</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = graph[u].<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">    anc[graph[u][i]] |= buf &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    buf |= son[graph[u][i]] &lt;&lt; <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> i : graph[u]) &#123;</span><br><span class="line">    <span class="built_in">dfs2</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line">  std::<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    std::<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;can[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="type">int</span> u, v;</span><br><span class="line">    std::<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">    graph[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">    graph[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  anc[<span class="number">1</span>] = can[<span class="number">1</span>];</span><br><span class="line">  <span class="built_in">dfs2</span>(<span class="number">1</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    std::<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// namespace mirai</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> mirai::<span class="built_in">main</span>(argc, argv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>DP</category>
      </categories>
      <tags>
        <tag>bitset</tag>
        <tag>树形DP</tag>
      </tags>
  </entry>
  <entry>
    <title>GD省选真题练习</title>
    <url>/2022/03/25/20220325-GD%E7%9C%81%E9%80%89%E7%9C%9F%E9%A2%98%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<p>往年 GD 省选练习。</p>
<span id="more"></span>
<h2 id="2021-D1T1-卡牌游戏"><a href="#2021-D1T1-卡牌游戏" class="headerlink" title="2021 D1T1 卡牌游戏"></a>2021 D1T1 卡牌游戏</h2><p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD<br>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p>
<h1 id="简单二分题，由于误记了-RMQ-的复杂度而与正解失之交臂。"><a href="#简单二分题，由于误记了-RMQ-的复杂度而与正解失之交臂。" class="headerlink" title="简单二分题，由于误记了 RMQ 的复杂度而与正解失之交臂。"></a>简单二分题，由于误记了 RMQ 的复杂度而与正解失之交臂。</h1><p>一道简单二分题，由于误记了 RMQ 的复杂度而与正解失之交臂。</p>
<h1 id="gt-gt-gt-gt-gt-gt-gt-0ba721313a0b44445d4541e4245f1de71c394482"><a href="#gt-gt-gt-gt-gt-gt-gt-0ba721313a0b44445d4541e4245f1de71c394482" class="headerlink" title="&gt;&gt;&gt;&gt;&gt;&gt;&gt; 0ba721313a0b44445d4541e4245f1de71c394482"></a>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 0ba721313a0b44445d4541e4245f1de71c394482</h1><p>一道简单二分题，由于误记了 RMQ 的复杂度而与正解失之交臂。</p>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>0ba721313a0b44445d4541e4245f1de71c394482</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<p>一定要留心静态可能导致的复杂度的降低。</p>
<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定 $n$ 张牌，正反面各有一个数字，一开始正面朝上。试在不超过 $m$ 次翻转牌的操作内，最小化朝上数字的极差。</p>
<p>$n\le 10^6$，值域 $[1,10^9]$，$2n$ 个数互不相同，输入时已按照正面数字排序。</p>
<p>link: <a href="https://uoj.ac/problem/624">https://uoj.ac/problem/624</a></p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先二分答案，这是 $\Theta(\log n)$ 的，由于本题较为卡常，$\Theta(\log w)$ 不一定能过；</p>
<p>对于判定，考虑使用双指针从左往右维护无需翻转的卡牌区间，对于剩下的判断背面的数字是否都在卡牌区间内（使用 ST 表），如果是就更新当前答案。</p>
<p>时间复杂度 $\Theta(n\log n)$。</p>
<p>代码：<a href="https://uoj.ac/submission/542476">https://uoj.ac/submission/542476</a></p>
<p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p>
<h1 id="lt-lt-lt-lt-lt-lt-lt-HEAD"><a href="#lt-lt-lt-lt-lt-lt-lt-HEAD" class="headerlink" title="&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD"></a>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</h1><p>=======</p>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>0ba721313a0b44445d4541e4245f1de71c394482</p>
<h2 id="2021-D1T2-矩阵游戏"><a href="#2021-D1T2-矩阵游戏" class="headerlink" title="2021 D1T2 矩阵游戏"></a>2021 D1T2 矩阵游戏</h2></blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<p>一道巧妙的思维题。其中将构造问题变为转化问题的思想值得学习。</p>
<h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>给定一个 $(n-1)\times (m-1)$ 的矩阵 $b<em>{i,j}$，请构造出 $n\times m$ 的矩阵 $a</em>{i,j}$ 满足 $\forall i\in[1,n),j\in[1,m):b<em>{i,j}=a</em>{i,j}+a<em>{i,j+1}+a</em>{i+1,j}+a<em>{i+1,j+1}$，要求矩阵 $a</em>{i,j}$ 的每一个数都在 $[0,10^6]$ 内。如果无解则输出 <code>NO</code>。</p>
<p>多测，$T\le 10$，$2\le n,m\le 300$，$0\le b_{i,j}\le 4\times 10^6$，输入的数都是整数。</p>
<p>link: <a href="https://uoj.ac/problem/625">https://uoj.ac/problem/625</a></p>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>若除去 $[0,10^6]$ 的限制，构造将是平凡的：只需将了第一行、第一列的都置为 $0$，剩下的差分一下即可。通过观察可以发现：将矩阵 $a<em>{i,j}$ 一行/一列的每个元素依次 $+\delta,-\delta,+\delta,-\delta,\dots$ 后，矩阵 $a</em>{i,j}$ 依然满足性质。</p>
<p>设一开始构造的矩阵为 $d<em>{i,j}$，第 $i$ 行的 $\delta$ 为 $r_i$，第 $j$ 列的 $\delta $ 为 $c_i$，则 $a</em>{i,j}=d<em>{i,j}+(-1)^{j+1}r_i+(-1)^{i+1}c_j$。如果 $r_i$ 和 $c_j$ 的符号不同，就是简单的差分约束系统，问题是有相同的符号情况。解决也非常的容易：将偶数列、奇数行的 $\delta$ 变号，那么 $a</em>{i,j}=d_{i,j}+(-1)^{i+j+1}r_i+(-1)^{i+j}c_i$。差分约束即可。</p>
<p>时间复杂度 $O(Tnm(n+m))$。</p>
<p>代码：<a href="https://uoj.ac/submission/542585">https://uoj.ac/submission/542585</a></p>
<h2 id="2021-D1T3-图函数"><a href="#2021-D1T3-图函数" class="headerlink" title="2021 D1T3 图函数"></a>2021 D1T3 图函数</h2><p>一道简单图论题。删边变加边的思路应用很广。</p>
<h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><p>给定一张有向图 $G$，点有标号。对于其上一点 $u$，定义 $f(u,G)$ 如下：</p>
<ol>
<li>首先初始化计数器 $c\gets 0$，并令 $G’\gets G$；</li>
<li>接着按编号从小到大枚举顶点 $v$，如果 $u$ 和 $v$ 双联通则 $c\gets c+1$，并从 $G’$ 中删去 $v$ 及其联通的边。</li>
<li>$f(u,G)$ 就是最终 $c$ 的值。</li>
</ol>
<p>给定一张有向图 $G$，点、边皆有标号，定义 $h(G)=\sum\limits_{u\in V}f(u,G)$。求 $h(G)$。</p>
<p>进一步地，定义 $G_i$ 为删去第 $1$ 到第 $i$ 条边的图，对每个 $i\in[1,|E|]$ 求 $h(G_i)$。</p>
<p>$|V|\le 1000$，$|E|\le 2\times 10^5$。</p>
<p>link: <a href="https://uoj.ac/problem/626">https://uoj.ac/problem/626</a></p>
<h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>首先考虑 $f(u,G)$ 的意义：对于每个 $[1,u]$ 中的 $v$，是否存在不经过 $[1,v)$ 的、$u\to v$ 和 $v\to u$ 的路径。考虑建 $n$ 张图 $H_i$，第 $i$ 张图表示仅保留 $G$ 中 $[i,n]$ 的点所构成的子图。我们考虑 $h(G)$，先枚举 $v$ 后枚举 $u$，即对每个 $i$ 统计 $H_i$ 中 $i$ 与多少个点双联通。再建 $n$ 张图 $H_i’$，$H_i’$ 为 $H_i$ 的反图，那么只需要考虑 $H_i$ 和 $H_i’$ 中 $i$ 能到达的点集的交集大小。</p>
<p>然后考虑删边。删边后连通性维护比较难，但是加边后连通性维护非常容易。如果加了一条边 $i\to j$，如果 $i$ 能从起点到达而 $j$ 不能，就从 $j$ 开始 BFS 一边，标记上所有的点。这样复杂度是 $O(n+m)$ 的。</p>
<p>于是我们只需要枚举 $v$，然后倒序加边，每次加边如果需要暴力 BFS 就直接上，否则不管。注意要维护新打标记的点，如果 $H_i$ 和 $H_i’$ 都有新的点被打标记，新增的合法点数要减去同时在两张图里被新打标记的点，因为它们被统计了两次。</p>
<p>时间复杂度 $O(n(n+m))$，常数可能比较大，邻接表跑不过，用了链式前向星才过的。</p>
<p>代码：<a href="https://uoj.ac/submission/548580">https://uoj.ac/submission/548580</a></p>
<h2 id="2021-D2T1-宝石"><a href="#2021-D2T1-宝石" class="headerlink" title="2021 D2T1 宝石"></a>2021 D2T1 宝石</h2><p>一道简单树上问题。注意这种 DFS 中实时维护树上询问的方法。</p>
<h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><p>给定一棵树，点有点权 $w_i$，给定一个序列 ${P_c}$。共有 $q$ 组询问，每次询问给出一条有向简单路径 $u\to v$，设所经过的结点的点权组成的序列 $p_i$，求 ${P_c}$ 的最长的、为 $p_i$ 子序列的前缀的长度。</p>
<p>$n,q\le 2\times 10^5$，$1\le c,w_i\le 5\times 10^4$，$1\le P_i\le \max{w_i}$，$P_i$ 互不相同，TL 2s。</p>
<p>link: <a href="https://uoj.ac/problem/628">https://uoj.ac/problem/628</a></p>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路 1"></a>思路 1</h3><p>首先为了方便，将 $w_i$ 重排使得 $P_i=i$。</p>
<p>先考虑链上的做法。维护每个 $w_i&lt; c$ 的结点 $i$ 的向后的最近的比它恰多 $1$ 的点的位置 $nxt_i$，然后倍增预处理 $nxt$，对于 $[l,r]$ 的查询，先找到 $l$ 后面的最近的 $1$（可线性预处理），然后再从那个 $1$ 倍增地、不超过 $r$ 地往后跳。</p>
<p>对于树上的做法，我们分开上链 $u\to l$ 和下链 $l\to v$ 分别考虑。上链可以直接照搬链上的做法，预处理只需要维护 $\max{w_i}$ 个栈，DFS 一遍即可找到祖先中最近的 $1$、祖先中最近的后继。</p>
<p>对于下链，考虑二分答案。假设当前需要验证的答案为 $ans_t$，那么首先找到 $v$ 的祖先中最近的 $ans_t$，接着不断的往上跳，看是否能跳到 $preans+1$，其中 $preans$ 是上链的答案。（也先线性预处理祖先中最近的前驱）</p>
<p>问题是怎么找到祖先中最近的 $ans_t$。只需对每个点开一个可持久化权值线段树，每个点的树都是父亲的树在 $w_i$ 位置上修改为 $i$ 所得到的。查询直接在 $v$ 的树上查 $ans_t$ 的值即可。</p>
<p>时间复杂度 $O(n\log n+q\log n\cdot\log m)$，空间复杂度 $O(n\log n)$。虽然复杂度较劣且常数较大，但是仍然可以通过此题。</p>
<p>代码：<a href="https://uoj.ac/submission/549220">https://uoj.ac/submission/549220</a></p>
<h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路 2"></a>思路 2</h3><p>仍然沿用上面的做法，但是不建可持久化权值线段树。处理下链的时候仍然在 DFS 过程中维护栈，DFS 到 $v$ 的时候就处理 $v$ 的询问。</p>
<p>时间复杂度 $O((n+q)\log nm)$。</p>
<h2 id="2021-D2T2-滚榜"><a href="#2021-D2T2-滚榜" class="headerlink" title="2021 D2T2 滚榜"></a>2021 D2T2 滚榜</h2><p>一道简单状态压缩 DP 题。注意这种“费用提前计算” trick。</p>
<h3 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h3><p>给定一个长为 $n$ 的正整数序列 $a_i$，有 $i$ 条对其的操作，第 $i$ 条为 $a_i\gets a_i+b_i$。对于下标 $i$ 和 $j$（$i\ne j$），定义序 $i\succ j$ 当且仅当 $a_i&gt; a_j$，或 $a_i=a_j$ 且 $i&lt; j$。现在自然数 $b_i$ 可以在 $\sum\limits_ib_i=m$ 的前提下任意改变，操作的顺序可以在 $b_i$ 不严格递增的前提下任意重排，但要求每次对 $k$ 操作后 $k$ 是在序 $\succ$ 下的最前值。</p>
<p>求最后所有 $i\in[1,n]\cap\mathbb Z$ 在 $\succ$ 下排列的结果的本质不同的种类数。</p>
<p>$n\le 13$，$m\le 500$，$a_i\le 10^4$。</p>
<p>link: <a href="https://uoj.ac/problem/629">https://uoj.ac/problem/629</a></p>
<h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>首先看到 $n\le 13$ 容易知道会使用状态压缩 DP。朴素地设状态 $f_{S,lmax,maxi,rest}$ 表示不合法的种类数，$S$ 为当前还未操作的下标集，$lmax$ 为当前操作前最大值，$maxi$ 为操作前最大值的下标，$rest$ 为最初的 $m$ 还剩多少可以给余下的 $b_i$。状态数不小于 $2^{13}\times 10^4\times 13\times 500$，而我们知道 $\log_2(13!)\approx 32.536$，因而至少需要 $1.97\text{ TiB}$ 的空间，无法通过此题 $512\text{ MiB}$ 的空间限制。</p>
<p>考虑优化：设初始最大值为 $\max_0$，则注意到在 $b_i$ 的最优分配（尽可能有解）的情况下每次操作最多使最大值增加 $1$，因而 $lmax$ 的可能取值只有 $14$ 个，空间可以被优化到 $2.82\text{ GiB}$，但仍然无法通过。</p>
<p>写出转移式后容易发现，如果知道当前枚举的操作的下标 $i$ 所需的 $b<em>i$ 相较 $b</em>{maxi}$ 相差多少，那么就可以在每次增加 $b_i$ 的时候将 $rest$ 事先为后操作的所有下标都提前减去值。经过推导不难发现，如果当前最大值下标为 $i$，而将要操作的下标为 $j$，则 $b_j$ 的所需值与 $b_i$ 的所需值为定值 $\max{a_i-a_j+[i&lt; j],0}$。若设之为 $d(i,j)$，则可以省去 $lmax$ 这一维，转移方程如下：</p>
<script type="math/tex; mode=display">
f_{S,maxi,rest}\gets \sum\limits_{u\in S}
\begin{cases}
f_{S-\{u\},u,rest-|S|\cdot d(i,j)}&\text{if }rest\ge |S|\cdot d(i,j)\\
(|S|-1)!&\text{otherwise}
\end{cases}</script><p>边界情况为 $f<em>{\varnothing,maxi,rest}\gets 0$，最终答案为 $n!-f</em>{[1,n],\max_0,m}$。</p>
<p>时间复杂度 $O(2^nn^2m)$，空间复杂度 $O(2^nnm)$，实际存储可以使用 64 位整数存储 $2^{13}\times 13\times 501$ 个状态，共约 $407\text{ MiB}$，可以通过此题。</p>
<p>实现上还需注意常数，有两种方法：</p>
<ul>
<li>在枚举 $u$ 时不从 $1$ 到 $n$ 枚举后再判断是否在 $S$ 内，而是仅枚举 $S$ 内的元素，具体实现可以不断地取 $\operatorname{lowbit}(S)$ 得到，理论上能让常数变为 $\dfrac12$ 倍；</li>
<li>在从小到大枚举 $rest$ 的时候若 $f_{S,maxi,rest}=0$ 则不再继续枚举更大的 $rest$，实测仅此优化能通过此题。</li>
</ul>
<p>代码：<a href="https://uoj.ac/submission/549614">https://uoj.ac/submission/549614</a></p>
<h2 id="2021-D2T3-支配"><a href="#2021-D2T3-支配" class="headerlink" title="2021 D2T3 支配"></a>2021 D2T3 支配</h2><p>一道简单图论题。</p>
<h3 id="题意-5"><a href="#题意-5" class="headerlink" title="题意"></a>题意</h3><p>给定一个 $n$ 个点、$m$ 条边的有向图 $G$，定义顶点 $u$ 支配顶点 $v$ 当且仅当在 $G$ 中删去 $u$ 及与其相关的边后 $1$ 无法到达 $v$。特别地，$u$ 恒支配 $u$。设支配 $u$ 的点集为 $D_u$，现有 $q$ 次互相独立的询问，每次询问给出 $u$，$v$，问在 $G$ 中添加 $u\to v$ 这条边后有多少个点 $i$ 的 $D_i$ 发生了变化。</p>
<p>$n\le 3000$，$m\le 2n$，$q\le 2\times 10^4$。</p>
<p>link: <a href="https://uoj.ac/problem/630">https://uoj.ac/problem/630</a></p>
<h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><p>为了方便表述，用 $u\rightarrowtail v$ 描述 $u$ 支配 $v$，用 $u \rightsquigarrow v$ 描述 $u$ 到 $v$ 的一条路径。</p>
<p>首先容易注意到支配关系的以下性质：</p>
<ol>
<li>传递性：若 $u\rightarrowtail v$，$v\rightarrowtail w$，则 $u\rightarrowtail w$；</li>
<li>若以 $\rightarrowtail $ 为序给 $D<em>u$ 排序为 $k_1,k_2,\dots,k_i$，$k_i=u$，则所有能到达 $u$ 的点所构成的子图一定呈 $1\to G_0\to k_1\to G_1\to k_2\cdots k</em>{i-1}\to G<em>{i-1}\to k_i$，且 $k_j$ 支配 $G_j,G</em>{j+1},\dots,G_{i-1}$ 内的所有点。</li>
</ol>
<p>考虑增加边 $u\to v$ 会对哪些点的受支配集发生变化。假设 $t$ 原先不被 $k$ 支配，加边后被 $k$ 支配，这是不可能的，因为加边不会使得原先 $1\rightsquigarrow t$ 的路径断掉，若原先存在不经过 $k$ 的路径加边后也会存在。</p>
<p>于是只有这种情况：$t$ 原先被 $k$ 支配，加边后不被 $k$ 支配。即，加边后存在一条 $1\rightsquigarrow u\to v\rightsquigarrow t$ 的路径不经过 $k$。于是若 $1$ 无法到达 $u$ 可以直接输出 $0$。</p>
<p>考虑枚举 $u$ 的可达点 $t$，每次判断是否存在一个 $u\to v$ 能“绕过”的支配点 $k$。注意到如果 $k$ 支配 $u$ 则 $u\to v$ 一定无法“绕过”，若 $k$ 不支配 $v$ 也无法绕过，因而 $k$ 是一个支配 $v$ 但不支配 $u$ 的点。注意到如果 $k’$ 和 $k$ 都满足这个性质且 $k\ne k’$，则 $k\rightarrowtail k’$ 和 $k’\rightarrowtail k$ 一定有且仅有一个成立。容易知道，在这里 $k\rightarrowtail k’$ 的充要条件是 $|D<em>k|&lt; |D</em>{k’}|$。于是仅需在支配 $v$ 且不支配 $u$ 的点中寻找受支配集最小的点即可。</p>
<p>假设寻找到了 $k$，只需检查在 $v$ 能在不经过 $k$ 的情况下到达的结点数即可。以 $v$ 为起点，不经过 $k$ 地 BFS，最后检查可达的结点即可。</p>
<p>注意实现细节：直接开 $n^2$ 的数组存储支配信息、支配集，不要使用 <code>std::set</code>/<code>std::unordered_set</code> 存储。</p>
<p>时间复杂度 $O(qn)$，空间复杂度 $O(n^2)$。</p>
<p>代码：<a href="https://uoj.ac/submission/549893">https://uoj.ac/submission/549893</a></p>
<p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p>
<h1 id="gt-gt-gt-gt-gt-gt-gt-0ba721313a0b44445d4541e4245f1de71c394482-1"><a href="#gt-gt-gt-gt-gt-gt-gt-0ba721313a0b44445d4541e4245f1de71c394482-1" class="headerlink" title="&gt;&gt;&gt;&gt;&gt;&gt;&gt; 0ba721313a0b44445d4541e4245f1de71c394482"></a>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 0ba721313a0b44445d4541e4245f1de71c394482</h1><blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>0ba721313a0b44445d4541e4245f1de71c394482</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
]]></content>
      <categories>
        <category>真题</category>
      </categories>
      <tags>
        <tag>真题</tag>
        <tag>RMQ</tag>
        <tag>二分</tag>
      </tags>
  </entry>
  <entry>
    <title>哈希表效率测试</title>
    <url>/2022/03/25/20220325-%E5%93%88%E5%B8%8C%E8%A1%A8%E6%95%88%E7%8E%87%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<p>结论似乎是 <code>__gnu_pbds::gp_hash_table</code> 更快。在没有 <code>__gnu_pbds</code> 的情况下手打似乎效率高超。</p>
<span id="more"></span>
<p>实验数据 1（各 600000 次操作，单位 ms，禁用优化）：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">容器</th>
<th style="text-align:center"><code>insert</code></th>
<th style="text-align:center"><code>find</code></th>
<th style="text-align:center"><code>find</code>（失败）</th>
<th style="text-align:center"><code>at</code></th>
<th style="text-align:center"><code>at</code>（越界）</th>
<th style="text-align:center"><code>operator[]</code></th>
<th style="text-align:center"><code>operator[]</code>（新建）</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>std::map&lt;int, int&gt;</code></td>
<td style="text-align:center">289</td>
<td style="text-align:center">150</td>
<td style="text-align:center">213</td>
<td style="text-align:center">157</td>
<td style="text-align:center">1253</td>
<td style="text-align:center">157</td>
<td style="text-align:center">362</td>
</tr>
<tr>
<td style="text-align:center"><code>std::unordered_map&lt;int, int&gt;</code></td>
<td style="text-align:center">136</td>
<td style="text-align:center">30</td>
<td style="text-align:center">28</td>
<td style="text-align:center">31</td>
<td style="text-align:center">1041</td>
<td style="text-align:center">32</td>
<td style="text-align:center">171</td>
</tr>
<tr>
<td style="text-align:center"><code>std::unordered_map&lt;int, int, custom_hash&gt;</code></td>
<td style="text-align:center">121</td>
<td style="text-align:center">29</td>
<td style="text-align:center">24</td>
<td style="text-align:center">32</td>
<td style="text-align:center">1076</td>
<td style="text-align:center">30</td>
<td style="text-align:center">156</td>
</tr>
<tr>
<td style="text-align:center"><code>std::multimap&lt;int, int&gt;</code></td>
<td style="text-align:center">265</td>
<td style="text-align:center">149</td>
<td style="text-align:center">214</td>
<td style="text-align:center">N/A</td>
<td style="text-align:center">N/A</td>
<td style="text-align:center">N/A</td>
<td style="text-align:center">N/A</td>
</tr>
<tr>
<td style="text-align:center"><code>std::unordered_multimap&lt;int, int&gt;</code></td>
<td style="text-align:center">152</td>
<td style="text-align:center">33</td>
<td style="text-align:center">28</td>
<td style="text-align:center">N/A</td>
<td style="text-align:center">N/A</td>
<td style="text-align:center">N/A</td>
<td style="text-align:center">N/A</td>
</tr>
<tr>
<td style="text-align:center"><code>std::unordered_multimap&lt;int, int, custom_hash&gt;</code></td>
<td style="text-align:center">167</td>
<td style="text-align:center">43</td>
<td style="text-align:center">11</td>
<td style="text-align:center">N/A</td>
<td style="text-align:center">N/A</td>
<td style="text-align:center">N/A</td>
<td style="text-align:center">N/A</td>
</tr>
<tr>
<td style="text-align:center"><code>__gnu_pbds::gp_hash_table&lt;int, int&gt;</code></td>
<td style="text-align:center">69</td>
<td style="text-align:center">12</td>
<td style="text-align:center">10</td>
<td style="text-align:center">N/A</td>
<td style="text-align:center">N/A</td>
<td style="text-align:center">14</td>
<td style="text-align:center">64</td>
</tr>
<tr>
<td style="text-align:center"><code>__gnu_pbds::cc_hash_table&lt;int, int&gt;</code></td>
<td style="text-align:center">89</td>
<td style="text-align:center">15</td>
<td style="text-align:center">7</td>
<td style="text-align:center">N/A</td>
<td style="text-align:center">N/A</td>
<td style="text-align:center">13</td>
<td style="text-align:center">86</td>
</tr>
<tr>
<td style="text-align:center"><code>self_implement_hash_table&lt;int, int&gt;</code></td>
<td style="text-align:center">95</td>
<td style="text-align:center">25</td>
<td style="text-align:center">36</td>
<td style="text-align:center">21</td>
<td style="text-align:center">1006</td>
<td style="text-align:center">23</td>
<td style="text-align:center">104</td>
</tr>
</tbody>
</table>
</div>
<p>经实验，<code>__gnu_pbds::gp_hash_table&lt;int, int&gt;</code> 的 find（失败）测试在大约 $660000$ 后速度会大量降低，本人尚未发现原因。</p>
<p>实验数据 2（各 1000000 次操作，单位 ms，开启 O2 优化）：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">容器</th>
<th style="text-align:center"><code>insert</code></th>
<th style="text-align:center"><code>find</code></th>
<th style="text-align:center"><code>find</code>（失败）</th>
<th style="text-align:center"><code>at</code></th>
<th style="text-align:center"><code>at</code>（越界）</th>
<th style="text-align:center"><code>operator[]</code></th>
<th style="text-align:center"><code>operator[]</code>（新建）</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>std::map&lt;int, int&gt;</code></td>
<td style="text-align:center">89</td>
<td style="text-align:center">49</td>
<td style="text-align:center">29</td>
<td style="text-align:center">51</td>
<td style="text-align:center">1572</td>
<td style="text-align:center">48</td>
<td style="text-align:center">86</td>
</tr>
<tr>
<td style="text-align:center"><code>std::unordered_map&lt;int, int&gt;</code></td>
<td style="text-align:center">60</td>
<td style="text-align:center">9</td>
<td style="text-align:center">11</td>
<td style="text-align:center">9</td>
<td style="text-align:center">1607</td>
<td style="text-align:center">7</td>
<td style="text-align:center">68</td>
</tr>
<tr>
<td style="text-align:center"><code>std::unordered_map&lt;int, int, custom_hash&gt;</code></td>
<td style="text-align:center">69</td>
<td style="text-align:center">10</td>
<td style="text-align:center">14</td>
<td style="text-align:center">10</td>
<td style="text-align:center">1656</td>
<td style="text-align:center">10</td>
<td style="text-align:center">77</td>
</tr>
<tr>
<td style="text-align:center"><code>std::multimap&lt;int, int&gt;</code></td>
<td style="text-align:center">82</td>
<td style="text-align:center">48</td>
<td style="text-align:center">26</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><code>std::unordered_multimap&lt;int, int&gt;</code></td>
<td style="text-align:center">62</td>
<td style="text-align:center">9</td>
<td style="text-align:center">10</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><code>std::unordered_multimap&lt;int, int, custom_hash&gt;</code></td>
<td style="text-align:center">76</td>
<td style="text-align:center">14</td>
<td style="text-align:center">6</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><code>__gnu_pbds::gp_hash_table&lt;int, int&gt;</code></td>
<td style="text-align:center">23</td>
<td style="text-align:center">&lt;1</td>
<td style="text-align:center">&lt;1</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">1</td>
<td style="text-align:center">&gt;20000</td>
</tr>
<tr>
<td style="text-align:center"><code>__gnu_pbds::cc_hash_table&lt;int, int&gt;</code></td>
<td style="text-align:center">60</td>
<td style="text-align:center">5</td>
<td style="text-align:center">2</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">4</td>
<td style="text-align:center">76</td>
</tr>
<tr>
<td style="text-align:center"><code>self_implement_hash_table&lt;int, int&gt;</code></td>
<td style="text-align:center">36</td>
<td style="text-align:center">7</td>
<td style="text-align:center">10</td>
<td style="text-align:center">34</td>
<td style="text-align:center">5319</td>
<td style="text-align:center">9</td>
<td style="text-align:center">41</td>
</tr>
</tbody>
</table>
</div>
<p><code>operator[]</code>（新建）是最后一个被运行的测试。即，容器在执行中间 5 种访问时大小都是 $600000$，而非 $120000$。</p>
<p>测试机配置：AMD Ryzen 5 3600 6-Core Processor 3.60GHz, 8.00 GB RAM</p>
<p>环境配置：Windows 10 企业版 LTSC 1809 (x64)</p>
<p>编译器配置：<code>g++ (tdm64-1) 4.9.2</code>（mingw-w64）</p>
<p>编译选项：<code>-Wall -lm -O0/-O2 -DMIRAI_LOCAL -std=c++14 -fno-ms-extensions</code></p>
<p>测试代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ext/pb_ds/assoc_container.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ext/pb_ds/hash_policy.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdexcept&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> mirai &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> type&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">custom_hash</span> &#123;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">custom_hash</span>&lt;<span class="type">int</span>&gt; &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function">std::<span class="type">size_t</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; x)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x ^ <span class="number">0x14273913</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; umap;</span><br><span class="line">std::unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>, custom_hash&lt;<span class="type">int</span>&gt;&gt; umap2;</span><br><span class="line">std::unordered_multimap&lt;<span class="type">int</span>, <span class="type">int</span>&gt; ummap;</span><br><span class="line">std::unordered_multimap&lt;<span class="type">int</span>, <span class="type">int</span>, custom_hash&lt;<span class="type">int</span>&gt;&gt; ummap2;</span><br><span class="line">std::map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; map;</span><br><span class="line">std::multimap&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mmap;</span><br><span class="line">__gnu_pbds::gp_hash_table&lt;<span class="type">int</span>, <span class="type">int</span>&gt; ghash;</span><br><span class="line">__gnu_pbds::cc_hash_table&lt;<span class="type">int</span>, <span class="type">int</span>&gt; chash;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> MAXT = <span class="number">123179</span>;</span><br><span class="line">std::vector&lt;std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; buckets[MAXT];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;std::map&lt;int, int&gt;: \n&quot;</span>);</span><br><span class="line">  <span class="type">int</span> ninsert = <span class="number">600000</span>, nat = <span class="number">600000</span>, nat2 = <span class="number">600000</span>, nopat = <span class="number">600000</span>, nopat2 = <span class="number">600000</span>, nfind = <span class="number">600000</span>, nfind2 = <span class="number">600000</span>;</span><br><span class="line">  <span class="keyword">auto</span> begin = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= ninsert; ++i) &#123;</span><br><span class="line">    map.<span class="built_in">insert</span>(&#123;i, i&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">auto</span> end = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;insert: %lldms  \n&quot;</span>, std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(end - begin).<span class="built_in">count</span>());</span><br><span class="line">  begin = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= nfind; ++i) &#123;</span><br><span class="line">    map.<span class="built_in">find</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">  end = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;find: %lldms  \n&quot;</span>, std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(end - begin).<span class="built_in">count</span>());</span><br><span class="line">  begin = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= nfind2; ++i) &#123;</span><br><span class="line">    map.<span class="built_in">find</span>(i + <span class="number">100000000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  end = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;find2: %lldms  \n&quot;</span>, std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(end - begin).<span class="built_in">count</span>());</span><br><span class="line">  begin = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= nat; ++i) &#123;</span><br><span class="line">    map.<span class="built_in">at</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">  end = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;at: %lldms  \n&quot;</span>, std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(end - begin).<span class="built_in">count</span>());</span><br><span class="line">  begin = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= nat2; ++i) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      map.<span class="built_in">at</span>(i + <span class="number">100000000</span>);</span><br><span class="line">    &#125; <span class="built_in">catch</span> (...) &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  end = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;at2: %lldms  \n&quot;</span>, std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(end - begin).<span class="built_in">count</span>());</span><br><span class="line">  begin = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= nopat; ++i) &#123;</span><br><span class="line">    map[i];</span><br><span class="line">  &#125;</span><br><span class="line">  end = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;opat: %lldms  \n&quot;</span>, std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(end - begin).<span class="built_in">count</span>());</span><br><span class="line">  begin = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= nopat2; ++i) &#123;</span><br><span class="line">    map[i + <span class="number">100000000</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  end = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;opat2: %lldms\n\n&quot;</span>, std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(end - begin).<span class="built_in">count</span>());</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;std::multimap&lt;int, int&gt;: \n&quot;</span>);</span><br><span class="line">  begin = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= ninsert; ++i) &#123;</span><br><span class="line">    mmap.<span class="built_in">insert</span>(&#123;i, i&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  end = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;insert: %lldms  \n&quot;</span>, std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(end - begin).<span class="built_in">count</span>());</span><br><span class="line">  begin = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= nfind; ++i) &#123;</span><br><span class="line">    mmap.<span class="built_in">find</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">  end = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;find: %lldms  \n&quot;</span>, std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(end - begin).<span class="built_in">count</span>());</span><br><span class="line">  begin = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= nfind2; ++i) &#123;</span><br><span class="line">    mmap.<span class="built_in">find</span>(i + <span class="number">100000000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  end = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;find2: %lldms  \n\n&quot;</span>, std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(end - begin).<span class="built_in">count</span>());</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;std::unordered_map&lt;int, int&gt;:  \n&quot;</span>);</span><br><span class="line">  begin = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= ninsert; ++i) &#123;</span><br><span class="line">    umap.<span class="built_in">insert</span>(&#123;i, i&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  end = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;insert: %lldms  \n&quot;</span>, std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(end - begin).<span class="built_in">count</span>());</span><br><span class="line">  begin = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= nfind; ++i) &#123;</span><br><span class="line">    umap.<span class="built_in">find</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">  end = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;find: %lldms  \n&quot;</span>, std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(end - begin).<span class="built_in">count</span>());</span><br><span class="line">  begin = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= nfind2; ++i) &#123;</span><br><span class="line">    umap.<span class="built_in">find</span>(i + <span class="number">100000000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  end = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;find2: %lldms  \n&quot;</span>, std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(end - begin).<span class="built_in">count</span>());</span><br><span class="line">  begin = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= nat; ++i) &#123;</span><br><span class="line">    umap.<span class="built_in">at</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">  end = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;at: %lldms  \n&quot;</span>, std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(end - begin).<span class="built_in">count</span>());</span><br><span class="line">  begin = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= nat2; ++i) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      umap.<span class="built_in">at</span>(i + <span class="number">100000000</span>);</span><br><span class="line">    &#125; <span class="built_in">catch</span> (...) &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  end = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;at2: %lldms  \n&quot;</span>, std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(end - begin).<span class="built_in">count</span>());</span><br><span class="line">  begin = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= nopat; ++i) &#123;</span><br><span class="line">    umap[i];</span><br><span class="line">  &#125;</span><br><span class="line">  end = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;opat: %lldms  \n&quot;</span>, std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(end - begin).<span class="built_in">count</span>());</span><br><span class="line">  begin = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= nopat2; ++i) &#123;</span><br><span class="line">    umap[i + <span class="number">100000000</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  end = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;opat2: %lldms\n\n&quot;</span>, std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(end - begin).<span class="built_in">count</span>());</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;std::unordered_multimap&lt;int, int&gt;:  \n&quot;</span>);</span><br><span class="line">  begin = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= ninsert; ++i) &#123;</span><br><span class="line">    ummap.<span class="built_in">insert</span>(&#123;i, i&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  end = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;insert: %lldms  \n&quot;</span>, std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(end - begin).<span class="built_in">count</span>());</span><br><span class="line">  begin = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= nfind; ++i) &#123;</span><br><span class="line">    ummap.<span class="built_in">find</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">  end = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;find: %lldms  \n&quot;</span>, std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(end - begin).<span class="built_in">count</span>());</span><br><span class="line">  begin = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= nfind2; ++i) &#123;</span><br><span class="line">    ummap.<span class="built_in">find</span>(i + <span class="number">100000000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  end = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;find2: %lldms  \n\n&quot;</span>, std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(end - begin).<span class="built_in">count</span>());</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;std::unordered_multimap&lt;int, int, custom_hash&gt;:  \n&quot;</span>);</span><br><span class="line">  begin = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= ninsert; ++i) &#123;</span><br><span class="line">    ummap.<span class="built_in">insert</span>(&#123;i, i&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  end = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;insert: %lldms  \n&quot;</span>, std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(end - begin).<span class="built_in">count</span>());</span><br><span class="line">  begin = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= nfind; ++i) &#123;</span><br><span class="line">    ummap.<span class="built_in">find</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">  end = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;find: %lldms  \n&quot;</span>, std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(end - begin).<span class="built_in">count</span>());</span><br><span class="line">  begin = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= nfind2; ++i) &#123;</span><br><span class="line">    ummap.<span class="built_in">find</span>(i + <span class="number">100000000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  end = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;find2: %lldms  \n\n&quot;</span>, std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(end - begin).<span class="built_in">count</span>());</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;std::unordered_map&lt;int, int, custom_hash&gt;: \n&quot;</span>);</span><br><span class="line">  begin = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= ninsert; ++i) &#123;</span><br><span class="line">    umap2.<span class="built_in">insert</span>(&#123;i, i&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  end = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;insert: %lldms  \n&quot;</span>, std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(end - begin).<span class="built_in">count</span>());</span><br><span class="line">  begin = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= nfind; ++i) &#123;</span><br><span class="line">    umap2.<span class="built_in">find</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">  end = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;find: %lldms  \n&quot;</span>, std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(end - begin).<span class="built_in">count</span>());</span><br><span class="line">  begin = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= nfind2; ++i) &#123;</span><br><span class="line">    umap2.<span class="built_in">find</span>(i + <span class="number">100000000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  end = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;find2: %lldms  \n&quot;</span>, std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(end - begin).<span class="built_in">count</span>());</span><br><span class="line">  begin = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= nat; ++i) &#123;</span><br><span class="line">    umap2.<span class="built_in">at</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">  end = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;at: %lldms \n&quot;</span>, std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(end - begin).<span class="built_in">count</span>());</span><br><span class="line">  begin = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= nat2; ++i) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      umap2.<span class="built_in">at</span>(i + <span class="number">100000000</span>);</span><br><span class="line">    &#125; <span class="built_in">catch</span> (...) &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  end = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;at2: %lldms  \n&quot;</span>, std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(end - begin).<span class="built_in">count</span>());</span><br><span class="line">  begin = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= nopat; ++i) &#123;</span><br><span class="line">    umap2[i];</span><br><span class="line">  &#125;</span><br><span class="line">  end = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;opat: %lldms  \n&quot;</span>, std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(end - begin).<span class="built_in">count</span>());</span><br><span class="line">  begin = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= nopat2; ++i) &#123;</span><br><span class="line">    umap2[i + <span class="number">100000000</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  end = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;opat2: %lldms\n\n&quot;</span>, std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(end - begin).<span class="built_in">count</span>());</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;__gnu_pbds::gp_hash_table&lt;int, int&gt;: \n&quot;</span>);</span><br><span class="line">  begin = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= ninsert; ++i) &#123;</span><br><span class="line">    ghash.<span class="built_in">insert</span>(&#123;i, i&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  end = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;insert: %lldms  \n&quot;</span>, std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(end - begin).<span class="built_in">count</span>());</span><br><span class="line">  begin = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= nfind; ++i) &#123;</span><br><span class="line">    ghash.<span class="built_in">find</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">  end = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;find: %lldms  \n&quot;</span>, std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(end - begin).<span class="built_in">count</span>());</span><br><span class="line">  begin = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= nfind2; ++i) &#123;</span><br><span class="line">    ghash.<span class="built_in">find</span>(i + <span class="number">100000000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  end = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;find2: %lldms  \n&quot;</span>, std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(end - begin).<span class="built_in">count</span>());</span><br><span class="line">  begin = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= nopat; ++i) &#123;</span><br><span class="line">    ghash[i]; </span><br><span class="line">  &#125;</span><br><span class="line">  end = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;opat: %lldms  \n&quot;</span>, std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(end - begin).<span class="built_in">count</span>());</span><br><span class="line">  begin = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= nopat2; ++i) &#123;</span><br><span class="line">    ghash[i + <span class="number">100000000</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  end = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;opat2: %lldms\n\n&quot;</span>, std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(end - begin).<span class="built_in">count</span>());</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;__gnu_pbds::cc_hash_table&lt;int, int&gt;: \n&quot;</span>);</span><br><span class="line">  begin = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= ninsert; ++i) &#123;</span><br><span class="line">    chash.<span class="built_in">insert</span>(&#123;i, i&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  end = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;insert: %lldms  \n&quot;</span>, std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(end - begin).<span class="built_in">count</span>());</span><br><span class="line">  begin = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= nfind; ++i) &#123;</span><br><span class="line">    chash.<span class="built_in">find</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">  end = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;find: %lldms  \n&quot;</span>, std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(end - begin).<span class="built_in">count</span>());</span><br><span class="line">  begin = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= nfind2; ++i) &#123;</span><br><span class="line">    chash.<span class="built_in">find</span>(i + <span class="number">100000000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  end = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;find2: %lldms  \n&quot;</span>, std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(end - begin).<span class="built_in">count</span>());</span><br><span class="line">  begin = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= nopat; ++i) &#123;</span><br><span class="line">    chash[i];</span><br><span class="line">  &#125;</span><br><span class="line">  end = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;opat: %lldms  \n&quot;</span>, std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(end - begin).<span class="built_in">count</span>());</span><br><span class="line">  begin = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= nopat2; ++i) &#123;</span><br><span class="line">    chash[i + <span class="number">100000000</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  end = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;opat2: %lldms\n\n&quot;</span>, std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(end - begin).<span class="built_in">count</span>());</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">auto</span> insert = [](std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; kv) -&gt; <span class="type">void</span> &#123;</span><br><span class="line">    <span class="type">int</span> idx = (kv.first ^ <span class="number">0x14270817</span>) % MAXT;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;u : buckets[idx]) &#123;</span><br><span class="line">      <span class="keyword">if</span> (u.first == kv.first) &#123;</span><br><span class="line">        u.second = kv.second;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    buckets[idx].<span class="built_in">push_back</span>(&#123;kv.first, kv.second&#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">auto</span> find = [](<span class="type">int</span> key) -&gt; std::vector&lt;std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;::iterator &#123;</span><br><span class="line">    <span class="type">int</span> idx = (key ^ <span class="number">0x14270817</span>) % MAXT;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i = buckets[idx].<span class="built_in">begin</span>(); i != buckets[idx].<span class="built_in">end</span>(); ++i) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i-&gt;first == key) &#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> buckets[idx].<span class="built_in">end</span>();</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">auto</span> at = [](<span class="type">int</span> key) -&gt; std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; &#123;</span><br><span class="line">    <span class="type">int</span> idx = (key ^ <span class="number">0x14270817</span>) % MAXT;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;u : buckets[idx]) &#123;</span><br><span class="line">      <span class="keyword">if</span> (u.first == key) &#123;</span><br><span class="line">        <span class="keyword">return</span> u;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> std::<span class="built_in">out_of_range</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">auto</span> opat = [](<span class="type">int</span> key) -&gt; std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; &#123;</span><br><span class="line">    <span class="type">int</span> idx = (key ^ <span class="number">0x14270817</span>) % MAXT;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;u : buckets[idx]) &#123;</span><br><span class="line">      <span class="keyword">if</span> (u.first == key) &#123;</span><br><span class="line">        <span class="keyword">return</span> u;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    buckets[idx].<span class="built_in">push_back</span>(&#123;key, <span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">return</span> buckets[idx].<span class="built_in">back</span>();</span><br><span class="line">  &#125;;</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;self_implement_hash_table&lt;int, int&gt;: \n&quot;</span>);</span><br><span class="line">  begin = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= ninsert; ++i) &#123;</span><br><span class="line">    <span class="built_in">insert</span>(&#123;i, i&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  end = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;insert: %lldms  \n&quot;</span>, std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(end - begin).<span class="built_in">count</span>());</span><br><span class="line">  begin = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= nfind; ++i) &#123;</span><br><span class="line">    <span class="built_in">find</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">  end = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;find: %lldms  \n&quot;</span>, std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(end - begin).<span class="built_in">count</span>());</span><br><span class="line">  begin = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= nfind2; ++i) &#123;</span><br><span class="line">    <span class="built_in">find</span>(i + <span class="number">100000000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  end = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;find2: %lldms  \n&quot;</span>, std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(end - begin).<span class="built_in">count</span>());</span><br><span class="line">  begin = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= nfind; ++i) &#123;</span><br><span class="line">    <span class="built_in">at</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">  end = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;at: %lldms  \n&quot;</span>, std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(end - begin).<span class="built_in">count</span>());</span><br><span class="line">  begin = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= nfind2; ++i) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="built_in">at</span>(i + <span class="number">100000000</span>);</span><br><span class="line">    &#125; <span class="built_in">catch</span> (...) &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  end = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;at2: %lldms  \n&quot;</span>, std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(end - begin).<span class="built_in">count</span>());</span><br><span class="line">  begin = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= nopat; ++i) &#123;</span><br><span class="line">    <span class="built_in">opat</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">  end = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;opat: %lldms  \n&quot;</span>, std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(end - begin).<span class="built_in">count</span>());</span><br><span class="line">  begin = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= nopat2; ++i) &#123;</span><br><span class="line">    <span class="built_in">opat</span>(i + <span class="number">100000000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  end = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;opat2: %lldms\n\n&quot;</span>, std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(end - begin).<span class="built_in">count</span>());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> mirai::<span class="built_in">main</span>(argc, argv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>优秀博客收藏</title>
    <url>/2022/03/26/20220326-%E4%BC%98%E7%A7%80%E5%8D%9A%E5%AE%A2%E6%94%B6%E8%97%8F/</url>
    <content><![CDATA[<!--comment-->
<span id="more"></span>
<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p><a href="https://f7487.blog.uoj.ac/blog/7490">SATT(Self-Adjusting Top Tree)学习笔记</a></p>
<h2 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h2><h3 id="多项式"><a href="#多项式" class="headerlink" title="多项式"></a>多项式</h3><p><a href="https://fjzzq2002.blog.uoj.ac/blog/7281">一个更好的多项式模板</a></p>
<p><a href="https://rogeryoungh.blog.uoj.ac/blog/7530">多项式牛顿迭代的分块优化</a></p>
<p><a href="https://megatrio.blog.uoj.ac/blog/7430">为什么说 d(n) 是 O(n^(1/3)) 级别的——由一道数学题而获得的启发</a></p>
<p><a href="https://hly1204.blog.uoj.ac/blog/7319">一种简单的在线卷积理解</a></p>
<h3 id="博弈论"><a href="#博弈论" class="headerlink" title="博弈论"></a>博弈论</h3><p><a href="https://wzsyyh.blog.uoj.ac/blog/7396">Fibonacci Nim游戏</a></p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p><a href="https://mcfxmcfx.blog.uoj.ac/blog/7328">快速乘法取模的一种奇怪实现</a></p>
<h2 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h2><p><a href="https://zx2003.blog.uoj.ac/blog/7299">浅谈双极定向及其应用</a></p>
<h2 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h2><p><a href="https://return20071007.blog.uoj.ac/blog/7500">一种野蛮处理静态树上在线链查询的做法</a></p>
]]></content>
      <categories>
        <category>收藏</category>
      </categories>
      <tags>
        <tag>收藏</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构练习</title>
    <url>/2022/03/26/20220326-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<p>数据结构练习，持续更新中。</p>
<span id="more"></span>
<h2 id="LOJ2492-「BJOI2018」二进制"><a href="#LOJ2492-「BJOI2018」二进制" class="headerlink" title="LOJ2492.「BJOI2018」二进制"></a>LOJ2492.「BJOI2018」二进制</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>维护一个长为 $n$ 的 $01$ 串，维护：</p>
<ul>
<li>单点修改；</li>
<li>给定 $[L,R]$，统计其满足“重排列后能够成为二进制下 $(11)_2$ 的倍数”的子区间 $[l,r]$ 个数。</li>
</ul>
<p>$n,q\le 10^5$，TL 2s。</p>
<p>link: <a href="https://loj.ac/p/2492">https://loj.ac/p/2492</a></p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先观察条件的等价命题。</p>
<p>注意到是否成立仅与区间内 $1$ 的个数 $s_1$ 与 $0$ 的个数 $s_0$ 有关：</p>
<ul>
<li>如果 $s_1$ 为偶数，显然可以构造 $(0\cdots01\cdots1)_2$；</li>
<li><p>否则若 $s_1=1$ 则显然不行，否则：</p>
<ul>
<li>若 $s_0\ge2$，则可构造 $(0\cdots01\cdots110101)_2$；</li>
<li>否则若 $s_0=0$ 显然不行，若 $s_0=1$ 则因为长为 $l$ 的 $(1\cdots 1)_2\equiv0\pmod3$，不可能通过置一位为 $0$ 来得到 $3$ 的倍数。</li>
</ul>
<p>考虑不成立的充要条件：</p>
</li>
<li><p>$s_1=1$；</p>
</li>
<li>$2\nmid s_1$ 且 $s_0\le 1$。</li>
</ul>
<p>考虑用线段树维护 $01$ 段：维护每个点所在段的左右端点。</p>
<p>接着考虑用线段树维护 $[L,R]$​ 中满足以上条件的区间个数。</p>
<p>假设我们将 $[L,R]$ 分割为 $[L,mid]$ 与 $[mid+1,R]$ 两部分，那么只需考虑跨过 $mid+0.5$ 的区间个数即可。</p>
<h4 id="第一个条件"><a href="#第一个条件" class="headerlink" title="第一个条件"></a>第一个条件</h4><p>先考虑 $1$ 在左儿子的情况：右儿子提供一个全 $0$ 前缀，左儿子提供一个恰包含一个 $1$ 的后缀。</p>
<p>维护每个区间最长全 $0$ 后缀的长度 $R<em>{01}$ 及最长仅含一个 $1$ 的后缀长度 $R</em>{11}$，以及最长全 $0$ 前缀的长度 $L<em>{01}$，最长仅含一个 $1$ 的前缀 $L</em>{11}$。</p>
<p>$1$ 在左儿子的答案为 $rs.L<em>{01}\times (ls.R</em>{11}-ls.R_{01})$，右儿子同理。</p>
<h4 id="第二个条件"><a href="#第二个条件" class="headerlink" title="第二个条件"></a>第二个条件</h4><p>对于 $s<em>0=0$，直接维护最长全 $1$ 前缀/后缀 $L</em>{00}$/$R<em>{00}$ 即可。分别讨论左儿子和右儿子谁贡献奇数，答案为 $\lceil ls.R</em>{00}/2\rceil\lfloor rs.L<em>{00}/2\rfloor+\lfloor ls.R</em>{00}/2\rfloor\lceil rs.R_{00}/2\rceil$.</p>
<p>对于 $s<em>0=1$，则同理维护最长仅含一个 $0$ 前缀/后缀 $L</em>{10}$/$R<em>{10}$。若 $ls.R</em>{00}$ 为偶数，则删去左儿子的 $R_{00}$ 后缀后可类似上式计算；否则也类似上式，但两项的取整方向相同。</p>
<h4 id="同时满足两个条件"><a href="#同时满足两个条件" class="headerlink" title="同时满足两个条件"></a>同时满足两个条件</h4><p>仅有三个串：$01$、$10$、$1$。</p>
<p>$1$ 仅会在叶节点出现，叶节点考虑是平凡的。</p>
<p>剩下的两个仅会在合并时出现，且仅有一种可能：$a<em>{mid}\ne a</em>{mid+1}$。特判 $-1$ 即可。</p>
<h4 id="维护-L-、-R"><a href="#维护-L-、-R" class="headerlink" title="维护 $L$、$R$"></a>维护 $L$、$R$</h4><p>大多数情况下，$L\gets ls.L$，不过也有例外，譬如左儿子的 $0$/$1$ 过少（少于 $2$），那么需要开始用 $rs.L$。如何判断左儿子 $0$/$1$ 是否过少？一个简单的方法是多维护 $cnt_{0/1}$。</p>
<p>时间复杂度 $O(m\log n)$。</p>
<h2 id="LOJ3325-「SNOI2020」区间和"><a href="#LOJ3325-「SNOI2020」区间和" class="headerlink" title="LOJ3325. 「SNOI2020」区间和"></a>LOJ3325. 「SNOI2020」区间和</h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>给定一个长为 $n$ 的整数序列，维护两种操作：</p>
<ul>
<li>区间 $&lt;k$ 的数设为 $k$；</li>
<li>求一个区间内的最大子段和。</li>
</ul>
<p>$n\le 10^5$，$q\le 2\times 10^5$，$|a_i|,|k|\le 10^9$，TL 3s。</p>
<p>link: <a href="https://loj.ac/p/3325">https://loj.ac/p/3325</a></p>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>对于修改，看上去要用 Segment Tree Beats 维护。</p>
<p>查询根据经典套路，维护每个结点的最大前缀和最大后缀。</p>
<p>我们知道 ST Beats 的思想是仅处理仅会修改最小值的区间，其他的暴力递归，不过增加最小值对答案的影响是什么呢？乍一看最大前缀的区间不会修改，但是仔细考虑后会发现：$[3,-10,2,-10]$，如果将 $-10$ 全部改为 $1$，那么最大前缀的右端点会右移。</p>
<p>观察后会发现，最大前缀后移是因为有些前缀修改前的和较小但其包含了许多的最小值，当最小值增加 $\Delta$ 时它的和的增量非常大。容易发现存在一个阈值 $\max\Delta$，当答案小于这个数的时候区间一定不会变动。</p>
<p>假设有一个前缀被我们认为是“可能的未来最大前缀”，设其和为 $s’$，包含最小值 $c’$ 次，而目前的和为 $s$，包含最小值 $c$ 次。容易知道，当 $s&lt; s’+(c’-c)\Delta$ 时，“彼可取而代之”，否则不行。移项得到 $\Delta&gt;\dfrac{s-s’}{c’-c}$。如果我们的阈值小于所有的 $\dfrac{s-s’}{c’-c}$，那就一定不会导致区间的修改。</p>
<p>问题是，有可能存在很多的这样区间。考虑交给左右儿子分别处理。如果先令 $\max\Delta\gets\min{\max\Delta_l,\max\Delta_r}$，那么不难发现，若 $\Delta&lt;\max\Delta$，那么左右儿子的最大前缀区间都不会改变。此时的“可能未来最大前缀”就只有一个，就是当实际最大前缀是左儿子的最大前缀时的右儿子最大前缀加上左儿子的全部区间。（注意到若取代了，$c’$ 必然大于 $c$，因此区间只会右移）</p>
<p>还有一个小细节需要注意：如果有多个最大前缀区间可以选择，选择最长的。如果选择最短的可能会导致不断的右移导致复杂度错误。</p>
<p>于是我们需要额外维护每个结点的阈值、最大前（后）缀包含的最小值数目、最小值出现次数。</p>
<p>时间复杂度据说是 $O(n\log^2n+q\log n)$，但我不会证。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>link: <a href="https://loj.ac/s/1429985">https://loj.ac/s/1429985</a></p>
<h2 id="CF1322E-Median-Mountain-Range"><a href="#CF1322E-Median-Mountain-Range" class="headerlink" title="CF1322E Median Mountain Range"></a>CF1322E Median Mountain Range</h2><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><p>给定一个序列 $a_n$，可以对它进行如下操作（设操作后的序列为 $a_n’$）：</p>
<ul>
<li>$a_n’=a_n$，$a_1’=a_1$；</li>
<li>$a<em>i’=\operatorname{medium}{a</em>{i-1},a<em>i,a</em>{i+1}},i\in[2,n-1]$，其中 $\operatorname{medium} S$ 表示 $S$ 的中位数。</li>
</ul>
<p>可以证明无论初始序列为多少，对整个序列操作有限多次后一定将变为一个经过操作之后不变的序列。问最少需要多少次操作才能使初始序列变为这种序列，并给出最终序列。</p>
<p>$n\le 5\times 10^5$，TL 2s。</p>
<p>link: <a href="https://codeforces.com/problemset/problem/1322/E">https://codeforces.com/problemset/problem/1322/E</a></p>
<h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>首先考虑 $01$ 序列怎么处理。容易知道，相邻的两项是永远不会改变的，因而改变的仅有 $1010101010\cdots$ 串。观察一个极大 $01$ 交替串，这样的串修改一次会将其除了两端以外的所有值翻转。因此最多操作次数为最长 $01$ 交替串长度减 $1$ 除以 $2$ 向下取整。</p>
<p>考虑将原序列转化为 $01$ 序列：钦定一个定值 $k$，$\ge k$ 的修为 $1$，$&lt; k$ 的修为 $0$。容易知道，序列转化后再操作和操作后再转化得到的是同样的 $01$ 序列，于是这个转化是合理的。容易知道任何时刻序列中的数都一定在原序列中出现过，于是我们钦定的 $k$ 只需要在原序列中取即可。当转化后的 $01$ 序列趋于稳定，说明不会存在一个数从 $\ge k$ 变为 $&lt; k$，也不会反过来变回去。原序列的操作次数就是所有的 $k$ 的次数的 $\max$。容易知道序列在任何时刻都不会有初始序列没有出现过的元素，因此 $k$ 的个数是 $O(n)$ 的。</p>
<p>考虑大到小枚举 $k$，每次会有若干个数从 $0$ 变为 $1$。使用 <code>std::set</code> 维护极大 $01$ 交替串，每次将一个 $0$ 修改为 $1$ 只会影响其周围的 $O(1)$ 个串（可以在 $O(\log n)$ 的时间内定位到这些串），修改区间是 $O(\log n)$ 的，而 $0\to 1$ 的次数为 $O(n)$ 的，所以时间复杂度是 $O(n\log n)$ 的。</p>
<p>如何求出最终序列？注意到一个位置在最终序列为 $x$ 的充要条件为其在以 $x$ 为定值构建的 $01$ 序列中最终为 $1$ 且在以 $x+1$ 为定值构建的 $01$ 序列中最终为 $0$。我们用 <code>std::set</code> 维护当前在序列中最终为 $0$ 的位置，每次更改极大 $01$ 交替串的时候会有 $O(1)$ 个区间的最终答案升为 $1$，在 <code>std::set</code> 中找到区间内的数删除并打标记即可。时间复杂度还是 $O(n\log n)$ 的。</p>
<p>这道题放在数据结构练习里是因为有一个复杂的线段树实现。</p>
<p>事实上，还有一个 $O(n)$ 的做法，详见 <a href="https://codeforces.com/blog/entry/74148?#comment-587403">https://codeforces.com/blog/entry/74148?#comment-587403</a>。</p>
<h2 id="UOJ612「JOISC-2021」Day1-フードコート-Food-Court-饮食区"><a href="#UOJ612「JOISC-2021」Day1-フードコート-Food-Court-饮食区" class="headerlink" title="UOJ612「JOISC 2021」Day1 フードコート | Food Court | 饮食区"></a>UOJ612「JOISC 2021」Day1 フードコート | Food Court | 饮食区</h2><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><p>有 $n$ 个队列，请维护以下三种操作：</p>
<ul>
<li>将编号在 $[l,r]$ 内的队列全部 push $k$ 个 $c$。</li>
<li>将编号在 $[l,r]$ 内的队列全部 pop $k$ 次，如果大小小于 $k$ 就清空。</li>
<li>求队列从前往后第 $b$ 个数，或者判定如果大小小于 $b$。</li>
</ul>
<p>$n,q,c\le 2.5\times10^5$，$b\le 10^{15}$，$k\le 10^9$，TL 1s。</p>
<p>link: <a href="https://uoj.ac/problem/612">https://uoj.ac/problem/612</a></p>
<h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>如果没有 pop 怎么处理？</p>
<p>先把询问离线下来，每个结点从小到大挂上一个询问值的 <code>std::vector</code>。建一棵线段树，初始每个位置的值为 vector 内的最小值。区间 push 相当于区间减，当一个区间被减成 $\le 0$ 的时候答案就是这次修改的 $c$。（当然，要判断这个修改与询问孰先孰后）处理完这个询问再把下一个询问挂在这个位置。</p>
<p>加上 pop 怎么处理？假设我们知道这个位置上总计 pop 了 $k$ 个数，那么判断有没有减成 $\le 0$ 的时候把下限减小一点即可。</p>
<p>怎么维护一个位置 pop 的个数？这是等于这个位置目前的长度减去其 push 的个数即可。</p>
<p>push 的个数就是区间加单点查，维护是平凡的；</p>
<p>目前的长度需要维护三种操作：</p>
<ul>
<li>区间加；</li>
<li>区间减；</li>
<li>区间对 $0$ 取 $\max$（被减完后需进行）。</li>
</ul>
<p>直接 Segment Tree Beats。    </p>
<p>时间复杂度 $O((n+q)\log n)$。</p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>专题练习</tag>
      </tags>
  </entry>
  <entry>
    <title>Segment Tree Beats 学习笔记</title>
    <url>/2020/04/01/20220401-Segment-Tree-Beats/</url>
    <content><![CDATA[<p>Segment Tree Beats 是一种线段树上维护信息的技巧，可用于处理“区间中 $\ge k$ 的数变为 $k$”此类“区间取最值操作”，由 JRY 在 2016 集训队论文中发表。</p>
<span id="more"></span>
<p>其实思想很简单，就是维护每个结点的最大值与次大值，每次做区间取最值操作时，只有当前结点被修改区间覆盖<strong>且次大值小于目标值</strong>时才打懒标记返回，否则递归。（当然，如果最大值小于目标值直接返回）</p>
<p>可以证明一般来说复杂度是均摊 $O(\log n)$ 的。</p>
<p>我们还可以同时加上区间加操作，这样复杂度是均摊 $O(\log^2 n)$ 的，但是实际跑起来与 $O(\log n)$ 类似，不过尚未有此更紧的上界的证明。</p>
<p>模板：<a href="https://www.luogu.com.cn/problem/P6242">https://www.luogu.com.cn/problem/P6242</a></p>
<p>需要维护：</p>
<ul>
<li>区间加</li>
<li>区间取 $\min$</li>
<li>区间和</li>
<li>区间 $\max$</li>
<li>区间历史 $\max$</li>
</ul>
<p>$n,m\le 5\times10^5$。</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> mirai &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="type">char</span> ch;</span><br><span class="line">  <span class="keyword">while</span> ((ch = std::<span class="built_in">getchar</span>()) != <span class="string">&#x27;-&#x27;</span> &amp;&amp; !std::<span class="built_in">isdigit</span>(ch));</span><br><span class="line">  <span class="type">bool</span> neg = ch == <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">  ll ret = ch == <span class="string">&#x27;-&#x27;</span> ? <span class="number">0</span> : ch - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">  <span class="keyword">while</span> (std::<span class="built_in">isdigit</span>(ch = std::<span class="built_in">getchar</span>())) &#123;</span><br><span class="line">    ret = ret * <span class="number">10</span> + ch - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (neg ? <span class="number">-1</span> : <span class="number">1</span>) * ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> buf[<span class="number">30</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> tp = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (x == <span class="number">0</span>) &#123;</span><br><span class="line">    std::<span class="built_in">putchar</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    std::<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    x = -x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (x) &#123;</span><br><span class="line">    buf[tp++] = x % <span class="number">10</span>;</span><br><span class="line">    x /= <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = tp - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">    std::<span class="built_in">putchar</span>(buf[i] + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> MAXN = <span class="number">500005</span>;</span><br><span class="line"><span class="keyword">constexpr</span> ll INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>ll;</span><br><span class="line"><span class="type">int</span> a[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">seg_tree</span> &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">node</span> &#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    ll max, hmax, smax, maxcnt;</span><br><span class="line">    ll lzym, lzyhm, lzysm, lzyhsm;</span><br><span class="line">    ll sum;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">node</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      l = r = <span class="number">0</span>;</span><br><span class="line">      max = hmax = smax = -INF;</span><br><span class="line">      maxcnt = <span class="number">0</span>;</span><br><span class="line">      lzym = lzyhm = lzysm = lzyhsm = sum = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">node</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">      l = r = i;</span><br><span class="line">      max = hmax = a[i];</span><br><span class="line">      maxcnt = <span class="number">1</span>;</span><br><span class="line">      smax = -INF;</span><br><span class="line">      lzym = lzyhm = lzysm = lzyhsm = <span class="number">0</span>;</span><br><span class="line">      sum = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; t[MAXN * <span class="number">4</span>];</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u, ll lzym, ll lzyhm, ll lzysm, ll lzyhsm)</span> </span>&#123;</span><br><span class="line">    t[u].sum += lzym * t[u].maxcnt + lzysm * (t[u].r - t[u].l + <span class="number">1</span> - t[u].maxcnt);</span><br><span class="line">    t[u].hmax = std::<span class="built_in">max</span>(t[u].hmax, t[u].max + lzyhm);</span><br><span class="line">    t[u].lzyhm = std::<span class="built_in">max</span>(t[u].lzyhm, t[u].lzym + lzyhm);</span><br><span class="line">    t[u].lzyhsm = std::<span class="built_in">max</span>(t[u].lzyhsm, t[u].lzysm + lzyhsm);</span><br><span class="line">    t[u].lzym += lzym;</span><br><span class="line">    t[u].lzysm += lzysm;</span><br><span class="line">    t[u].max += lzym;</span><br><span class="line">    <span class="keyword">if</span> (t[u].smax != -INF) &#123;</span><br><span class="line">      t[u].smax += lzysm;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    ll tmp = std::<span class="built_in">max</span>(t[u * <span class="number">2</span>].max, t[u * <span class="number">2</span> + <span class="number">1</span>].max);</span><br><span class="line">    <span class="keyword">if</span> (t[u * <span class="number">2</span>].max == tmp) &#123;</span><br><span class="line">      <span class="built_in">modify</span>(u * <span class="number">2</span>, t[u].lzym, t[u].lzyhm, t[u].lzysm, t[u].lzyhsm);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">modify</span>(u * <span class="number">2</span>, t[u].lzysm, t[u].lzyhsm, t[u].lzysm, t[u].lzyhsm);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (t[u * <span class="number">2</span> + <span class="number">1</span>].max == tmp) &#123;</span><br><span class="line">      <span class="built_in">modify</span>(u * <span class="number">2</span> + <span class="number">1</span>, t[u].lzym, t[u].lzyhm, t[u].lzysm, t[u].lzyhsm);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">modify</span>(u * <span class="number">2</span> + <span class="number">1</span>, t[u].lzysm, t[u].lzyhsm, t[u].lzysm, t[u].lzyhsm);</span><br><span class="line">    &#125;</span><br><span class="line">    t[u].lzym = t[u].lzyhm = t[u].lzysm = t[u].lzyhsm = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    t[u].sum = t[u * <span class="number">2</span>].sum + t[u * <span class="number">2</span> + <span class="number">1</span>].sum;</span><br><span class="line">    t[u].hmax = std::<span class="built_in">max</span>(t[u * <span class="number">2</span>].hmax, t[u * <span class="number">2</span> + <span class="number">1</span>].hmax);</span><br><span class="line">    <span class="keyword">if</span> (t[u * <span class="number">2</span>].max == t[u * <span class="number">2</span> + <span class="number">1</span>].max) &#123;</span><br><span class="line">      t[u].max = t[u * <span class="number">2</span>].max;</span><br><span class="line">      t[u].maxcnt = t[u * <span class="number">2</span>].maxcnt + t[u * <span class="number">2</span> + <span class="number">1</span>].maxcnt;</span><br><span class="line">      t[u].smax = std::<span class="built_in">max</span>(t[u * <span class="number">2</span>].smax, t[u * <span class="number">2</span> + <span class="number">1</span>].smax);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t[u * <span class="number">2</span>].max &lt; t[u * <span class="number">2</span> + <span class="number">1</span>].max) &#123;</span><br><span class="line">      t[u].max = t[u * <span class="number">2</span> + <span class="number">1</span>].max;</span><br><span class="line">      t[u].maxcnt = t[u * <span class="number">2</span> + <span class="number">1</span>].maxcnt;</span><br><span class="line">      t[u].smax = std::<span class="built_in">max</span>(t[u * <span class="number">2</span>].max, t[u * <span class="number">2</span> + <span class="number">1</span>].smax);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      t[u].max = t[u * <span class="number">2</span>].max;</span><br><span class="line">      t[u].maxcnt = t[u * <span class="number">2</span>].maxcnt;</span><br><span class="line">      t[u].smax = std::<span class="built_in">max</span>(t[u * <span class="number">2</span>].smax, t[u * <span class="number">2</span> + <span class="number">1</span>].max);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">      t[u] = <span class="built_in">node</span>(l);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">    t[u].l = l;</span><br><span class="line">    t[u].r = r;</span><br><span class="line">    <span class="built_in">build</span>(u * <span class="number">2</span>, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(u * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">pushup</span>(u);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">madd</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ql, <span class="type">int</span> qr, ll del)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ql &lt;= t[u].l &amp;&amp; t[u].r &lt;= qr) &#123;</span><br><span class="line">      <span class="built_in">modify</span>(u, del, del, del, del);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (qr &lt; t[u].l || t[u].r &lt; ql) &#123; <span class="keyword">return</span>; &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(u);</span><br><span class="line">    <span class="built_in">madd</span>(u * <span class="number">2</span>, ql, qr, del);</span><br><span class="line">    <span class="built_in">madd</span>(u * <span class="number">2</span> + <span class="number">1</span>, ql, qr, del);</span><br><span class="line">    <span class="built_in">pushup</span>(u);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">mmin</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ql, <span class="type">int</span> qr, ll tar)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (qr &lt; t[u].l || t[u].r &lt; ql || tar &gt;= t[u].max) &#123; <span class="keyword">return</span>; &#125;</span><br><span class="line">    <span class="keyword">if</span> (ql &lt;= t[u].l &amp;&amp; t[u].r &lt;= qr &amp;&amp; t[u].smax &lt; tar) &#123;</span><br><span class="line">      <span class="built_in">modify</span>(u, tar - t[u].max, tar - t[u].max, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(u);</span><br><span class="line">    <span class="built_in">mmin</span>(u * <span class="number">2</span>, ql, qr, tar);</span><br><span class="line">    <span class="built_in">mmin</span>(u * <span class="number">2</span> + <span class="number">1</span>, ql, qr, tar);</span><br><span class="line">    <span class="built_in">pushup</span>(u);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function">ll <span class="title">qsum</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ql, <span class="type">int</span> qr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ql &lt;= t[u].l &amp;&amp; t[u].r &lt;= qr) &#123;</span><br><span class="line">      <span class="keyword">return</span> t[u].sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (qr &lt; t[u].l || t[u].r &lt; ql) &#123; <span class="keyword">return</span> <span class="number">0ll</span>; &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(u);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">qsum</span>(u * <span class="number">2</span>, ql, qr) + <span class="built_in">qsum</span>(u * <span class="number">2</span> + <span class="number">1</span>, ql, qr);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function">ll <span class="title">qmax</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ql, <span class="type">int</span> qr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ql &lt;= t[u].l &amp;&amp; t[u].r &lt;= qr) &#123;</span><br><span class="line">      <span class="keyword">return</span> t[u].max;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (qr &lt; t[u].l || t[u].r &lt; ql) &#123; <span class="keyword">return</span> -INF; &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(u);</span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">max</span>(<span class="built_in">qmax</span>(u * <span class="number">2</span>, ql, qr), <span class="built_in">qmax</span>(u * <span class="number">2</span> + <span class="number">1</span>, ql, qr));</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function">ll <span class="title">qhmax</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ql, <span class="type">int</span> qr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ql &lt;= t[u].l &amp;&amp; t[u].r &lt;= qr) &#123;</span><br><span class="line">      <span class="keyword">return</span> t[u].hmax;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (qr &lt; t[u].l || t[u].r &lt; ql) &#123; <span class="keyword">return</span> -INF; &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(u);</span><br><span class="line">    ll ret = std::<span class="built_in">max</span>(<span class="built_in">qhmax</span>(u * <span class="number">2</span>, ql, qr), <span class="built_in">qhmax</span>(u * <span class="number">2</span> + <span class="number">1</span>, ql, qr));</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; t;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> n, m;</span><br><span class="line">  n = <span class="built_in">read</span>();</span><br><span class="line">  m = <span class="built_in">read</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    a[i] = <span class="built_in">read</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  t.<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">    <span class="type">int</span> op = <span class="built_in">read</span>();</span><br><span class="line">    <span class="type">int</span> l = <span class="built_in">read</span>();</span><br><span class="line">    <span class="type">int</span> r = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">switch</span> (op) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">        ll k = <span class="built_in">read</span>();</span><br><span class="line">        t.<span class="built_in">madd</span>(<span class="number">1</span>, l, r, k);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">        ll k = <span class="built_in">read</span>();</span><br><span class="line">        t.<span class="built_in">mmin</span>(<span class="number">1</span>, l, r, k);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>: &#123;</span><br><span class="line">        <span class="built_in">write</span>(t.<span class="built_in">qsum</span>(<span class="number">1</span>, l, r));</span><br><span class="line">        std::<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>: &#123;</span><br><span class="line">        <span class="built_in">write</span>(t.<span class="built_in">qmax</span>(<span class="number">1</span>, l, r));</span><br><span class="line">        std::<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>: &#123;</span><br><span class="line">        <span class="built_in">write</span>(t.<span class="built_in">qhmax</span>(<span class="number">1</span>, l, r));</span><br><span class="line">        std::<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> mirai::<span class="built_in">main</span>(argc, argv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>线段树、平衡树基础练习</title>
    <url>/2022/04/09/20220409-%E7%BA%BF%E6%AE%B5%E6%A0%91%E3%80%81%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<p>从课件库里翻出来的线段树、平衡树练习。</p>
<span id="more"></span>
<h2 id="LOJ-10129-「一本通-4-3-练习-3」维护序列"><a href="#LOJ-10129-「一本通-4-3-练习-3」维护序列" class="headerlink" title="LOJ 10129 「一本通 4.3 练习 3」维护序列"></a>LOJ 10129 「一本通 4.3 练习 3」维护序列</h2><p>线段树如果有多个懒标记，下传顺序可能很重要。</p>
<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><ul>
<li>区间全部 $\times k$；</li>
<li>区间全部 $+k$；</li>
<li>求区间和 $\bmod m$。</li>
</ul>
<p>$n,q\le 10^5$，$m\le 10^9$。</p>
<p>link: <a href="https://loj.ac/p/10129">https://loj.ac/p/10129</a></p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>维护懒标记为一个函数 $x\to kx+b$，下传标记时根据目前区间长度以及目前区间和，计算出新和是平凡的；标记合并直接函数复合。</p>
<p>时间复杂度 $\Theta(n+q\log n)$。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><a href="https://loj.ac/s/1436978">https://loj.ac/s/1436978</a></p>
<h2 id="Luogu-4513-小白逛公园"><a href="#Luogu-4513-小白逛公园" class="headerlink" title="Luogu 4513 小白逛公园"></a>Luogu 4513 小白逛公园</h2><p>线段树经典的维护“跨过 mid”的答案思想的运用。</p>
<h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><ul>
<li>单点修改；</li>
<li>区间查最大子段和。</li>
</ul>
<p>$n\le5\times 10^5$，$q\le 10^5$。</p>
<p>link: <a href="https://www.luogu.com.cn/problem/P4513">https://www.luogu.com.cn/problem/P4513</a></p>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>考虑在线段树上维护，那么仅需考虑跨过 $mid$ 的区间。容易知道这是由一个左儿子的后缀和一个右儿子的前缀拼成的。额外维护最大前缀和与最大后缀和即可。</p>
<p>时间复杂度 $\Theta(n+q\log n)$。</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p><a href="https://www.luogu.com.cn/record/46114702">https://www.luogu.com.cn/record/46114702</a></p>
<h2 id="NOI-2005-维护数列"><a href="#NOI-2005-维护数列" class="headerlink" title="NOI 2005 维护数列"></a>NOI 2005 维护数列</h2><p>使用 Splay 维护序列树的模板。</p>
<h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><p>维护一个数列，支持以下六种操作：</p>
<ul>
<li>在下标 $pos$ 后插入 $m$ 个数 $v_1,\dots,v_m$；</li>
<li>删除下标 $[l,r]$ 的所有数；</li>
<li>将下标 $[l,r]$ 统一修改为 $c$；</li>
<li>翻转 $[l,r]$；</li>
<li>求 $[l,r]$ 和；</li>
<li>求全局最大子段和。</li>
</ul>
<p>保证操作合法，任何时候数列最多含有 $5\times 10^5$ 个数，插入数字总数不超过 $4\times 10^6$，值域 $[-10^3,10^3]$，操作数 $M\le 2\times 10^4$, ML 128MB.</p>
<p>link: <a href="https://www.luogu.com.cn/problem/P2042">https://www.luogu.com.cn/problem/P2042</a></p>
<h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>使用 Splay 维护。</p>
<p>懒标记：修改标记和翻转标记。下传顺序无所谓。</p>
<p>维护信息：子树大小（找到第 $k$ 位）、区间和、区间最大前缀和、区间最大后缀和、区间最大子段和（常规查询）。</p>
<p>时间复杂度 $O(q\log |S|)$。</p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><p><a href="https://www.luogu.com.cn/record/75554664">https://www.luogu.com.cn/record/75554664</a></p>
<h2 id="JLOI-2011-不等式组"><a href="#JLOI-2011-不等式组" class="headerlink" title="JLOI 2011 不等式组"></a>JLOI 2011 不等式组</h2><p>简单的不等式转化。</p>
<h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><p>维护一个不等式组，支持以下操作：</p>
<ul>
<li>向组内添加 $ax+b&gt;c$；</li>
<li>删除添加的第 $i$ 条不等式；</li>
<li>查询 $x$ 满足多少条不等式。</li>
</ul>
<p>操作数 $n\le 10^5$，$a,b,c\in[-10^8,10^8]\cap\mathbb Z$，$k\in[-10^6,10^6]\cap\mathbb Z$，ML 125MB.</p>
<p>link: <a href="https://www.luogu.com.cn/problem/P5482">https://www.luogu.com.cn/problem/P5482</a></p>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路 1"></a>思路 1</h3><p>首先分类讨论 $a$：</p>
<ul>
<li>若 $a=0$，则 $ax+b&gt;c$ 等价于 $b&gt;c$；</li>
<li>若 $a<0$，则 $ax+b>c$ 等价于 $x\ge \left\lceil\dfrac{c-b}{a}\right\rceil$；</li>
<li>若 $a&gt;0$，则 $ax+b&gt;c$ 等价于 $x\le \left\lfloor\dfrac{c-b}a\right\rfloor$。</li>
</ul>
<p>离散化后使用树状数组分别维护 $\ge$ 和 $\le$ 的不等式（具体地，维护 $\ge k$、$\le k$ 的不等式的个数），查询直接查。</p>
<p>时间复杂度 $O(n\log n)$。</p>
<h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路 2"></a>思路 2</h3><p>同上，但是使用平衡树维护，查询查 rank。</p>
<p>时间复杂度 $O(n\log n)$。</p>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><p>思路 1：<a href="https://www.luogu.com.cn/record/75564611">https://www.luogu.com.cn/record/75564611</a></p>
<h2 id="Luogu-1471-方差"><a href="#Luogu-1471-方差" class="headerlink" title="Luogu 1471 方差"></a>Luogu 1471 方差</h2><p>常规的维护区间和、区间平方和以计算区间内二次式。相关的题还有 <a href="https://loj.ac/p/2005">SDOI 2017 相关分析</a>。</p>
<h3 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h3><p>维护一个序列，支持以下操作：</p>
<ul>
<li>区间加；</li>
<li>求区间和；</li>
<li>求区间方差。</li>
</ul>
<p>长度 $n\le 10^5$，操作 $m\le 10^5$，ML 125MB。</p>
<h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>根据方差的定义，</p>
<script type="math/tex; mode=display">
s^2=\dfrac 1n\sum(x-\bar x)^2=\dfrac 1n\sum x^2+\bar x^2</script><p>于是我们只需要维护区间和和区间平方和。区间平方和的 lazy tag 修改用完全平方公式即可。注意区间平方和要先于区间和更新。</p>
<p>时间复杂度 $O(n+m\log n)$。</p>
<h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><p><a href="https://www.luogu.com.cn/record/75581392">https://www.luogu.com.cn/record/75581392</a></p>
<h2 id="CDQZ-OpenJudge-DS-Challenge-4"><a href="#CDQZ-OpenJudge-DS-Challenge-4" class="headerlink" title="CDQZ OpenJudge DS Challenge 4"></a>CDQZ OpenJudge DS Challenge 4</h2><p>维护跨过 mid 的答案，或是维护二次方和。</p>
<h3 id="题意-5"><a href="#题意-5" class="headerlink" title="题意"></a>题意</h3><p>维护一个序列，支持以下操作：</p>
<ul>
<li>单点修改；</li>
<li>求区间内相邻两数乘积和；</li>
<li>求区间内两两乘积和。</li>
</ul>
<p>对 $10^9+7$ 取模，长度 $n\le 10^5$，操作 $m\le 10^5$，ML 256MB.</p>
<p>link: <a href="http://cdqz.openjudge.cn/ds/1004">http://cdqz.openjudge.cn/ds/1004</a></p>
<h3 id="思路-1-1"><a href="#思路-1-1" class="headerlink" title="思路 1"></a>思路 1</h3><p>建立线段树，维护每个结点的两个询问的答案，合并的时候只需要计算多的答案。</p>
<p>对于相邻两数乘积，多的答案为左儿子的最右端的值乘上右儿子的最左端的值；</p>
<p>对于两两乘积，多的答案为左儿子的和乘上右儿子的和。</p>
<p>维护两个询问的答案、区间和、区间左右端点值即可。</p>
<p>时间复杂度 $O(n+m\log n)$。</p>
<h3 id="思路-2-1"><a href="#思路-2-1" class="headerlink" title="思路 2"></a>思路 2</h3><p>注意到区间内两两乘积的值为 $\dfrac12\left((\sum x)^2-\sum x^2\right)$，因此可以通过维护区间平方和和区间和来维护区间两两乘积和。</p>
<p>时间复杂度 $O(n+m\log n)$。</p>
<h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><p><a href="http://cdqz.openjudge.cn/ds/solution/34362522">http://cdqz.openjudge.cn/ds/solution/34362522</a></p>
<h2 id="Luogu-4198-楼房重建"><a href="#Luogu-4198-楼房重建" class="headerlink" title="Luogu 4198 楼房重建"></a>Luogu 4198 楼房重建</h2><p>一道有趣的序列题。</p>
<h3 id="题意-6"><a href="#题意-6" class="headerlink" title="题意"></a>题意</h3><p>有 $n$ 个平面上的线段，每条线段垂直于 $x$ 轴，且第 $i$ 条线段的下端点为 $(i,0)$。称第 $i$ 条线段“能被看到”当且仅当如果视线段可以遮挡光线，则第 $i$ 条线段有无限多个点能够被位于 $(0,0)$ 的点光源射出的光线照射到。</p>
<p>有 $m$ 次操作，每次操作更改一条线段的长度，每次操作后问目前有多少条线段“能被看到”。</p>
<p>$n,m\le 10^5$，上端点 $x\in[1,10^9]\cap\mathbb Z$，ML 125MB.</p>
<p>link: <a href="https://www.luogu.com.cn/problem/P4198">https://www.luogu.com.cn/problem/P4198</a></p>
<h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><p>注意到答案仅跟斜率有关，设斜率为 $k_1,\dots,k_n$，则询问即求“大于所有前面的数”的数的个数。</p>
<p>建立线段树，维护每个结点的仅考虑当前区间的数的答案以及最大斜率。</p>
<p>设目前需要合并 $u$ 结点的答案。注意到 $ls(u)$ 的所有能看到的线段都会贡献给 $u$，但是 $rs(u)$ 的 $&lt; ls(u).max$ 的答案无法贡献。分类讨论：</p>
<ul>
<li>如果 $ls(rs(u)).max \le ls(u).max$，那么 $ls(rs(u))$ 一定全部被遮挡住，递归到 $rs(rs(u))$ 计算；</li>
<li>如果 $ls(rs(u)).max &gt; ls(u).max$，那么 $ls(rs(u))$ 对 $rs(rs(u))$ 的限制强于 $ls(u)$ 的限制，因此只要统计 $rs(rs(u))$ 有多少个数贡献给了 $rs(u)$（通过 $rs(u).ans-ls(u).ans$ 得到），然后递归到 $ls(rs(u))$ 计算即可。</li>
</ul>
<p>每次 pushup 需要递归 $O(\log n)$ 个结点，每次修改有 $O(\log n)$ 次 pushup，因此时间复杂度 $O(n+m\log^2 n)$。</p>
<h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><p><a href="https://www.luogu.com.cn/record/39317529">https://www.luogu.com.cn/record/39317529</a></p>
<h2 id="JSOI-2008-火星人"><a href="#JSOI-2008-火星人" class="headerlink" title="JSOI 2008 火星人"></a>JSOI 2008 火星人</h2><p>因为字符串 hash 需要大量的区间查询，使用线段树很容易维护。</p>
<h3 id="题意-7"><a href="#题意-7" class="headerlink" title="题意"></a>题意</h3><p>给定一个长为 $n$ 的字符串，维护以下操作：</p>
<ul>
<li>修改第 $i$ 位的字符为 ch；</li>
<li>在第 $i$ 位字符后添加 ch 这一字符（若 $i=0$ 表示在串首添加）；</li>
<li>查询当前字符串的后缀 $suf_i$ 和 $suf_j$ 的最长公共前缀。</li>
</ul>
<p>字符串内字符皆为小写英语字母，操作数 $m\le 1.5\times 10^5$，字符串长度 $l$ 始终不超过 $10^5$，询问次数不超过 $10^4$，ML 125MB.</p>
<p>link: <a href="https://www.luogu.com.cn/problem/P4036">https://www.luogu.com.cn/problem/P4036</a></p>
<h3 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h3><p>用字符串 hash 判断字符串相等。因为要插入，所以使用 Splay 维护区间树。仅需额外维护每个结点的 hash 值。</p>
<p>查询的时候二分答案即可。时间复杂度 $O(l_0+m_1\log l+m_2\log^2 l)$。</p>
<h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h3><p><a href="https://www.luogu.com.cn/record/75648169">https://www.luogu.com.cn/record/75648169</a></p>
<h2 id="Luogu-3792-由乃与大母神原型和偶像崇拜"><a href="#Luogu-3792-由乃与大母神原型和偶像崇拜" class="headerlink" title="Luogu 3792 由乃与大母神原型和偶像崇拜"></a>Luogu 3792 由乃与大母神原型和偶像崇拜</h2><p>特征值比对的思想应用很广。维护“前一个值与自己相等的下标”在颜色段题里面很常见。</p>
<h3 id="题意-8"><a href="#题意-8" class="headerlink" title="题意"></a>题意</h3><p>（实际上是 <a href="https://darkbzoj.cc/problem/4373">BZOJ 4373 算术天才⑨与等差数列</a> 的弱化版）</p>
<p>维护一个序列，支持以下操作：</p>
<ul>
<li>单点修改；</li>
<li>查询 $[l,r]$ 内的所有数从小到大排列后（不去重）是否恰为一个公差为 $1$ 的等差数列。注意，仅有 $1$ 项的数列被视为等差数列。</li>
</ul>
<p>$n,q\le 5\times 10^5$，初始值域为 $[1,2.5\times 10^7)\cap\mathbb Z$，修改的目标值 $\le n$。ML 125MB。</p>
<p>link: <a href="https://www.luogu.com.cn/problem/P3792">https://www.luogu.com.cn/problem/P3792</a></p>
<h3 id="思路-1-2"><a href="#思路-1-2" class="headerlink" title="思路 1"></a>思路 1</h3><p>考虑比对特征值。</p>
<p>首先维护区间 min，确定需要判断的目标等差数列的首项。</p>
<p>分别把真实序列和目标序列的和、平方和、立方和、乘积等做比较，如果都相等则视为相等。</p>
<p>为了防止被特殊构造数据卡掉，拿到初始序列后全局加上一个随机数。</p>
<p>时间复杂度 $O(n+q\log n)$。</p>
<h3 id="思路-2-2"><a href="#思路-2-2" class="headerlink" title="思路 2"></a>思路 2</h3><p>事实上本题有确定性在线做法。</p>
<p>考虑一个含有超过 $1$ 项的数列是打乱后的公差为 $1$ 的等差数列当且仅当其不包含重复的数字，且其极差等于长度。</p>
<p>开线段树维护每个结点的前一个与自己值相等的位置，并维护其区间 $\max$。开个数组维护后一个位置。</p>
<p>单点修改就像双向链表修改一样。</p>
<p>时间复杂度 $O(n+q\log n)$。</p>
<h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h3><p><a href="https://www.luogu.com.cn/record/31378906">https://www.luogu.com.cn/record/31378906</a>（思路 1，维护和、平方和、立方和，不加随机数）</p>
<h2 id="BZOJ-4373-算术天才⑨与等差数列"><a href="#BZOJ-4373-算术天才⑨与等差数列" class="headerlink" title="BZOJ 4373 算术天才⑨与等差数列"></a>BZOJ 4373 算术天才⑨与等差数列</h2><p>可以特征值比对，也可以考虑使用等差数列的性质。</p>
<h3 id="题意-9"><a href="#题意-9" class="headerlink" title="题意"></a>题意</h3><p>（实际上是 <a href="https://www.luogu.com.cn/problem/P3792">P3792 由乃与大母神原型和偶像崇拜</a> 的加强版）</p>
<p>维护一个序列，支持以下操作：</p>
<ul>
<li>单点修改；</li>
<li>查询 $[l,r]$ 内的所有数从小到大排列后（不去重）是否恰为一个公差为 $k$ 的等差数列。注意，仅有 $1$ 项的数列被视为等差数列。</li>
</ul>
<p>$n,q\le 3\times 10^5$，值域 $[0,10^9]\cap\mathbb Z$，$0\le k\le 10^9$， ML 128MB，TL 2s。</p>
<p>link:</p>
<ul>
<li><a href="https://darkbzoj.cc/problem/4373">https://darkbzoj.cc/problem/4373</a></li>
<li><a href="https://www.luogu.com.cn/problem/U217542">https://www.luogu.com.cn/problem/U217542</a></li>
</ul>
<h3 id="思路-1-3"><a href="#思路-1-3" class="headerlink" title="思路 1"></a>思路 1</h3><p>考虑比对特征值。</p>
<p>首先维护区间 $\min$ 以确定目标序列。</p>
<p>比对和、平方和、立方和、乘积等特征值，如果都相等则视两个序列相等。</p>
<p>为了防止被特殊数据卡掉，开始时全局加一个随机数。</p>
<p>时间复杂度 $O(n+q\log n)$。</p>
<h3 id="思路-2-3"><a href="#思路-2-3" class="headerlink" title="思路 2"></a>思路 2</h3><p>考虑等差数列的性质：一个打乱后的公差为 $k$ 的等差数列一定满足其差分数组每一项取绝对值后的最大公约数恰好等于 $k$。</p>
<blockquote>
<p>证明：如果最大公约数不是 $k$ 的倍数，则显然不正确，因为每一项都为 $a_1+kd$；</p>
<p>如果最大公约数大于 $k$，则仍然显然不正确，因为这说明原数组所有数模 $kt$ 同余（$t&gt;1$），那么不可能存在两个相差 $k$ 的项。</p>
</blockquote>
<p>进一步地：一个序列是打乱后的公差为 $k$ （$k\ne 0$）的等差数列当且仅当其差分数组每一项取绝对值后的最大公约数恰好等于 $k$，且其极差为项数乘 $k$ 再减 $k$，且无重复数字。</p>
<blockquote>
<p>证明：必要性是显然的。充分性：</p>
<p>第一个条件说明其所有数模 $k$ 同余，且不存在 $t&gt;1$ 满足所有数模 $kt$ 同余。极差将这 $n$ 个数限制在 $a_0+kd(d\in\mathbb Z_n)$ 内。无重复数字限制每个数必须恰出现一次。</p>
</blockquote>
<p>于是，我们只需要维护：</p>
<ol>
<li>原数组的 $\min$ 和 $\max$；</li>
<li>差分数组取绝对值后的 $\gcd$；</li>
<li>原数组区间查询是否有重复数字。</li>
</ol>
<p>第一个条件直接线段树，$O(\log n)$。</p>
<p>第二个条件直接维护似乎是 $O(\log^2n)$ 的，不够优秀。分析一下复杂度：</p>
<ul>
<li>对于 modify，从叶节点 pushup 上去的过程中每个结点维护的值一定会越来越小。对于该叶节点到根的路径，每个父亲一定是儿子的约数。<ul>
<li>如果父亲维护的区间 $\gcd$ 与儿子相等，那么 pushup 所调用的 $\gcd$ 在 $O(1)$ 的时间内即会结束；</li>
<li>否则，父亲维护的区间 $\gcd$ 至多是儿子的一半，这种情况只会出现 $O(\log \max{a_i})$ 次。</li>
</ul>
</li>
<li>对于 query，只需维护一个全局答案 ans，每次更新答案的时候直接将当前区间 $\gcd$ 与 ans 求 $\gcd$。时间复杂度还是 $O(\log n+\log\max{a_i})$ 的。</li>
</ul>
<p>对于第三个条件，我们维护每个位置的前一个值与之相等的位置 pre 以及后一个位置 suf。pre 和 suf 可以用离散化/std::unordered_map 和 std::set 维护。为了判断 $[l,r]$ 是否有重复数字，我们只需要维护一个线段树维护 pre 数组的 $\max$ 即可。时间复杂度 $O(\log n)$。</p>
<p>总时间复杂度为 $O(n+q\log (n\cdot\max{a_i}))$。</p>
<h3 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h3><ul>
<li><a href="https://darkbzoj.cc/submission/191842">https://darkbzoj.cc/submission/191842</a></li>
<li><a href="https://www.luogu.com.cn/record/75889683">https://www.luogu.com.cn/record/75889683</a></li>
</ul>
<h2 id="Luogu-6327-区间加区间sin和"><a href="#Luogu-6327-区间加区间sin和" class="headerlink" title="Luogu 6327 区间加区间sin和"></a>Luogu 6327 区间加区间sin和</h2><p>一道简单的懒标记维护题。</p>
<h3 id="题意-10"><a href="#题意-10" class="headerlink" title="题意"></a>题意</h3><p>维护一个整数序列，支持以下操作：</p>
<ul>
<li>区间加；</li>
<li>求区间的 $\sin$ 值之和，保留 $1$ 位小数。</li>
</ul>
<p>$n,q\le 2\times10^5$，所有数的数都在 $[1,2\times 10^5]$ 内。</p>
<p>link: <a href="https://www.luogu.com.cn/problem/P6327">https://www.luogu.com.cn/problem/P6327</a></p>
<h3 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h3><p>直接使用 $\sin$ 和 $\cos$ 的和角公式维护区间加。</p>
<script type="math/tex; mode=display">
\sin(\alpha+\beta)=\sin\alpha\cos\beta+\cos\alpha\sin\beta\\
\cos(\alpha+\beta)=\cos\alpha\cos\beta-\sin\alpha\sin\beta</script><p>维护区间 $\sin$ 和 $\cos$ 值分别总和即可。</p>
<p>时间复杂度 $O(n+q\log n)$，如果认为计算三角函数的复杂度为常数的话。</p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>数据结构</tag>
        <tag>平衡树</tag>
      </tags>
  </entry>
  <entry>
    <title>清爽洛谷插件</title>
    <url>/2022/04/19/20220419-%E6%B8%85%E7%88%BD%E6%B4%9B%E8%B0%B7%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<p>一个让洛谷更加清爽的插件。</p>
<span id="more"></span>
<p>主要是基于 Stylish 使一些洛谷的内容不显示。也有一些对 extend-luogu 的功能的关闭。不排除以后会使用 TamperMonkey。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><ul>
<li>Stylish</li>
<li>洛谷</li>
<li>extend-luogu（可选）</li>
</ul>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ul>
<li>在 Stylish 中点击 “Create New Styles”；</li>
<li>在页面的 “Sections” 下 “Code 1” 内复制下面的 CSS 代码；</li>
<li>“Sections” 中的 “Applies to” 后面选择 “URLs on the domain”，后面内容填 <code>www.luogu.com.cn</code>；</li>
<li>左上角 “Edit” 下的 “Enter a name.” 中填 <code>cleaner-luogu</code>；</li>
<li>点击 “Edit” 下的 “Save”。</li>
</ul>
<h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><ul>
<li>在 Stylish 中点击 “Manage All Styles”；</li>
<li>在页面右边找到 “cleaner-luogu”，点击其下的 “Edit”；</li>
<li>在页面的 “Sections” 下 “Code1” 内用更新的 CSS 代码覆盖旧的；</li>
<li>点击 “Edit” 下的 “Save”。</li>
</ul>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>Stylish:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 回退 exlg 的头像 dropdown */</span></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.wrapper</span><span class="selector-class">.hover</span> &gt; <span class="selector-tag">div</span><span class="selector-class">.dropdown</span> &gt; <span class="selector-tag">div</span><span class="selector-class">.center</span> &gt; <span class="selector-tag">div</span> &#123; <span class="attribute">display</span>: none &#125;</span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.wrapper</span><span class="selector-class">.hover</span> &gt; <span class="selector-tag">div</span><span class="selector-class">.dropdown</span> &gt; <span class="selector-tag">div</span><span class="selector-class">.center</span> &gt; <span class="selector-tag">div</span><span class="selector-class">.ops</span> &#123; <span class="attribute">display</span>: block &#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#exlg-dash</span> &#123; <span class="attribute">display</span>: none &#125;</span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.wrapper</span><span class="selector-class">.hover</span> &gt; <span class="selector-tag">div</span><span class="selector-class">.dropdown</span> &gt; <span class="selector-tag">div</span><span class="selector-class">.center</span> &gt; <span class="selector-tag">footer</span> &#123; <span class="attribute">padding-top</span>: <span class="number">0</span>; <span class="attribute">padding-bottom</span>: <span class="number">0</span> &#125;</span><br><span class="line"><span class="selector-class">.color-none</span><span class="selector-class">.exlg-dash-options</span><span class="selector-pseudo">:nth-child</span>(<span class="number">7</span>) &#123; <span class="attribute">display</span>: none &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#exlg-board</span> &gt; <span class="selector-tag">h2</span> &#123; <span class="attribute">display</span>: none &#125; <span class="comment">/* exlg logo */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#exlg-board</span> ~ <span class="selector-tag">div</span><span class="selector-class">.lg-article</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123; <span class="attribute">display</span>: none &#125; <span class="comment">/* 本站公告 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#exlg-board</span> ~ <span class="selector-tag">div</span><span class="selector-class">.lg-article</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>) &#123; <span class="attribute">display</span>: none<span class="meta">!important</span> &#125; <span class="comment">/* 友情链接 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#exlg-board</span> ~ <span class="selector-tag">div</span><span class="selector-class">.lg-article</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &gt; <span class="selector-tag">h2</span> ~ <span class="selector-tag">h2</span> &#123; <span class="attribute">display</span>: none &#125; <span class="comment">/* 智能推荐 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#exlg-board</span> ~ <span class="selector-tag">div</span><span class="selector-class">.lg-article</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &gt; <span class="selector-tag">h2</span> ~ <span class="selector-tag">h2</span> ~ <span class="selector-tag">div</span> &#123; <span class="attribute">display</span>: none &#125; <span class="comment">/* 智能推荐内容 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.am-u-lg-9</span><span class="selector-class">.am-u-md-8</span><span class="selector-class">.lg-index-benben</span><span class="selector-class">.lg-right</span> &gt; <span class="selector-tag">div</span><span class="selector-class">.lg-article</span><span class="selector-pseudo">:first</span>-child &#123; <span class="attribute">display</span>: none &#125; <span class="comment">/* 近期比赛 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.am-u-lg-3</span><span class="selector-class">.am-u-md-4</span><span class="selector-class">.lg-right</span> &#123; <span class="attribute">display</span>: flex; <span class="attribute">flex-direction</span>: column-reverse &#125; <span class="comment">/* 前置任务计划 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.solution-article</span> &#123; <span class="attribute">display</span>: none &#125; <span class="comment">/* 隐藏题解 */</span></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.exlg-badge</span> &#123; <span class="attribute">display</span>: none &#125; <span class="comment">/* 隐藏 badge */</span></span><br><span class="line"><span class="selector-tag">section</span><span class="selector-class">.side</span> &gt; <span class="selector-tag">div</span> &#123; <span class="attribute">display</span>: none &#125; <span class="comment">/* 隐藏侧边栏广告 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.footer</span> &gt; <span class="selector-tag">img</span><span class="selector-class">.qr-img</span> &#123; <span class="attribute">display</span>: none &#125; <span class="comment">/* 隐藏 footer 的二维码 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 隐藏首页的 slider */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.am-g</span> &gt; <span class="selector-tag">div</span><span class="selector-class">.am-u-md-12</span> &gt; <span class="selector-tag">div</span><span class="selector-class">.lg-article</span> &gt; <span class="selector-tag">div</span><span class="selector-class">.am-g</span> &gt; <span class="selector-tag">div</span><span class="selector-class">.am-u-md-8</span> &#123; <span class="attribute">display</span>: none &#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.am-g</span> &gt; <span class="selector-tag">div</span><span class="selector-class">.am-u-md-12</span> &gt; <span class="selector-tag">div</span><span class="selector-class">.lg-article</span> &#123; <span class="attribute">display</span>: flex; <span class="attribute">justify-content</span>: center &#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.lg-punch</span> &#123; <span class="attribute">width</span>: auto &#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Luogu--插件</title>
    <url>/2022/04/26/20220426-Luogu--%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<p>一个让洛谷更加安静的插件。</p>
<span id="more"></span>
<p>插件目前是使用纯 CSS 的，因此可以用 Stylish 加载。当然也可以用 JavaScript 加载，因此也附了给 TamperMonkey 使用的 JavaScript 代码（不一定能够及时更新）。</p>
<h2 id="CSS-代码"><a href="#CSS-代码" class="headerlink" title="CSS 代码"></a>CSS 代码</h2><p>推荐使用 Stylish 加载。适配开启“学术模式”的洛谷，配置 Extend-Luogu 插件。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* ================================ 回退头像 dropdown ===================================== */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.wrapper</span><span class="selector-class">.hover</span> &gt; <span class="selector-tag">div</span><span class="selector-class">.dropdown</span> &gt; <span class="selector-tag">div</span><span class="selector-class">.center</span> &gt; <span class="selector-tag">div</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.ops</span>) &#123; <span class="attribute">display</span>: none &#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#exlg-dash</span> &#123; <span class="attribute">display</span>: none &#125;</span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.wrapper</span><span class="selector-class">.hover</span> &gt; <span class="selector-tag">div</span><span class="selector-class">.dropdown</span> &gt; <span class="selector-tag">div</span><span class="selector-class">.center</span> &gt; <span class="selector-tag">footer</span> &#123; <span class="attribute">padding-top</span>: <span class="number">0</span>; <span class="attribute">padding-bottom</span>: <span class="number">0</span> &#125;</span><br><span class="line"><span class="selector-class">.color-none</span><span class="selector-class">.exlg-dash-options</span><span class="selector-pseudo">:nth-child</span>(<span class="number">7</span>) &#123; <span class="attribute">display</span>: none &#125;</span><br><span class="line"><span class="selector-class">.ops</span> &gt; <span class="selector-tag">a</span><span class="selector-class">.color-none</span><span class="selector-class">.exlg-dash-options</span> &#123;</span><br><span class="line">	<span class="attribute">display</span>: inline-block;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">7em</span>;</span><br><span class="line">	<span class="attribute">margin-top</span>: <span class="number">0.4em</span>;</span><br><span class="line">	<span class="attribute">margin-bottom</span>: <span class="number">0.4em</span>;</span><br><span class="line">	<span class="attribute">padding</span>: <span class="number">0px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.ops</span> &gt; <span class="selector-tag">a</span><span class="selector-class">.color-none</span><span class="selector-class">.exlg-dash-options</span> &gt; <span class="selector-tag">div</span><span class="selector-class">.link-title</span> &#123; <span class="attribute">display</span>: inline-block &#125;</span><br><span class="line"><span class="selector-class">.ops</span> &gt; <span class="selector-tag">a</span><span class="selector-class">.color-none</span><span class="selector-class">.exlg-dash-options</span><span class="selector-pseudo">:after</span> &#123; <span class="attribute">display</span>: none &#125;</span><br><span class="line"><span class="selector-tag">footer</span><span class="selector-attr">[data-v-78704ac9]</span> &#123; <span class="attribute">font-size</span>: <span class="number">0.8em</span> &#125;</span><br><span class="line"><span class="selector-class">.ops</span> &gt; <span class="selector-tag">a</span><span class="selector-class">.color-none</span><span class="selector-class">.exlg-dash-options</span> &gt; <span class="selector-class">.link-title</span> &gt; svg &#123;</span><br><span class="line">	<span class="attribute">margin-right</span>: inherit;</span><br><span class="line">	<span class="attribute">width</span>: inherit</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.ops</span><span class="selector-attr">[data-v-78704ac9]</span> &#123; <span class="attribute">padding</span>: <span class="number">0.5em</span> <span class="number">0.2em</span> &#125;</span><br><span class="line"><span class="selector-class">.center</span><span class="selector-attr">[data-v-78704ac9]</span> &#123; <span class="attribute">width</span>: <span class="number">238px</span> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ======================================== 主页大改 ====================================== */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#exlg-board</span> &gt; <span class="selector-tag">h2</span> &#123; <span class="attribute">display</span>: none &#125; <span class="comment">/* exlg logo */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#exlg-board</span> ~ <span class="selector-tag">div</span><span class="selector-class">.lg-article</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123; <span class="attribute">display</span>: none &#125; <span class="comment">/* 本站公告 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#exlg-board</span> ~ <span class="selector-tag">div</span><span class="selector-class">.lg-article</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>) &#123; <span class="attribute">display</span>: none<span class="meta">!important</span> &#125; <span class="comment">/* 友情链接 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#exlg-board</span> ~ <span class="selector-tag">div</span><span class="selector-class">.lg-article</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &gt; <span class="selector-tag">h2</span> ~ <span class="selector-tag">h2</span> &#123; <span class="attribute">display</span>: none &#125; <span class="comment">/* 智能推荐 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#exlg-board</span> ~ <span class="selector-tag">div</span><span class="selector-class">.lg-article</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &gt; <span class="selector-tag">h2</span> ~ <span class="selector-tag">h2</span> ~ <span class="selector-tag">div</span> &#123; <span class="attribute">display</span>: none &#125; <span class="comment">/* 智能推荐内容 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.am-u-lg-9</span><span class="selector-class">.am-u-md-8</span><span class="selector-class">.lg-index-benben</span><span class="selector-class">.lg-right</span> &gt; <span class="selector-tag">div</span><span class="selector-class">.lg-article</span><span class="selector-pseudo">:first</span>-child &#123; <span class="attribute">display</span>: none &#125; <span class="comment">/* 近期比赛 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.am-u-lg-3</span><span class="selector-class">.am-u-md-4</span><span class="selector-class">.lg-right</span> &#123; <span class="attribute">display</span>: flex; <span class="attribute">flex-direction</span>: column-reverse &#125; <span class="comment">/* 前置任务计划 */</span></span><br><span class="line"><span class="selector-id">#exlg-board</span> &#123; <span class="attribute">display</span>: none &#125; <span class="comment">/* 隐藏查找用户、犇犇排行榜所在的框 */</span></span><br><span class="line"><span class="selector-id">#bb-rnklst-h2</span> &#123; <span class="attribute">display</span>: none &#125; <span class="comment">/* 隐藏犇犇排行榜 */</span></span><br><span class="line"><span class="selector-class">.lg-index-benben</span> &gt; <span class="selector-class">.lg-article</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123; <span class="attribute">display</span>: none &#125; <span class="comment">/* 学术模式下关闭讨论框 */</span></span><br><span class="line"><span class="selector-class">.am-u-md-3</span> <span class="selector-class">.lg-index-stat</span> &#123; <span class="attribute">display</span>: none &#125; <span class="comment">/* 问题跳转 */</span></span><br><span class="line"><span class="selector-class">.am-u-md-9</span> <span class="selector-class">.lg-index-stat</span> &#123; <span class="attribute">display</span>: none &#125; <span class="comment">/* 通过统计 */</span></span><br><span class="line"><span class="selector-class">.exlg-rand-settings</span><span class="selector-id">#exlg-dash-0</span> &#123; <span class="attribute">display</span>: none &#125; <span class="comment">/* “ex 设置” */</span></span><br><span class="line"><span class="selector-class">.am-u-md-3</span> <span class="selector-class">.lg-index-stat</span> <span class="selector-tag">button</span><span class="selector-attr">[name=<span class="string">&quot;gotorandom&quot;</span>]</span> &#123;<span class="attribute">display</span>: none &#125; <span class="comment">/* 随机跳转的按钮 */</span></span><br><span class="line"><span class="selector-class">.am-u-md-3</span> <span class="selector-class">.lg-index-stat</span> <span class="selector-tag">button</span><span class="selector-attr">[name=<span class="string">&quot;gotorandomex&quot;</span>]</span> &#123;<span class="attribute">display</span>: none &#125; <span class="comment">/* 随机跳转的 exlg 按钮 */</span></span><br><span class="line"><span class="selector-class">.am-u-md-12</span> &#123; <span class="attribute">display</span>: none &#125; <span class="comment">/* slider 与运势、打卡 */</span></span><br><span class="line"><span class="selector-id">#exlg-board</span> + * + <span class="selector-class">.lg-article</span> &gt; <span class="selector-tag">div</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.tasklist-item</span>) &#123; <span class="attribute">display</span>: none &#125; <span class="comment">/* 隐藏“隐藏已 AC” */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 隐藏首页 slide */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.am-g</span> &gt; <span class="selector-tag">div</span><span class="selector-class">.am-u-md-12</span> <span class="selector-tag">div</span><span class="selector-class">.am-u-md-8</span> &#123; <span class="attribute">display</span>: none &#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.am-g</span> &gt; <span class="selector-tag">div</span><span class="selector-class">.am-u-md-12</span> &gt; <span class="selector-tag">div</span><span class="selector-class">.lg-article</span> &gt; <span class="selector-tag">div</span><span class="selector-class">.am-g</span> &#123; <span class="attribute">display</span>: flex; <span class="attribute">justify-content</span>: center &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ======================================== 关闭功能 ======================================= */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.exlg-badge</span> &#123; <span class="attribute">display</span>: none &#125; <span class="comment">/* exlg 的 badge */</span></span><br><span class="line"><span class="selector-tag">section</span><span class="selector-class">.side</span> &gt; <span class="selector-tag">div</span> &#123; <span class="attribute">display</span>: none &#125; <span class="comment">/* 侧栏广告 */</span></span><br><span class="line"><span class="selector-class">.footer</span> <span class="selector-class">.qr-img</span> &#123; <span class="attribute">display</span>: none &#125; <span class="comment">/* footer 的二维码 */</span></span><br><span class="line"><span class="selector-class">.footer</span> <span class="selector-class">.logo-img</span> &#123; <span class="attribute">display</span>: none &#125; <span class="comment">/* footer 的 logo */</span></span><br><span class="line"><span class="selector-class">.footer</span> <span class="selector-class">.slogan</span> &#123; <span class="attribute">display</span>: none &#125; <span class="comment">/* footer 的 slogan */</span></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-attr">[name=<span class="string">&quot;save-discuss&quot;</span>]</span> ~ *, <span class="selector-tag">button</span><span class="selector-attr">[name=<span class="string">&quot;save-discuss&quot;</span>]</span> &#123; <span class="attribute">display</span>: none &#125; <span class="comment">/* 隐藏 exlg 的“保存讨论”和“讨论备份” */</span></span><br><span class="line"><span class="selector-class">.solution-article</span> &#123; <span class="attribute">display</span>: none &#125; <span class="comment">/* 隐藏题解 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 表情输入 */</span></span><br><span class="line"><span class="selector-class">.exlg-emo</span> &#123; <span class="attribute">display</span>: none &#125;</span><br><span class="line"><span class="selector-class">.mp-editor-ground</span><span class="selector-class">.exlg-ext</span><span class="selector-class">.exlg-show-emo</span><span class="selector-class">.exlg-show-emo-short</span> &#123; <span class="attribute">top</span>: <span class="number">40px</span><span class="meta">!important</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 隐藏等级钩、管理员和棕名的 badge */</span></span><br><span class="line"><span class="selector-class">.sb_amazeui</span> &#123; <span class="attribute">display</span>: none &#125; </span><br><span class="line"><span class="selector-class">.exlg-badge-username</span> + <span class="selector-class">.am-badge</span>, <span class="selector-class">.exlg-badge-username</span> + <span class="selector-class">.sb_amazeui</span> + <span class="selector-class">.am-badge</span> &#123; <span class="attribute">display</span>: none &#125;</span><br><span class="line"><span class="selector-tag">section</span><span class="selector-class">.side</span> <span class="selector-class">.info-rows</span> <span class="selector-tag">a</span><span class="selector-attr">[href=<span class="string">&quot;/discuss/show/142324&quot;</span>]</span> &#123; <span class="attribute">display</span>: none &#125;</span><br><span class="line"><span class="selector-class">.creator</span> <span class="selector-tag">a</span><span class="selector-attr">[href=<span class="string">&quot;/discuss/show/142324&quot;</span>]</span>, <span class="selector-class">.user-name</span> <span class="selector-tag">a</span><span class="selector-attr">[href=<span class="string">&quot;/discuss/show/142324&quot;</span>]</span>, <span class="selector-class">.user</span> <span class="selector-tag">a</span><span class="selector-attr">[href=<span class="string">&quot;/discuss/show/142324&quot;</span>]</span>,</span><br><span class="line"><span class="selector-class">.inner-card</span> <span class="selector-class">.right-box</span> <span class="selector-tag">a</span><span class="selector-attr">[href=<span class="string">&quot;/discuss/show/142324&quot;</span>]</span>, <span class="selector-class">.follow-left</span> <span class="selector-tag">a</span><span class="selector-attr">[href=<span class="string">&quot;/discuss/show/142324&quot;</span>]</span> &#123; <span class="attribute">display</span>: none &#125;</span><br><span class="line"><span class="selector-tag">section</span><span class="selector-class">.side</span> <span class="selector-class">.info-rows</span> <span class="selector-class">.lfe-caption</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.tag</span>) &#123; <span class="attribute">display</span>: none &#125;</span><br><span class="line"><span class="selector-class">.feed-username</span> <span class="selector-class">.am-badge</span> &#123; <span class="attribute">display</span>: none &#125;</span><br><span class="line"><span class="selector-class">.lg-index-contest</span> <span class="selector-class">.lg-small</span> &#123; <span class="attribute">font-size</span>: <span class="number">0</span> &#125;</span><br><span class="line"><span class="selector-class">.lg-index-contest</span> <span class="selector-class">.lg-small</span> <span class="selector-tag">a</span>, <span class="selector-class">.lg-index-contest</span> <span class="selector-class">.lg-small</span> + <span class="selector-class">.lg-small</span>, <span class="selector-class">.lg-index-contest</span> <span class="selector-class">.lg-small</span> + <span class="selector-class">.lg-small</span> * &#123; <span class="attribute">font-size</span>: <span class="number">10px</span> &#125;</span><br></pre></td></tr></table></figure>
<h2 id="JavaScript-代码"><a href="#JavaScript-代码" class="headerlink" title="JavaScript 代码"></a>JavaScript 代码</h2><p>除了适用 TamperMonkey 以外，和 CSS 代码的适用提示一样。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @name         Luogu--</span></span><br><span class="line"><span class="comment">// @version      0.1</span></span><br><span class="line"><span class="comment">// @description  Less luogu features!</span></span><br><span class="line"><span class="comment">// @author       Kuriyama Mirai</span></span><br><span class="line"><span class="comment">// @match        https://www.luogu.com.cn/*</span></span><br><span class="line"><span class="comment">// @icon         https://www.google.com/s2/favicons?sz=64&amp;domain=luogu.com.cn</span></span><br><span class="line"><span class="comment">// @grant        none</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">  <span class="keyword">let</span> style = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;style&#x27;</span>);</span><br><span class="line">  style.<span class="property">innerHTML</span> = <span class="string">&#x27;/* ================================ 回退头像 dropdown ===================================== */\</span></span><br><span class="line"><span class="string">  \</span></span><br><span class="line"><span class="string">  span.wrapper.hover &gt; div.dropdown &gt; div.center &gt; div:not(.ops) &#123; display: none &#125;\</span></span><br><span class="line"><span class="string">  div#exlg-dash &#123; display: none &#125;\</span></span><br><span class="line"><span class="string">  span.wrapper.hover &gt; div.dropdown &gt; div.center &gt; footer &#123; padding-top: 0; padding-bottom: 0 &#125;\</span></span><br><span class="line"><span class="string">  .color-none.exlg-dash-options:nth-child(7) &#123; display: none &#125;\</span></span><br><span class="line"><span class="string">  .ops &gt; a.color-none.exlg-dash-options &#123;\</span></span><br><span class="line"><span class="string">    display: inline-block;\</span></span><br><span class="line"><span class="string">    width: 7em;\</span></span><br><span class="line"><span class="string">    margin-top: 0.4em;\</span></span><br><span class="line"><span class="string">    margin-bottom: 0.4em;\</span></span><br><span class="line"><span class="string">    padding: 0px\</span></span><br><span class="line"><span class="string">  &#125;\</span></span><br><span class="line"><span class="string">  .ops &gt; a.color-none.exlg-dash-options &gt; div.link-title &#123; display: inline-block &#125;\</span></span><br><span class="line"><span class="string">  .ops &gt; a.color-none.exlg-dash-options:after &#123; display: none &#125;\</span></span><br><span class="line"><span class="string">  footer[data-v-78704ac9] &#123; font-size: 0.8em &#125;\</span></span><br><span class="line"><span class="string">  .ops &gt; a.color-none.exlg-dash-options &gt; .link-title &gt; svg &#123;\</span></span><br><span class="line"><span class="string">    margin-right: inherit;\</span></span><br><span class="line"><span class="string">    width: inherit\</span></span><br><span class="line"><span class="string">  &#125;\</span></span><br><span class="line"><span class="string">  .ops[data-v-78704ac9] &#123; padding: 0.5em 0.2em &#125;\</span></span><br><span class="line"><span class="string">  .center[data-v-78704ac9] &#123; width: 238px &#125;\</span></span><br><span class="line"><span class="string">  \</span></span><br><span class="line"><span class="string">  \</span></span><br><span class="line"><span class="string">  /* ======================================== 主页大改 ====================================== */\</span></span><br><span class="line"><span class="string">  \</span></span><br><span class="line"><span class="string">  div#exlg-board &gt; h2 &#123; display: none &#125; /* exlg logo */\</span></span><br><span class="line"><span class="string">  div#exlg-board ~ div.lg-article:nth-child(2) &#123; display: none &#125; /* 本站公告 */\</span></span><br><span class="line"><span class="string">  div#exlg-board ~ div.lg-article:nth-child(4) &#123; display: none!important &#125; /* 友情链接 */\</span></span><br><span class="line"><span class="string">  div#exlg-board ~ div.lg-article:nth-child(3) &gt; h2 ~ h2 &#123; display: none &#125; /* 智能推荐 */\</span></span><br><span class="line"><span class="string">  div#exlg-board ~ div.lg-article:nth-child(3) &gt; h2 ~ h2 ~ div &#123; display: none &#125; /* 智能推荐内容 */\</span></span><br><span class="line"><span class="string">  div.am-u-lg-9.am-u-md-8.lg-index-benben.lg-right &gt; div.lg-article:first-child &#123; display: none &#125; /* 近期比赛 */\</span></span><br><span class="line"><span class="string">  div.am-u-lg-3.am-u-md-4.lg-right &#123; display: flex; flex-direction: column-reverse &#125; /* 前置任务计划 */\</span></span><br><span class="line"><span class="string">  #exlg-board &#123; display: none &#125; /* 隐藏查找用户、犇犇排行榜所在的框 */\</span></span><br><span class="line"><span class="string">  #bb-rnklst-h2 &#123; display: none &#125; /* 隐藏犇犇排行榜 */\</span></span><br><span class="line"><span class="string">  .lg-index-benben &gt; .lg-article:nth-child(2) &#123; display: none &#125; /* 学术模式下关闭讨论框 */\</span></span><br><span class="line"><span class="string">  /*.am-u-md-3 .lg-index-stat &#123; display: none &#125; /* 问题跳转 */\</span></span><br><span class="line"><span class="string">  /*.am-u-md-9 .lg-index-stat &#123; display: none &#125; /* 通过统计 */\</span></span><br><span class="line"><span class="string">  .exlg-rand-settings#exlg-dash-0 &#123; display: none &#125; /* “ex 设置” */\</span></span><br><span class="line"><span class="string">  .am-u-md-3 .lg-index-stat button[name=&quot;gotorandom&quot;] &#123;display: none &#125; /* 随机跳转的按钮 */\</span></span><br><span class="line"><span class="string">  .am-u-md-3 .lg-index-stat button[name=&quot;gotorandomex&quot;] &#123;display: none &#125; /* 随机跳转的 exlg 按钮 */\</span></span><br><span class="line"><span class="string">  /*.am-u-md-12 &#123; display: none &#125; /* slider 与运势、打卡 */\</span></span><br><span class="line"><span class="string">  #exlg-board + * + .lg-article &gt; div:not(.tasklist-item) &#123; display: none &#125; /* 隐藏“隐藏已 AC” */\</span></span><br><span class="line"><span class="string">  \</span></span><br><span class="line"><span class="string">  /* 隐藏首页 slide */\</span></span><br><span class="line"><span class="string">  div.am-g &gt; div.am-u-md-12 div.am-u-md-8 &#123; display: none &#125;\</span></span><br><span class="line"><span class="string">  div.am-g &gt; div.am-u-md-12 &gt; div.lg-article &gt; div.am-g &#123; display: flex; justify-content: center &#125;\</span></span><br><span class="line"><span class="string">  \</span></span><br><span class="line"><span class="string">  \</span></span><br><span class="line"><span class="string">  /* ======================================== 关闭功能 ======================================= */\</span></span><br><span class="line"><span class="string">  \</span></span><br><span class="line"><span class="string">  span.exlg-badge &#123; display: none &#125; /* exlg 的 badge */\</span></span><br><span class="line"><span class="string">  section.side &gt; div &#123; display: none &#125; /* 侧栏广告 */\</span></span><br><span class="line"><span class="string">  .footer .qr-img &#123; display: none &#125; /* footer 的二维码 */\</span></span><br><span class="line"><span class="string">  .footer .logo-img &#123; display: none &#125; /* footer 的 logo */\</span></span><br><span class="line"><span class="string">  .footer .slogan &#123; display: none &#125; /* footer 的 slogan */\</span></span><br><span class="line"><span class="string">  button[name=&quot;save-discuss&quot;] ~ *, button[name=&quot;save-discuss&quot;] &#123; display: none &#125; /* 隐藏 exlg 的“保存讨论”和“讨论备份” */\</span></span><br><span class="line"><span class="string">  .solution-article &#123; display: none &#125; /* 隐藏题解 */\</span></span><br><span class="line"><span class="string">  \</span></span><br><span class="line"><span class="string">  /* 表情输入 */\</span></span><br><span class="line"><span class="string">  .exlg-emo &#123; display: none &#125;\</span></span><br><span class="line"><span class="string">  .mp-editor-ground.exlg-ext.exlg-show-emo.exlg-show-emo-short &#123; top: 40px!important &#125;\</span></span><br><span class="line"><span class="string">  \</span></span><br><span class="line"><span class="string">  /* 隐藏等级钩、管理员和棕名的 badge */\</span></span><br><span class="line"><span class="string">  .sb_amazeui &#123; display: none &#125; \</span></span><br><span class="line"><span class="string">  .exlg-badge-username + .am-badge, .exlg-badge-username + .sb_amazeui + .am-badge &#123; display: none &#125;\</span></span><br><span class="line"><span class="string">  section.side .info-rows a[href=&quot;/discuss/show/142324&quot;] &#123; display: none &#125;\</span></span><br><span class="line"><span class="string">  .creator a[href=&quot;/discuss/show/142324&quot;], .user-name a[href=&quot;/discuss/show/142324&quot;], .user a[href=&quot;/discuss/show/142324&quot;],\</span></span><br><span class="line"><span class="string">  .inner-card .right-box a[href=&quot;/discuss/show/142324&quot;], .follow-left a[href=&quot;/discuss/show/142324&quot;] &#123; display: none &#125;\</span></span><br><span class="line"><span class="string">  section.side .info-rows .lfe-caption:not(.tag) &#123; display: none &#125;\</span></span><br><span class="line"><span class="string">  .feed-username .am-badge &#123; display: none &#125;\</span></span><br><span class="line"><span class="string">  .lg-index-contest .lg-small &#123; font-size: 0 &#125;\</span></span><br><span class="line"><span class="string">  .lg-index-contest .lg-small a, .lg-index-contest .lg-small + .lg-small, .lg-index-contest .lg-small + .lg-small * &#123; font-size: 10px &#125;&#x27;</span>;</span><br><span class="line">  <span class="keyword">let</span> ref = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;body&#x27;</span>);</span><br><span class="line">  ref.<span class="property">parentNode</span>.<span class="title function_">insertBefore</span>(style, ref);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<h2 id="已知-bug"><a href="#已知-bug" class="headerlink" title="已知 bug"></a>已知 bug</h2><ul>
<li>回退 Extend-Luogu 的头像 dropdown 仍与原来相比有轻微的偏移。</li>
<li>若关闭钩的显示，首页“的运势”前会有两个 <code>&amp;nbsp;</code>。</li>
<li>“题目提供者”若带有被隐藏的钩或 badge，用户名的右边界会（相比题目难度）向左偏移 2px 左右。“楼主”栏也会向左偏移。</li>
</ul>
]]></content>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title>Splay 学习笔记</title>
    <url>/2022/05/06/20220506-Splay-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>Splay 是一种由 Tarjan 发明的，可在不维护额外信息的情况下动态平衡，且可合并的数据结构。</p>
<span id="more"></span>
<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="Rotate"><a href="#Rotate" class="headerlink" title="Rotate"></a>Rotate</h3><p>将一个结点 $u$ 向上旋转。</p>
<p>不是一般性地，设 $u$ 是其父亲 $f$ 的左儿子。则操作后 $f$ 的父亲变为 $u$，$u$ 的父亲变为 $f$ 的原父亲，$u$ 的右儿子变为 $f$，$u$ 的右子树成为 $f$ 的左子树。右儿子的情况是对称的。</p>
<h3 id="Splay"><a href="#Splay" class="headerlink" title="Splay"></a>Splay</h3><p>将一个结点 $u$ 不断旋转到根。</p>
<p>一种平凡的想法是不断地将其上旋。这种做法有一个显著的问题：如果原树有一条长链，那么经过操作后这条长链依然存在（有可能成为一条长路径），不够优秀。</p>
<p>一个简单的解决方案是这样子：将父亲一并考虑，如果父亲存在且与自己类型相同，那么先旋转父亲，否则先旋转自己。处理完这个后再旋转自己。这种做法可以将长链上的结点变得“更多分叉”，使得复杂度正确。</p>
<p>为了保证复杂度正确，我们需要在每次操作后都保证调用的目标结点成为了根。</p>
<h2 id="名次树"><a href="#名次树" class="headerlink" title="名次树"></a>名次树</h2><h3 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h3><p>暴力插入，然后 Splay。</p>
<h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><p>先让 $u$ 成为根。如果左右子树不是都非空，那么做法是平凡的；否则找到左子树的最大值并将其旋转到左子树的根（实际编写可以利用 Predecessor 函数找到 $u$ 的值的前驱），并将右子树直接连接到左子树的根的右儿子上。</p>
<h3 id="Predecessor-Successor-Rank-nth"><a href="#Predecessor-Successor-Rank-nth" class="headerlink" title="Predecessor/Successor/Rank/nth"></a>Predecessor/Successor/Rank/nth</h3><p>就像 BST 一样查询，最后 Splay 即可。</p>
<h3 id="模板题"><a href="#模板题" class="headerlink" title="模板题"></a>模板题</h3><p>维护一个 multiset，支持 Insert 到 nth 的六种名次树基本操作，操作数 $\le 10^5$，值域为 $[-10^7,10^7]$。</p>
<p>link: <a href="https://loj.ac/p/104">https://loj.ac/p/104</a></p>
<p>code: <a href="https://loj.ac/s/1458387">https://loj.ac/s/1458387</a></p>
<h2 id="序列树"><a href="#序列树" class="headerlink" title="序列树"></a>序列树</h2><h3 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h3><p>翻转一个区间。</p>
<p>让 $l-1$ 成为根，$r+1$ 成为它的右儿子。$r+1$ 的左儿子即为 $[l,r]$ 的树。直接打翻转标记。</p>
<p>为了避免分类讨论，通常会添加 $0$ 号结点与 $n+1$ 号结点。</p>
<h3 id="模板题-1"><a href="#模板题-1" class="headerlink" title="模板题"></a>模板题</h3><p>给定一个序列，进行 $q$ 次 Reverse 后求最终序列。$n,q\le 10^5$。</p>
<p>link: <a href="https://loj.ac/p/105">https://loj.ac/p/105</a></p>
<p>code: <a href="https://loj.ac/s/1460866">https://loj.ac/s/1460866</a></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>平衡树</tag>
        <tag>Splay</tag>
      </tags>
  </entry>
  <entry>
    <title>IOI2021集训队作业</title>
    <url>/2022/05/11/20220511-IOI2021%E9%9B%86%E8%AE%AD%E9%98%9F%E4%BD%9C%E4%B8%9A/</url>
    <content><![CDATA[<p>排版再说。</p>
<span id="more"></span>
<p>本次泛做试题来自于 21 场 ICPC 竞赛，所有竞赛均在 Codeforces 的 GYM 中可以找到（下面列表 中结尾的数字代表其在 GYM 中的场次编号，例如 101221 对应  <a href="http://codeforces.com/gym/101221）：">http://codeforces.com/gym/101221）：</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A 2014 ACM-ICPC World Finals，101221。</span><br><span class="line">B 2015 ACM-ICPC World Finals，101239。</span><br><span class="line">C 2016 ACM-ICPC World Finals，101242。</span><br><span class="line">D 2017 ACM-ICPC World Finals，101471。</span><br><span class="line">E 2018 ACM-ICPC World Finals，102482。</span><br><span class="line">F 2019 ICPC World Finals，102511。</span><br><span class="line">G 2017-2018 ACM-ICPC Northern Eurasia (Northeastern European Regional) Contest (NEERC 17)，101630。</span><br><span class="line">H 2016-2017 ACM-ICPC Northeastern European Regional Contest (NEERC 16)，101190。</span><br><span class="line">I 2015-2016 ACM-ICPC Northeastern European Regional Contest (NEERC 15)，100851。</span><br><span class="line">J 2014-2015 ACM-ICPC Northeastern European Regional Contest (NEERC 14)，100553。</span><br><span class="line">K 2013-2014 ACM-ICPC Northeastern European Regional Contest (NEERC 13)，100307。</span><br><span class="line">L 2017-2018 ACM-ICPC, Central Europe Regional Contest (CERC 17)，101620。</span><br><span class="line">M 2016-2017 ACM-ICPC, Central Europe Regional Contest (CERC 16)，101173。</span><br><span class="line">N 2015-2016 ACM-ICPC, Central Europe Regional Contest (CERC 15)，101480。</span><br><span class="line">O 2014-2015 ACM-ICPC, Central Europe Regional Contest (CERC 14)，100543。</span><br><span class="line">P 2013-2014 ACM ICPC, Central Europe Regional Contest (CERC 13)，100299。</span><br><span class="line">Q 2017-2018 ACM-ICPC, NEERC, Northern Subregional Contest，101612。</span><br><span class="line">R 2016-2017 ACM-ICPC, NEERC, Northern Subregional Contess，101142。</span><br><span class="line">S 2015-2016 ACM-ICPC, NEERC, Northern Subregional Contest，100801。</span><br><span class="line">T 2014-2015 ACM-ICPC, NEERC, Northern Subregional Contest，100531。</span><br><span class="line">U 2013-2014 ACM-ICPC, NEERC, Northern Subregional Contest，100269。</span><br></pre></td></tr></table></figure>
<p>附件中的 excel 表包含了每位选手负责的 3 道题目，每道题目用两个字符表示，第一个字符代 表该题所属的竞赛（见上述列表），第二个字符代表该题在所属竞赛中的题号。例如 AG 表示 2014 ACM-ICPC World Finals 中的 G 题 Metal Processing Plant。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">题目1	题目2	题目3	序号（题目1）</span><br><span class="line">UC	DG	RB	101</span><br><span class="line">HC	IB	FJ	105</span><br><span class="line">GK	UH	QH	109</span><br><span class="line">EE	DJ	IH	113</span><br><span class="line">HL	MI	EJ	117</span><br><span class="line">MB	UI	ED	121</span><br><span class="line">AA	BG	ML	125</span><br><span class="line">CF	TE	QG	129</span><br><span class="line">PH	UJ	BB	133</span><br><span class="line">CI	SD	NG	137</span><br><span class="line">DK	LD	IJ	141</span><br><span class="line">NC	BJ	FK	145</span><br><span class="line">CH	NJ	RH	149</span><br><span class="line">QF	BE	KI	153</span><br><span class="line">AC	PG	HM	157</span><br><span class="line">PJ	ID	EG	161</span><br><span class="line">SI	KC	GI	165</span><br><span class="line">OG	CK	DB	169</span><br><span class="line">QE	GH	NI	173</span><br><span class="line">OL	KA	MG	177</span><br><span class="line">SG	NL	KH	181</span><br><span class="line">QJ	KG	AB	185</span><br><span class="line">KD	IL	NF	189</span><br><span class="line">CM	NE	HD	193</span><br><span class="line">DH	EC	BM	197</span><br><span class="line">LC	CD	JI	201</span><br><span class="line">DL	ME	PE	205</span><br><span class="line">LI	AI	RJ	209</span><br><span class="line">SF	II	HG	213</span><br><span class="line">RE	LL	OA	217</span><br><span class="line">FB	QD	DA	221</span><br><span class="line">TC	AE	CB	225</span><br><span class="line">GF	AG	JC	229</span><br><span class="line">PA	TH	EH	233</span><br><span class="line">AJ	TK	EI	237</span><br><span class="line">UL	AF	SK	241</span><br><span class="line">BH	RD	OK	245</span><br><span class="line">FC	JD	OE	249</span><br><span class="line">TF	FF	DD	253</span><br><span class="line">CJ	HK	MJ	257</span><br><span class="line">FG	GL	AL	261</span><br><span class="line">FI	IC	QC	265</span><br><span class="line">MD	OJ	HI	269</span><br><span class="line">KK	JH	OB	273</span><br><span class="line">BK	GJ	KE	277</span><br><span class="line">CA	IK	LE	281</span><br><span class="line">RI	LK	PD	285</span><br><span class="line">JE	LB	HB	289</span><br><span class="line">BL	RG	AH	293</span><br><span class="line">AK	GG	JG	297</span><br></pre></td></tr></table></figure>
<p><a href="https://vjudge.net/contest/493385">https://vjudge.net/contest/493385</a></p>
<p>CF Gym 题号：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">100269C</span><br><span class="line">101471G</span><br><span class="line">101142B</span><br><span class="line">101190C</span><br><span class="line">100851B</span><br><span class="line">102511J</span><br><span class="line">101630K</span><br><span class="line">100269H</span><br><span class="line">101612H</span><br><span class="line">102482E</span><br><span class="line">101471J</span><br><span class="line">100851H</span><br><span class="line">101190L</span><br><span class="line">101173I</span><br><span class="line">102482J</span><br><span class="line">101173B</span><br><span class="line">100269I</span><br><span class="line">102482D</span><br><span class="line">101221A</span><br><span class="line">101239G</span><br><span class="line">101173L</span><br><span class="line">101242F</span><br><span class="line">100531E</span><br><span class="line">101612G</span><br><span class="line">100299H</span><br><span class="line">100269J</span><br><span class="line">101239B</span><br><span class="line">101242I</span><br><span class="line">100801D</span><br><span class="line">101480G</span><br><span class="line">101471K</span><br><span class="line">101620D</span><br><span class="line">100851J</span><br><span class="line">101480C</span><br><span class="line">101239J</span><br><span class="line">102511K</span><br><span class="line">101242H</span><br><span class="line">101480J</span><br><span class="line">101142H</span><br><span class="line">101612F</span><br><span class="line">101239E</span><br><span class="line">100307I</span><br><span class="line">101221C</span><br><span class="line">100299G</span><br><span class="line">101190M</span><br><span class="line">100299J</span><br><span class="line">100851D</span><br><span class="line">102482G</span><br><span class="line">100801I</span><br><span class="line">100307C</span><br><span class="line">101630I</span><br><span class="line">100543G</span><br><span class="line">101242K</span><br><span class="line">101471B</span><br><span class="line">101612E</span><br><span class="line">101630H</span><br><span class="line">101480I</span><br><span class="line">100543L</span><br><span class="line">100307A</span><br><span class="line">101173G</span><br><span class="line">100801G</span><br><span class="line">101480L</span><br><span class="line">100307H</span><br><span class="line">101612J</span><br><span class="line">100307G</span><br><span class="line">101221B</span><br><span class="line">100307D</span><br><span class="line">100851L</span><br><span class="line">101480F</span><br><span class="line">101242M</span><br><span class="line">101480E</span><br><span class="line">101190D</span><br><span class="line">101471H</span><br><span class="line">102482C</span><br><span class="line">101239M</span><br><span class="line">101620C</span><br><span class="line">101242D</span><br><span class="line">100553I</span><br><span class="line">101471L</span><br><span class="line">101173E</span><br><span class="line">100299E</span><br><span class="line">101620I</span><br><span class="line">101221I</span><br><span class="line">101142J</span><br><span class="line">100801F</span><br><span class="line">100851I</span><br><span class="line">101190G</span><br><span class="line">101142E</span><br><span class="line">101620L</span><br><span class="line">100543A</span><br><span class="line">102511B</span><br><span class="line">101612D</span><br><span class="line">101471A</span><br><span class="line">100531C</span><br><span class="line">101221E</span><br><span class="line">101242B</span><br><span class="line">101630F</span><br><span class="line">101221G</span><br><span class="line">100553C</span><br><span class="line">100299A</span><br><span class="line">100531H</span><br><span class="line">102482H</span><br><span class="line">101221J</span><br><span class="line">100531K</span><br><span class="line">102482I</span><br><span class="line">100269L</span><br><span class="line">101221F</span><br><span class="line">100801K</span><br><span class="line">101239H</span><br><span class="line">101142D</span><br><span class="line">100543K</span><br><span class="line">102511C</span><br><span class="line">100553D</span><br><span class="line">100543E</span><br><span class="line">100531F</span><br><span class="line">102511F</span><br><span class="line">101471D</span><br><span class="line">101242J</span><br><span class="line">101190K</span><br><span class="line">101173J</span><br><span class="line">102511G</span><br><span class="line">101630L</span><br><span class="line">101221L</span><br><span class="line">102511I</span><br><span class="line">100851C</span><br><span class="line">101612C</span><br><span class="line">101173D</span><br><span class="line">100543J</span><br><span class="line">101190I</span><br><span class="line">100307K</span><br><span class="line">100553H</span><br><span class="line">100543B</span><br><span class="line">101239K</span><br><span class="line">101630J</span><br><span class="line">100307E</span><br><span class="line">101242A</span><br><span class="line">100851K</span><br><span class="line">101620E</span><br><span class="line">101142I</span><br><span class="line">101620K</span><br><span class="line">100299D</span><br><span class="line">100553E</span><br><span class="line">101620B</span><br><span class="line">101190B</span><br><span class="line">101239L</span><br><span class="line">101142G</span><br><span class="line">101221H</span><br><span class="line">101221K</span><br><span class="line">101630G</span><br><span class="line">100553G</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>集训队作业</tag>
      </tags>
  </entry>
  <entry>
    <title>BBC 化学史笔记</title>
    <url>/2021/02/08/BBC%E5%8C%96%E5%AD%A6%E5%8F%B2%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>又是化学寒假作业……</p>
<span id="more"></span>
<p>视频在 <a href="https://www.bilibili.com/video/BV1ss411H7wv">https://www.bilibili.com/video/BV1ss411H7wv</a></p>
<ul>
<li>1807 年，英国化学家 Davy（戴维）通过电解熔融的 $\rm KOH$ 的方式发现了 $\rm K$（化学方程式为 $\rm 4KOH\xrightarrow{通电}4K+2H_2O+O_2\uparrow$。</li>
<li>瑞士医生、炼金术师 Paracelsus（帕拉塞尔苏斯）第一个反对古希腊四元素说和亚里士多德的四体液说。 </li>
<li>1669 年，德国商人 Brand（波兰特）在蒸馏尿液的时候制得了白磷，第一个发现了磷元素。磷的发现被认为是标记着炼金术的结束，也标记着化学作为一门科学的开始。</li>
<li>波义尔用磷和六倍质量的硫制出了火柴的雏形。 </li>
<li>卡文迪什将金属置于酸中制得了 $\rm H_2$，并测得了 $\rm H_2$ 的密度；他还发现其能够和 $\rm O_2$ 反应，并测得了反应中 $\rm H_2$ 与 $\rm O_2$ 的体积比。这些成果在 1766 年发表。</li>
<li>Priestley（普利斯特里）在 1777 年首次详细叙述了 $\rm O_2$ 的性质。</li>
<li>拉瓦锡研究了普利斯特里的实验，提出了氧化学说以解释金属在空气中加热质量变大的现象。</li>
</ul>
]]></content>
      <categories>
        <category>化学史</category>
      </categories>
      <tags>
        <tag>化学</tag>
      </tags>
  </entry>
  <entry>
    <title>CSP2019游记</title>
    <url>/2019/11/18/CSP2019-diary/</url>
    <content><![CDATA[<p>一个蒟蒻OIer的游记……</p>
<span id="more"></span>
<p>前置信息：本人广东初二学生。</p>
<h2 id="2019-10-19-CSP-S-Round-1"><a href="#2019-10-19-CSP-S-Round-1" class="headerlink" title="2019.10.19 CSP-S Round 1"></a>2019.10.19 CSP-S Round 1</h2><p>前面的选择题严重影响了我对整张试卷难度的预测。。。然后车牌那道题我做了几百遍也没做出选项内答案，在写了十多分钟然而无果后，摔笔，瞎蒙，下一道。（2333）</p>
<p>距离考试还有 15 分钟的时候，下课铃响彻了整个二中，把考生都吓到了，然后铃声响完以后一个男声响起：“距离考试结束还有 15 分钟”……</p>
<p>然后由于低估了题目难度以及数量，导致留给最后一道题的时候只有五分钟了……半蒙半做地搞完了</p>
<p>出来的时候拿着 A 卷答案去和别人 B 卷答案对，感觉要凉</p>
<p>最后？77 分，GD分数线 71 分</p>
<p>lemon 拿到了 70.5 分，不幸与复赛无缘，荣获年度最佳人品称号！</p>
<p>后来分数线降到了 68 分。可是还是有一位神仙同学 $\sin$ 无缘复赛。</p>
<h2 id="2019-10-19-CSP-J-Round-1"><a href="#2019-10-19-CSP-J-Round-1" class="headerlink" title="2019.10.19 CSP-J Round 1"></a>2019.10.19 CSP-J Round 1</h2><p>本来由于上午的惨痛教训，我打算尽快完成试卷。后来想想还是算了，慢慢地品味试卷。</p>
<p>品味的时候看到上午那道阉割版车牌题，差点笑出了声</p>
<p>考试快结束的时候又是那个男声。。。</p>
<p>最后考了83分。至于分数线，那并不重要。（反正过了就对了 hhhh）</p>
<h2 id="2019-11-16-CSP-S-Round-2-Day-1"><a href="#2019-11-16-CSP-S-Round-2-Day-1" class="headerlink" title="2019.11.16 CSP-S Round 2 Day 1"></a>2019.11.16 CSP-S Round 2 Day 1</h2><p>本来以为会是 <code>JianGuo70Nian</code> 之类的，没想到是个……</p>
<p>首先是 D1T1 ，显然这种题就是 SB 题，但是我一开始很 SB 地写了 <code>int</code>……样例 #3 成功爆炸，于是重新看看代码……改成 <code>long long</code>后成功过了样例 #3，幸甚至哉，我在代码某一行写了一段注释：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// long time no see, my great great great great great great great great grandfather!</span></span><br></pre></td></tr></table></figure>
<p>出考场时：“蛤？要<code>unsigned long long</code>？？！”<strong>见祖宗啦——</strong></p>
<p>D1T2我就直接打了50分$O(n^2)$暴力，然后出考场的时候——</p>
<blockquote>
<p>啊？T2要异或和？我直接加起来了<br>——又是lemon</p>
</blockquote>
<p>2333……</p>
<p>D1T3没调出暴力，心态炸了</p>
<p>预估分数：$95+50+0=145$，见祖宗花了我$5$分……</p>
<p>话说我一开始一直在用垃圾Dev-C++，因为Notepad++在我眼里是最烂的编辑器，而Vim和Emacs明显不是我这种蒟蒻能够用的……考了一个半小时之后在桌面上看到了Sublime Text 3……</p>
<p>坐我右边那位大佬超爱Dev-C++的调试功能，只见一条红条和一条蓝条在屏幕上迅速移动……</p>
<h2 id="2019-11-16-CSP-J-Round-2"><a href="#2019-11-16-CSP-J-Round-2" class="headerlink" title="2019.11.16 CSP-J Round 2"></a>2019.11.16 CSP-J Round 2</h2><p>考试前为了放松身心，在二中楼梯上颓了好久的Rolling Sky。。。</p>
<p>有一个初一的陌生同学（他：我真的不是小学生！！！）一直盯着我玩，而且嘴里吐出了很多他们本来应该在下个学期生物课上才会学到的奇妙词语……</p>
<p>考试了，我看了看桌面，没有Sublime Text 3。找了半天没找到游戏，唉……</p>
<p>坐我左边的是一位大佬，他根本不知道压缩包可以压缩，于是他想要测样例的时候就先把文件拖出来，然后输密码，然后用写字板打开，从上往下划（不知道<code>Ctrl/Command+A</code>吗），然后丢到控制台里。</p>
<p>到T2的最后一个样例的时候，他本来打算故技重施的，结果尝试了一两分钟后发现还要好久……我以为他要全选的，结果并不！他把写字板调成一个屏幕能显示四五十页的，然后再次选择。。。</p>
<p>控制台那里粘贴了好久……</p>
<p>最后他把他自己的文件夹扔到了压缩包里，然后在文件夹内有一个叫<code>***的基本资料</code>的文件夹，里面是什么呢？一个把<code>CSP-J.pdf</code>更名为<code>***.pdf</code>的文件，然后他用记事本打开，在前面加了自己的信息。</p>
<p>做T3的时候我傻了，明明想到了正解但是因为只会证t==2时正确性，于是……</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 骗分1</span></span><br><span class="line"><span class="comment">// 骗分2</span></span><br><span class="line"><span class="keyword">if</span> (t == <span class="number">2</span>) &#123;</span><br><span class="line">	<span class="comment">// 正解</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我冤啊……</p>
<p>（话说T1的样例#2还是<code>title.in</code>和<code>title.out</code>来着？不知道有多少人知道……</p>
<h2 id="2019-11-17-CSP-S-Round-2-Day-2"><a href="#2019-11-17-CSP-S-Round-2-Day-2" class="headerlink" title="2019.11.17 CSP-S Round 2 Day 2"></a>2019.11.17 CSP-S Round 2 Day 2</h2><p>看到D2T1，果断打暴力。</p>
<p>看到D2T2，犹豫了许久还是打了暴力。</p>
<p>看到D2T3，发现突然忘记树的重心怎么打了……于是懵逼……</p>
<p>反正还有一个小时，掏出桌面小程序，打开数字华容道……</p>
<p>颓了五局然后发现！右边的右边的右边的lemon还在打！我顿时觉得T3好像有分可夺，于是瞄了一眼……<strong>这链的情况不是在嘲讽人吗？？！</strong></p>
<p>最后因为只有三十分钟了，成功没有调出来……</p>
]]></content>
      <categories>
        <category>CSP2019</category>
      </categories>
      <tags>
        <tag>游记</tag>
        <tag>OI</tag>
      </tags>
  </entry>
  <entry>
    <title>CSP2019总结</title>
    <url>/2019/11/25/CSP2019-summary/</url>
    <content><![CDATA[<p>一个初二OIer的总结~</p>
<span id="more"></span>
<h2 id="CSP-J"><a href="#CSP-J" class="headerlink" title="CSP-J"></a>CSP-J</h2><h3 id="T1-数字游戏"><a href="#T1-数字游戏" class="headerlink" title="T1 数字游戏"></a>T1 数字游戏</h3><p>这道题是真的水题，要不是今年PJ难度降低了不少，不然觉得连做PJD1T1的难度都没有。。。</p>
<p>相信不用怎么讲的了，因为CCF保证输入文件没有任何多余行末空格或多余文件末换行，不用考虑奇怪的情况，比如假设CCF不保证，那么下面的代码就很容易被Hack：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">(<span class="type">signed</span> argc, <span class="type">char</span> **argv)</span> </span>&#123;</span><br><span class="line">	<span class="type">char</span> ch;</span><br><span class="line">	<span class="type">int</span> tot = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (~(ch = std::<span class="built_in">getchar</span>())) &#123;</span><br><span class="line">		tot += ch - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="T2-公交换乘"><a href="#T2-公交换乘" class="headerlink" title="T2 公交换乘"></a>T2 公交换乘</h3><p>实话说我对这道题究竟该怎么实现纠结了很久……本来想皮一下用<code>std::set</code>的，但是最后还是用了队列实现。。</p>
<p>不知道考场怎么想的，为了遍历队列，我手写了一个长达41行的队列……应该是过了吧</p>
<h3 id="T3-纪念品"><a href="#T3-纪念品" class="headerlink" title="T3 纪念品"></a>T3 纪念品</h3><p>成功爆炸……</p>
<p>大致思路是分段乱搞……如果<code>t==1</code>，那当然直接输出<code>m</code>啦，然后其他的点乱打，成功只拿到了<code>t==1</code>的点。</p>
<p>考场上本来应该能想到背包的……</p>
<h3 id="T4-加工零件"><a href="#T4-加工零件" class="headerlink" title="T4 加工零件"></a>T4 加工零件</h3><p>考试的时候当然想到了从1开始求最短路的方法，但是苦于不知道怎么处理奇偶的情况，然后在lg上40分……</p>
<p>个人觉得奇偶还挺好想的？</p>
<h2 id="CSP-S"><a href="#CSP-S" class="headerlink" title="CSP-S"></a>CSP-S</h2><h3 id="D1T1-格雷码"><a href="#D1T1-格雷码" class="headerlink" title="D1T1 格雷码"></a>D1T1 格雷码</h3><p>祖宗我总算见到你了！！！</p>
<p>显然我没有开<code>unsigned long long</code>，但是就算开了<code>unsigned long long</code>也不能保证万无一失，比如这是我考场的代码，就算<code>long long</code>全部改成<code>unsigned long long</code>也无济于事：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">code</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;n, <span class="type">const</span> <span class="type">long</span> <span class="type">long</span> &amp;m)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">		std::<span class="built_in">putchar</span>(m + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (m &lt; (<span class="number">1ll</span> &lt;&lt; (n - <span class="number">1</span>))) &#123;</span><br><span class="line">		std::<span class="built_in">putchar</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">		<span class="built_in">code</span>(n - <span class="number">1</span>, m);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		std::<span class="built_in">putchar</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">		<span class="built_in">code</span>(n - <span class="number">1</span>, (<span class="number">1ll</span> &lt;&lt; n) - <span class="number">1ll</span> - m);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为什么呢？因为<code>1ull &lt;&lt; 64</code>会爆<code>unsigned long long</code>。</p>
<h3 id="D1T2-括号树"><a href="#D1T2-括号树" class="headerlink" title="D1T2 括号树"></a>D1T2 括号树</h3><p>直接打链的情况，调了会之后在lg上75分。</p>
<p>对于每个结点，一路往上走，直到到根结点，然后记得维护前缀和，然后对于i和i的一个祖宗j，如果<code>S[i] &gt; S[j]</code>，那么直接不合法，跳出。否则如果<code>S[i] == S[j]</code>，<code>++ans[i]</code>。</p>
<h3 id="D1T3-树上的数"><a href="#D1T3-树上的数" class="headerlink" title="D1T3 树上的数"></a>D1T3 树上的数</h3><p><del>样例都没过，还想拿分？</del></p>
<p>在lg上成功爆0，大致讲讲思路吧</p>
<p>时间复杂度$O(n!)$，对于$1\sim n$的每个排列（使用<code>&lt;algorithm&gt;</code>里的<code>std::next_permutation</code>），都计算一遍当前字典序，然后看看最小的是什么。</p>
<h3 id="D2T1-Emiya家今天的饭"><a href="#D2T1-Emiya家今天的饭" class="headerlink" title="D2T1 Emiya家今天的饭"></a>D2T1 Emiya家今天的饭</h3><p>直接爆搜。lg上能跑32分，大概拿满爆搜分了吧……</p>
<p>按照烹饪方法枚举。</p>
<p>考场上居然忘记剪枝了，表示崩溃……</p>
<h3 id="D2T2-划分"><a href="#D2T2-划分" class="headerlink" title="D2T2 划分"></a>D2T2 划分</h3><p>真的不知道怎么打了。。。随便想了一种解法，看似没有问题，过了样例，然而只拿了8分的高分……</p>
<h3 id="D2T3-树的重心"><a href="#D2T3-树的重心" class="headerlink" title="D2T3 树的重心"></a>D2T3 树的重心</h3><p>连暴力都木有，直接一个<code>std::freopen</code>和<code>std::fclose</code>结束了程序。。。</p>
<h2 id="估分"><a href="#估分" class="headerlink" title="估分"></a>估分</h2><p>CSP-J 250~290</p>
<p>CSP-S 160~190</p>
]]></content>
      <categories>
        <category>CSP2019</category>
      </categories>
      <tags>
        <tag>OI</tag>
      </tags>
  </entry>
  <entry>
    <title>CSP2019合辑</title>
    <url>/2019/11/20/CSP2019/</url>
    <content><![CDATA[<ol>
<li><a href="/2019/11/18/CSP2019-diary">CSP2019游记</a></li>
<li><a href="/2019/11/25/CSP2019-summary">CSP2019总结</a></li>
<li><a href="/2019/11/30/CSP2019-solution">CSP2019题解</a>（鸽了，已隐藏）</li>
</ol>
]]></content>
      <categories>
        <category>CSP2019</category>
      </categories>
      <tags>
        <tag>OI</tag>
      </tags>
  </entry>
  <entry>
    <title>LG4513. 小白逛公园</title>
    <url>/2021/02/04/LG4513/</url>
    <content><![CDATA[<!--comment-->
<span id="more"></span>
<h2 id="题意描述"><a href="#题意描述" class="headerlink" title="题意描述"></a>题意描述</h2><p>source: <a href="https://www.luogu.com.cn/problem/P4513">https://www.luogu.com.cn/problem/P4513</a></p>
<p>维护一个序列，支持两种操作：</p>
<ul>
<li>单点修改</li>
<li>区间最大子段和</li>
</ul>
<p>区间长度 $\in[1,500000]$，操作次数 $\in[1,100000]$，值域是 $[-1000,1000]$。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>维护区间和、区间最大前缀和、区间最大后缀和、区间最大子段和。这样很容易合并（详见 <code>pushup</code> 函数），也很容易查询（查询的时候返回一个包含上述四个信息的 <code>std::tuple&lt;int, int, int, int&gt;</code> 四元组，合并类似 <code>pushup</code>，详见代码 68 行）。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>source: <a href="https://www.luogu.com.cn/record/46114702">https://www.luogu.com.cn/record/46114702</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> FILE_IO</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tuple&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> hermione &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">scan</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span>... Args&gt; <span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">(Type&amp;, Args&amp;...)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">token</span><span class="params">(<span class="type">char</span>*)</span></span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt; <span class="function"><span class="type">int</span> <span class="title">lread</span><span class="params">(Type*, <span class="type">const</span> <span class="type">int</span>&amp;)</span></span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span>... Args&gt; <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> Type&amp;, <span class="type">const</span> Args&amp;...)</span></span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt; <span class="function"><span class="type">void</span> <span class="title">lprint</span><span class="params">(Type* arr, <span class="type">const</span> <span class="type">int</span>&amp; length)</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(var) (print(#var, <span class="string">&quot; = &quot;</span>, var, <span class="string">&#x27;\n&#x27;</span>))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lineno() (print(<span class="string">&quot;line &quot;</span>, __LINE__, <span class="string">&#x27;\n&#x27;</span>))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> MAXN = <span class="number">500005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">  <span class="type">int</span> l, r;</span><br><span class="line">  <span class="type">int</span> ans, maxpre, maxsuf, sum;</span><br><span class="line">&#125; tree[MAXN * <span class="number">4</span>];</span><br><span class="line"><span class="type">int</span> a[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> root)</span> </span>&#123;</span><br><span class="line">  tree[root].sum = tree[root * <span class="number">2</span>].sum + tree[root * <span class="number">2</span> + <span class="number">1</span>].sum;</span><br><span class="line">  tree[root].maxpre = std::<span class="built_in">max</span>(tree[root * <span class="number">2</span>].maxpre, tree[root * <span class="number">2</span>].sum + tree[root * <span class="number">2</span> + <span class="number">1</span>].maxpre);</span><br><span class="line">  tree[root].maxsuf = std::<span class="built_in">max</span>(tree[root * <span class="number">2</span> + <span class="number">1</span>].maxsuf, tree[root * <span class="number">2</span> + <span class="number">1</span>].sum + tree[root * <span class="number">2</span>].maxsuf);</span><br><span class="line">  tree[root].ans = std::<span class="built_in">max</span>(&#123;tree[root * <span class="number">2</span>].ans, tree[root * <span class="number">2</span> + <span class="number">1</span>].ans, tree[root * <span class="number">2</span>].maxsuf + tree[root * <span class="number">2</span> + <span class="number">1</span>].maxpre&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> root, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">  tree[root] = &#123;l, r&#125;;</span><br><span class="line">  <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">    tree[root] = &#123;l, r, a[l], a[l], a[l], a[l]&#125;;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">build</span>(root * <span class="number">2</span>, l, mid);</span><br><span class="line">  <span class="built_in">build</span>(root * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">  <span class="built_in">pushup</span>(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> root, <span class="type">int</span> q, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> l = tree[root].l, r = tree[root].r;</span><br><span class="line">  <span class="keyword">if</span> (q &lt; l || r &lt; q) &#123; <span class="keyword">return</span>; &#125;</span><br><span class="line">  <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">    tree[root] = &#123;l, r, val, val, val, val&#125;;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">modify</span>(root * <span class="number">2</span>, q, val);</span><br><span class="line">  <span class="built_in">modify</span>(root * <span class="number">2</span> + <span class="number">1</span>, q, val);</span><br><span class="line">  <span class="built_in">pushup</span>(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::tuple&lt;<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>&gt; <span class="title">query</span><span class="params">(<span class="type">int</span> root, <span class="type">int</span> ql, <span class="type">int</span> qr)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> l = tree[root].l, r = tree[root].r;</span><br><span class="line">  <span class="type">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;tree[root].ans, tree[root].maxpre, tree[root].maxsuf, tree[root].sum&#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (qr &lt;= mid) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">query</span>(root * <span class="number">2</span>, ql, qr);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ql &gt; mid) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">query</span>(root * <span class="number">2</span> + <span class="number">1</span>, ql, qr);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">auto</span> x = <span class="built_in">query</span>(root * <span class="number">2</span>, ql, qr), y = <span class="built_in">query</span>(root * <span class="number">2</span> + <span class="number">1</span>, ql, qr);</span><br><span class="line">    <span class="keyword">return</span> &#123;std::<span class="built_in">max</span>(&#123;std::<span class="built_in">get</span>&lt;<span class="number">0</span>&gt;(x), std::<span class="built_in">get</span>&lt;<span class="number">0</span>&gt;(y), std::<span class="built_in">get</span>&lt;<span class="number">2</span>&gt;(x) + std::<span class="built_in">get</span>&lt;<span class="number">1</span>&gt;(y)&#125;), std::<span class="built_in">max</span>(std::<span class="built_in">get</span>&lt;<span class="number">1</span>&gt;(x), std::<span class="built_in">get</span>&lt;<span class="number">3</span>&gt;(x) + std::<span class="built_in">get</span>&lt;<span class="number">1</span>&gt;(y)), std::<span class="built_in">max</span>(std::<span class="built_in">get</span>&lt;<span class="number">2</span>&gt;(y), std::<span class="built_in">get</span>&lt;<span class="number">3</span>&gt;(y) + std::<span class="built_in">get</span>&lt;<span class="number">2</span>&gt;(x)), std::<span class="built_in">get</span>&lt;<span class="number">3</span>&gt;(x) + std::<span class="built_in">get</span>&lt;<span class="number">3</span>&gt;(y)&#125;;  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> n, m;</span><br><span class="line">  <span class="built_in">read</span>(n, m);</span><br><span class="line">  <span class="built_in">lread</span>(a + <span class="number">1</span>, n);</span><br><span class="line">  <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">    <span class="type">int</span> op = <span class="built_in">scan</span>();</span><br><span class="line">    <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="type">int</span> l, r;</span><br><span class="line">      <span class="built_in">read</span>(l, r);</span><br><span class="line">      <span class="keyword">if</span> (l &gt; r) &#123; l ^= r ^= l ^= r; &#125;</span><br><span class="line">      <span class="built_in">print</span>(std::<span class="built_in">get</span>&lt;<span class="number">0</span>&gt;(<span class="built_in">query</span>(<span class="number">1</span>, l, r)), <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="type">int</span> q, s;</span><br><span class="line">      <span class="built_in">read</span>(q, s);</span><br><span class="line">      <span class="built_in">modify</span>(<span class="number">1</span>, q, s);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> TYPE_LESS_IO_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TYPE_LESS_IO_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mread(format) return std::scanf(<span class="string">&quot;%&quot;</span> format, &amp;x)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">(<span class="type">char</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> std::<span class="built_in">scanf</span>(<span class="string">&quot; %c&quot;</span>, &amp;x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mread</span>(<span class="string">&quot;hhu&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">(<span class="type">short</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mread</span>(<span class="string">&quot;hd&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">(<span class="type">unsigned</span> <span class="type">short</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mread</span>(<span class="string">&quot;hu&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">(<span class="type">int</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mread</span>(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mread</span>(<span class="string">&quot;u&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">(<span class="type">long</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mread</span>(<span class="string">&quot;ld&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mread</span>(<span class="string">&quot;lu&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">(<span class="type">long</span> <span class="type">long</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mread</span>(<span class="string">&quot;lld&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mread</span>(<span class="string">&quot;llu&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">(<span class="type">float</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mread</span>(<span class="string">&quot;f&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">(<span class="type">double</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mread</span>(<span class="string">&quot;lf&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">(<span class="type">long</span> <span class="type">double</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mread</span>(<span class="string">&quot;Lf&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">(<span class="type">void</span>*&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mread</span>(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">(<span class="type">char</span>* x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> std::<span class="built_in">scanf</span>(<span class="string">&quot; %s&quot;</span>, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">const</span> Type&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="string">&quot;read type error&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">(Type&amp; x, Args&amp;... args)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">read</span>(x) != EOF ? <span class="built_in">read</span>(args...) : EOF;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">token</span><span class="params">(<span class="type">char</span>* x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> std::<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lread</span><span class="params">(Type* arr, <span class="type">const</span> <span class="type">int</span>&amp; length)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">    ret = <span class="built_in">read</span>(arr[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">scan</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> x;</span><br><span class="line">  <span class="built_in">read</span>(x);</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mprint(format) std::printf(<span class="string">&quot;%&quot;</span> format, x)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">char</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mprint</span>(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">char</span>* x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mprint</span>(<span class="string">&quot;s&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mprint</span>(<span class="string">&quot;s&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mprint</span>(<span class="string">&quot;hhu&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">short</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mprint</span>(<span class="string">&quot;hd&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">short</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mprint</span>(<span class="string">&quot;hu&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mprint</span>(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">int</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mprint</span>(<span class="string">&quot;u&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">long</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mprint</span>(<span class="string">&quot;ld&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">long</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mprint</span>(<span class="string">&quot;lu&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">long</span> <span class="type">long</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mprint</span>(<span class="string">&quot;lld&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mprint</span>(<span class="string">&quot;llu&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">double</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mprint</span>(<span class="string">&quot;le&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">long</span> <span class="type">double</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mprint</span>(<span class="string">&quot;Le&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">void</span>* x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mprint</span>(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> Type&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="string">&quot;print type error&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> Type&amp; x, <span class="type">const</span> Args&amp;... args)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">print</span>(x);</span><br><span class="line">  <span class="built_in">print</span>(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">lprint</span><span class="params">(Type* arr, <span class="type">const</span> <span class="type">int</span>&amp; length)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">    <span class="built_in">print</span>(arr[i]);</span><br><span class="line">    <span class="built_in">print</span>(i == length - <span class="number">1</span> ? <span class="string">&#x27;\n&#x27;</span> : <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">lprint</span><span class="params">(<span class="type">char</span>* arr, <span class="type">const</span> <span class="type">int</span>&amp; length)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">    <span class="built_in">print</span>(arr[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">typeof_print_LF_before_EOF</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  ~<span class="built_in">typeof_print_LF_before_EOF</span>() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; print_LF_before_EOF;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// ifndef TYPE_LESS_IO_</span></span></span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// namespace hermione</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="meta">#<span class="keyword">if</span> defined(DEBUG) &amp;&amp; defined(FILE_IO)</span></span><br><span class="line">  (std::<span class="built_in">freopen</span>(<span class="string">&quot;test.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin));</span><br><span class="line">  (std::<span class="built_in">freopen</span>(<span class="string">&quot;test.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout));</span><br><span class="line">  <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  <span class="type">int</span> ret = hermione::<span class="built_in">main</span>(argc, argv);</span><br><span class="line">  <span class="meta">#<span class="keyword">if</span> defined(DEBUG) &amp;&amp; defined(FILE_IO)</span></span><br><span class="line">  (std::<span class="built_in">fclose</span>(stdin));</span><br><span class="line">  (std::<span class="built_in">fclose</span>(stdout));</span><br><span class="line">  <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>线段树</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>LOJ10129. 「一本通 4.3 练习 3」维护序列</title>
    <url>/2021/02/03/LOJ10129/</url>
    <content><![CDATA[<!--comment-->
<span id="more"></span>
<h2 id="题意描述"><a href="#题意描述" class="headerlink" title="题意描述"></a>题意描述</h2><p>source: <a href="https://loj.ac/p/10129">https://loj.ac/p/10129</a></p>
<p>维护一个 $\bmod M$ 意义下的序列，支持三种操作：</p>
<ul>
<li>区间乘 $x$</li>
<li>区间加 $x$</li>
<li>求区间和</li>
</ul>
<p>序列的初始值和 $x$ 都在 $[0,10^9]$ 内，$1\le M\le 10^9+7$，$1\le n,m\le 10^5$。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>将两种操作合并为一种操作“乘 $k$ 再加 $b$”，这样对于一个长为 $\rm len$、和为 $S$ 的序列，每个数乘 $k$ 再加 $b$ 后新的和 $S’$ 就是 $kS+b\cdot\rm len$。详见代码。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><a href="https://loj.ac/s/1055841">https://loj.ac/s/1055841</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> FILE_IO</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> hermione &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">scan</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span>... Args&gt; <span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">(Type&amp;, Args&amp;...)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">token</span><span class="params">(<span class="type">char</span>*)</span></span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt; <span class="function"><span class="type">int</span> <span class="title">lread</span><span class="params">(Type*, <span class="type">const</span> <span class="type">int</span>&amp;)</span></span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span>... Args&gt; <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> Type&amp;, <span class="type">const</span> Args&amp;...)</span></span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt; <span class="function"><span class="type">void</span> <span class="title">lprint</span><span class="params">(Type* arr, <span class="type">const</span> <span class="type">int</span>&amp; length)</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(var) (print(#var, <span class="string">&quot; = &quot;</span>, var, <span class="string">&#x27;\n&#x27;</span>))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lineno() (print(<span class="string">&quot;line &quot;</span>, __LINE__, <span class="string">&#x27;\n&#x27;</span>))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> MAXN = <span class="number">100005</span>;</span><br><span class="line"><span class="type">int</span> MOD;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">oper</span> &#123;</span><br><span class="line">  <span class="type">long</span> <span class="type">long</span> k, b;</span><br><span class="line">  <span class="built_in">oper</span>(<span class="type">int</span> k_ = <span class="number">1</span>, <span class="type">int</span> b_ = <span class="number">0</span>) : <span class="built_in">k</span>(k_), <span class="built_in">b</span>(b_) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">oper <span class="title">compose</span><span class="params">(oper x, oper y)</span> </span>&#123;</span><br><span class="line">  oper res;</span><br><span class="line">  <span class="keyword">auto</span> [k1, b1] = x;</span><br><span class="line">  <span class="keyword">auto</span> [k2, b2] = y;</span><br><span class="line">  res.k = k1 * k2 % MOD;</span><br><span class="line">  res.b = b1 * k2 % MOD + b2 % MOD;</span><br><span class="line">  res.b %= MOD;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">  <span class="type">int</span> l, r;</span><br><span class="line">  <span class="type">long</span> <span class="type">long</span> sum;</span><br><span class="line">  oper lazy;</span><br><span class="line">&#125; tree[MAXN * <span class="number">4</span>];</span><br><span class="line"><span class="type">int</span> a[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> root, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">  tree[root] = &#123;l, r&#125;;</span><br><span class="line">  <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">    tree[root].sum = a[l];</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">build</span>(root * <span class="number">2</span>, l, mid);</span><br><span class="line">  <span class="built_in">build</span>(root * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">  tree[root].sum = (tree[root * <span class="number">2</span>].sum + tree[root * <span class="number">2</span> + <span class="number">1</span>].sum) % MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> root)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (tree[root].lazy.k != <span class="number">1</span> || tree[root].lazy.b != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="type">int</span> l = tree[root].l, r = tree[root].r;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">    tree[root * <span class="number">2</span>].sum = tree[root * <span class="number">2</span>].sum * tree[root].lazy.k % MOD + tree[root].lazy.b * (mid - l + <span class="number">1</span>);</span><br><span class="line">    tree[root * <span class="number">2</span>].sum %= MOD;</span><br><span class="line">    tree[root * <span class="number">2</span> + <span class="number">1</span>].sum = tree[root * <span class="number">2</span> + <span class="number">1</span>].sum * tree[root].lazy.k % MOD + tree[root].lazy.b * (r - mid);</span><br><span class="line">    tree[root * <span class="number">2</span> + <span class="number">1</span>].sum %= MOD;</span><br><span class="line">    tree[root * <span class="number">2</span>].lazy = <span class="built_in">compose</span>(tree[root * <span class="number">2</span>].lazy, tree[root].lazy);</span><br><span class="line">    tree[root * <span class="number">2</span> + <span class="number">1</span>].lazy = <span class="built_in">compose</span>(tree[root * <span class="number">2</span> + <span class="number">1</span>].lazy, tree[root].lazy);</span><br><span class="line">    tree[root].lazy = &#123;<span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> root, <span class="type">int</span> ql, <span class="type">int</span> qr, oper delta)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> l = tree[root].l, r = tree[root].r;</span><br><span class="line">  <span class="keyword">if</span> (qr &lt; l || r &lt; ql) &#123; <span class="keyword">return</span>; &#125;</span><br><span class="line">  <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr) &#123;</span><br><span class="line">    tree[root].sum = tree[root].sum * delta.k % MOD + delta.b * (r - l + <span class="number">1</span>) % MOD;</span><br><span class="line">    tree[root].sum %= MOD;</span><br><span class="line">    tree[root].lazy = <span class="built_in">compose</span>(tree[root].lazy, delta);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">pushdown</span>(root);</span><br><span class="line">  <span class="built_in">modify</span>(root * <span class="number">2</span>, ql, qr, delta);</span><br><span class="line">  <span class="built_in">modify</span>(root * <span class="number">2</span> + <span class="number">1</span>, ql, qr, delta);</span><br><span class="line">  tree[root].sum = (tree[root * <span class="number">2</span>].sum + tree[root * <span class="number">2</span> + <span class="number">1</span>].sum) % MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">query</span><span class="params">(<span class="type">int</span> root, <span class="type">int</span> ql, <span class="type">int</span> qr)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> l = tree[root].l, r = tree[root].r;</span><br><span class="line">  <span class="keyword">if</span> (qr &lt; l || r &lt; ql) &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">  <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr) &#123;</span><br><span class="line">    <span class="keyword">return</span> tree[root].sum;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">pushdown</span>(root);</span><br><span class="line">  <span class="keyword">return</span> (<span class="built_in">query</span>(root * <span class="number">2</span>, ql, qr) + <span class="built_in">query</span>(root * <span class="number">2</span> + <span class="number">1</span>, ql, qr)) % MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line">  <span class="built_in">read</span>(n, MOD);</span><br><span class="line">  <span class="built_in">lread</span>(a + <span class="number">1</span>, n);</span><br><span class="line">  <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">  <span class="type">int</span> m = <span class="built_in">scan</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">    <span class="type">int</span> op, l, r;</span><br><span class="line">    <span class="built_in">read</span>(op, l, r);</span><br><span class="line">    <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="type">int</span> c = <span class="built_in">scan</span>();</span><br><span class="line">      <span class="built_in">modify</span>(<span class="number">1</span>, l, r, &#123;c, <span class="number">0</span>&#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="type">int</span> c = <span class="built_in">scan</span>();</span><br><span class="line">      <span class="built_in">modify</span>(<span class="number">1</span>, l, r, &#123;<span class="number">1</span>, c&#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="built_in">query</span>(<span class="number">1</span>, l, r), <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> TYPE_LESS_IO_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TYPE_LESS_IO_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mread(format) return std::scanf(<span class="string">&quot;%&quot;</span> format, &amp;x)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">(<span class="type">char</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> std::<span class="built_in">scanf</span>(<span class="string">&quot; %c&quot;</span>, &amp;x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mread</span>(<span class="string">&quot;hhu&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">(<span class="type">short</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mread</span>(<span class="string">&quot;hd&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">(<span class="type">unsigned</span> <span class="type">short</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mread</span>(<span class="string">&quot;hu&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">(<span class="type">int</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mread</span>(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mread</span>(<span class="string">&quot;u&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">(<span class="type">long</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mread</span>(<span class="string">&quot;ld&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mread</span>(<span class="string">&quot;lu&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">(<span class="type">long</span> <span class="type">long</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mread</span>(<span class="string">&quot;lld&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mread</span>(<span class="string">&quot;llu&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">(<span class="type">float</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mread</span>(<span class="string">&quot;f&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">(<span class="type">double</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mread</span>(<span class="string">&quot;lf&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">(<span class="type">long</span> <span class="type">double</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mread</span>(<span class="string">&quot;Lf&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">(<span class="type">void</span>*&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mread</span>(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">(<span class="type">char</span>* x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> std::<span class="built_in">scanf</span>(<span class="string">&quot; %s&quot;</span>, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">const</span> Type&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="string">&quot;read type error&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">(Type&amp; x, Args&amp;... args)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">read</span>(x) != EOF ? <span class="built_in">read</span>(args...) : EOF;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">token</span><span class="params">(<span class="type">char</span>* x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> std::<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lread</span><span class="params">(Type* arr, <span class="type">const</span> <span class="type">int</span>&amp; length)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">    ret = <span class="built_in">read</span>(arr[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">scan</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> x;</span><br><span class="line">  <span class="built_in">read</span>(x);</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mprint(format) std::printf(<span class="string">&quot;%&quot;</span> format, x)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">char</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mprint</span>(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">char</span>* x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mprint</span>(<span class="string">&quot;s&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mprint</span>(<span class="string">&quot;s&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mprint</span>(<span class="string">&quot;hhu&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">short</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mprint</span>(<span class="string">&quot;hd&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">short</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mprint</span>(<span class="string">&quot;hu&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mprint</span>(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">int</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mprint</span>(<span class="string">&quot;u&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">long</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mprint</span>(<span class="string">&quot;ld&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">long</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mprint</span>(<span class="string">&quot;lu&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">long</span> <span class="type">long</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mprint</span>(<span class="string">&quot;lld&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mprint</span>(<span class="string">&quot;llu&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">double</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mprint</span>(<span class="string">&quot;le&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">long</span> <span class="type">double</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mprint</span>(<span class="string">&quot;Le&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">void</span>* x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">mprint</span>(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> Type&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="string">&quot;print type error&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> Type&amp; x, <span class="type">const</span> Args&amp;... args)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">print</span>(x);</span><br><span class="line">  <span class="built_in">print</span>(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">lprint</span><span class="params">(Type* arr, <span class="type">const</span> <span class="type">int</span>&amp; length)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">    <span class="built_in">print</span>(arr[i]);</span><br><span class="line">    <span class="built_in">print</span>(i == length - <span class="number">1</span> ? <span class="string">&#x27;\n&#x27;</span> : <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">lprint</span><span class="params">(<span class="type">char</span>* arr, <span class="type">const</span> <span class="type">int</span>&amp; length)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">    <span class="built_in">print</span>(arr[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">typeof_print_LF_before_EOF</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  ~<span class="built_in">typeof_print_LF_before_EOF</span>() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; print_LF_before_EOF;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// ifndef TYPE_LESS_IO_</span></span></span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// namespace hermione</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="meta">#<span class="keyword">if</span> defined(DEBUG) &amp;&amp; defined(FILE_IO)</span></span><br><span class="line">  (std::<span class="built_in">freopen</span>(<span class="string">&quot;test.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin));</span><br><span class="line">  (std::<span class="built_in">freopen</span>(<span class="string">&quot;test.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout));</span><br><span class="line">  <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  <span class="type">int</span> ret = hermione::<span class="built_in">main</span>(argc, argv);</span><br><span class="line">  <span class="meta">#<span class="keyword">if</span> defined(DEBUG) &amp;&amp; defined(FILE_IO)</span></span><br><span class="line">  (std::<span class="built_in">fclose</span>(stdin));</span><br><span class="line">  (std::<span class="built_in">fclose</span>(stdout));</span><br><span class="line">  <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>线段树</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>OI中数学常见结论证明</title>
    <url>/2020/04/03/OI%E4%B8%AD%E6%95%B0%E5%AD%A6%E5%B8%B8%E8%A7%81%E7%BB%93%E8%AE%BA%E8%AF%81%E6%98%8E/</url>
    <content><![CDATA[<p>由于最近在复习数学，所以会看到很多省略证明的结论……</p>
<p>可是显然很多结论的我而言一点都不平凡 QAQ……</p>
<p>于是我打算整理一下。</p>
<span id="more"></span>
<p>下文中未经说明所有数的值域都为 $\N^+$。</p>
<h2 id="Dirichlet-卷积-amp-Mobius-反演"><a href="#Dirichlet-卷积-amp-Mobius-反演" class="headerlink" title="Dirichlet 卷积 &amp; Möbius 反演"></a>Dirichlet 卷积 &amp; Möbius 反演</h2><h3 id="varphi-ast1-mathrm-id"><a href="#varphi-ast1-mathrm-id" class="headerlink" title="$\varphi\ast1=\mathrm{id}$"></a>$\varphi\ast1=\mathrm{id}$</h3><p>即证 $\sum\limits_{d\mid n}\varphi(d)=n$。</p>
<p>设 $f(n)=\sum\limits_{d\mid n}\varphi(d)$，则 $f$ 为积性函数，因为：</p>
<p>设 $x,y$ 满足 $x\perp y$，则：</p>
<script type="math/tex; mode=display">\begin{aligned}&f(xy)=f(x)f(y)\\\Leftrightarrow&\sum\limits_{d\mid xy}\varphi(d)=\sum\limits_{d_1\mid x}\varphi(d_1)\sum\limits_{d_2\mid y}\varphi(d_2)\\\Leftrightarrow&\sum\limits_{d\mid xy}\varphi(d)=\sum\limits_{d_1\mid x}\sum\limits_{d_2\mid y}\varphi(d_1)\varphi(d_2)\\\Leftrightarrow&\sum\limits_{d\mid xy}\varphi(d)=\sum\limits_{d_1\mid x}\sum\limits_{d_2\mid y}\varphi(d_1d_2)\end{aligned}</script><p>容易知道若 $p$ 为素数，则 $f(p)=\varphi(1)+\varphi(p)=1+(p-1)=p$。</p>
<p>因为 $f(p^k)=\sum\limits_{i=0}^k\varphi(p^i)=\varphi(p^k)+f(p^{k-1})=p^k-p^{k-1}+f(p^{k-1})$，于是 $f(p^k)=p^k$。</p>
<p>对于合数，直接质因数分解，然后乘起来就好了。</p>
<p>证毕。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="除法分块"><a href="#除法分块" class="headerlink" title="除法分块"></a>除法分块</h3><p>若 $\left\lfloor\dfrac{n}{x}\right\rfloor&lt; \left\lfloor\dfrac n{x-1}\right\rfloor$ 且 $x\geqslant \sqrt n$，则 $\left\lfloor\dfrac{n}{\left\lfloor\frac{n}{\left\lfloor\frac{n}{x}\right\rfloor}\right\rfloor}\right\rfloor=\left\lfloor\dfrac nx\right\rfloor$ 且 $\left\lfloor\dfrac{n}{\left\lfloor\frac{n}{\left\lfloor\frac{n}{x}\right\rfloor}\right\rfloor+1}\right\rfloor&lt;\left\lfloor\dfrac nx\right\rfloor$。</p>
<p>证明：</p>
<p>为方便表述，令 $y=\left\lfloor\dfrac nx\right\rfloor$。于是我们有</p>
<p>$y\leqslant\dfrac n{\left\lfloor\frac ny\right\rfloor}\Leftrightarrow\left\lfloor\dfrac ny\right\rfloor\leqslant \dfrac ny$</p>
<p>所以</p>
<script type="math/tex; mode=display">y\leqslant\left\lfloor\dfrac n{\left\lfloor\frac ny\right\rfloor}\right\rfloor</script><p>还有</p>
<script type="math/tex; mode=display">\left\lfloor\dfrac n{\left\lfloor\frac ny\right\rfloor+1}\right\rfloor<y\Leftrightarrow\dfrac ny<\left\lfloor\dfrac ny\right\rfloor+1</script><p>于是</p>
<script type="math/tex; mode=display">\left\lfloor\dfrac n{\left\lfloor\frac ny\right\rfloor+1}\right\rfloor<y\leqslant\left\lfloor\dfrac n{\left\lfloor\frac ny\right\rfloor}\right\rfloor</script><p>所以</p>
<script type="math/tex; mode=display">\left\lfloor\dfrac n{\left\lfloor\frac ny\right\rfloor+1}\right\rfloor<\left\lfloor\dfrac n{\left\lfloor\frac ny\right\rfloor}\right\rfloor</script><p>接着我们要证</p>
<script type="math/tex; mode=display">\left\lfloor\dfrac n{\left\lfloor\frac ny\right\rfloor}\right\rfloor=y</script><p>即证</p>
<script type="math/tex; mode=display">y+1>\dfrac n{\left\lfloor\frac ny\right\rfloor}</script><p>即证</p>
<script type="math/tex; mode=display">y\left\lfloor\dfrac ny\right\rfloor+\left\lfloor\dfrac ny\right\rfloor>n</script><p>即证</p>
<script type="math/tex; mode=display">\left\lfloor\dfrac ny\right\rfloor>n\bmod y</script><p>该命题的一个充分不必要条件为：</p>
<script type="math/tex; mode=display">\left\lfloor\dfrac ny\right\rfloor\geqslant y</script><p>若 $\left\lfloor\dfrac ny\right\rfloor&lt;y$，则：</p>
<script type="math/tex; mode=display">y\geqslant\left\lfloor\dfrac ny\right\rfloor+1>\dfrac ny</script><p>于是</p>
<script type="math/tex; mode=display">y>\sqrt n\Leftrightarrow\left\lfloor\dfrac nx\right\rfloor>\sqrt n\Leftrightarrow\dfrac nx>\sqrt n\Leftrightarrow x<\sqrt n</script><p>矛盾。</p>
<p>证毕。</p>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>Sperner定理</title>
    <url>/2019/11/30/Sperners-theorem/</url>
    <content><![CDATA[<h2 id="定理内容"><a href="#定理内容" class="headerlink" title="定理内容"></a>定理内容</h2><p>Sperner定理：对于任意一个包含$n$个元素的集合$U$，我们最多能选择$\dbinom n {\left\lfloor\frac {n} 2\right\rfloor}$个子集，使得这些子集中没有包含关系。<br><span id="more"></span></p>
<h2 id="定理证明"><a href="#定理证明" class="headerlink" title="定理证明"></a>定理证明</h2><h3 id="引理-Lubell–Yamamoto–Meshalkin不等式"><a href="#引理-Lubell–Yamamoto–Meshalkin不等式" class="headerlink" title="引理 Lubell–Yamamoto–Meshalkin不等式"></a>引理 Lubell–Yamamoto–Meshalkin不等式</h3><p>对于包含 $n$ 个元素的集合 $U$，令 $A$ 为一个由 $U$ 的子集组成的集合，使得 $\forall A_1, A_2 \in A$，$A_1 \subsetneq A_2$ 和 $A_1 \supsetneq A_2$ 均不成立。设 $a_k$ 表示 $A$ 中大小为 $k$ 的集合的个数，则有：</p>
<p>$\sum\limits_{k=0}^n \dfrac{a_k}{\binom n k}\leqslant 1$</p>
<p>证明：</p>
<blockquote>
<p>对于 $S\in U$，我们构造一个 $1\sim n$ 的排列 $\sigma$，使得对于 $i\in S,j\not\in S$，有 $\sigma_i &lt; \sigma_j$。</p>
<p>譬如，对于 $U={1, 2, 3, 4},S={2, 4}$，${\sigma_1, \sigma_2, \sigma_3, \sigma_4}$有以下$4$种可能：</p>
<p>$\begin{aligned}{2, 4, 1, 3}\<br>{2, 4, 3, 1}\<br>{4, 2, 1, 3}\<br>{4, 2, 3, 1}\end{aligned}$</p>
<p>如果 $S\subseteq S’$ ，则必定存在一个 $1\sim n$ 的排列 $\tau$，使得 $S$ 和 $S’$ 都能构造出 $\tau$。</p>
<p>证明：</p>
<blockquote>
<p>$\tau$ 的构造由三部分组成：${S}, {\complement<em>{S’}S}, {\complement</em>{U}S’}$。证毕。</p>
</blockquote>
<p>还有命题：如果存在一个 $1\sim n$ 的排列 $\tau$，使得 $S$ 和 $S’$ 都能构造出 $\tau$，则必有 $S\subseteq S’$ 或 $S’\subseteq S$。</p>
<p>证明：</p>
<blockquote>
<p>首先 $S$ 和 $S’$ 一定都是 ${\tau}$ 的一个前缀，然后 $|S|&lt;|S’|\Leftrightarrow S \subsetneq S’$，$|S|=|S’|\Leftrightarrow S = S’$，$|S|&gt;|S’|\Leftrightarrow S’ \subsetneq S$。证毕。</p>
</blockquote>
<p>由 $A$ 的性质得，由 $A$ 内的元素所构造的排列两两不同。</p>
<p>因为集合 $S$ 能够构造出 $|S|!\left(n-|S|\right)!$ 个不同的排列，所以对于 $S\in A$ 的所有$S$能够构造出的不同的排列的个数为：</p>
<p>$\sum\limits_{S\in A} |S|!\left(n - |S|\right)!$</p>
<p>因为它们两两不同，又因为$1\sim n$的排列个数只有$n!$种，所以：</p>
<p>$\sum\limits_{S\in A} |S|!\left(n - |S|\right)! \leqslant n!\quad\cdots(1)$</p>
<p>将$S$按照$|S|$整理得：</p>
<p>$\sum\limits<em>{S\in A} |S|!\left(n - |S|\right)! = \sum\limits</em>{k = 0}^n a_k k!(n-k)!\quad\cdots(2)$</p>
<p>联立$(1),(2)$得：</p>
<p>$\sum\limits_{k = 0}^n a_k k!(n-k)! \leqslant n!$</p>
<p>将$n!$除过去：</p>
<p>$\sum\limits_{k = 0}^n \dfrac{a_k}{\binom n k} \leqslant 1$</p>
<p>证毕！</p>
</blockquote>
<h3 id="Sperner定理证明"><a href="#Sperner定理证明" class="headerlink" title="Sperner定理证明"></a>Sperner定理证明</h3><blockquote>
<p>令$S$为一个由$U$的子集组成的集合，使得$\forall S_1, S_2 \in S$，$S_1 \subsetneq S_2$和$S_1 \supsetneq S_2$均不成立。令$s_k$表示$S$中包含$k$个元素的集合的个数。</p>
<p>$\because \forall 0\leqslant k \leqslant n$，有$\binom n {\left\lfloor \frac n 2 \right\rfloor} \geqslant \binom n k$，</p>
<p>$\therefore \dfrac {s_k} {\binom n {\left\lfloor \frac n 2 \right\rfloor}} \leqslant \dfrac {s_k} {\binom n k}$。</p>
<p>$\therefore \sum\limits<em>{k=0}^n\dfrac {s_k} {\binom n {\left\lfloor \frac n 2 \right\rfloor}\leqslant \sum\limits</em>{k=0}^n\dfrac {s_k} {\binom n k}}\leqslant 1 $。</p>
<p>$\therefore \sum\limits_{k=0}^n\dfrac {s_k} {\binom n {\left\lfloor \frac n 2 \right\rfloor}} \leqslant 1$。</p>
<p>$\therefore |S| = \sum\limits_{k = 0}^n s_k \leqslant \binom n {\left\lfloor \frac n 2 \right\rfloor}$。</p>
<p>证毕！</p>
</blockquote>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>用旋转 Treap 维护名次树</title>
    <url>/2021/02/04/Treap/</url>
    <content><![CDATA[<p>Treap 是一种平衡树，通过在 BST 的基础上对每个结点钦定一个随机的优先级并在保证对于 BST 的性质不变的情况下，优先级满足堆的性质。Treap 分为两种，旋转 Treap（通过左旋/右旋操作维护性质）或者非旋 Treap（通过分裂/合并的方式维护性质），这里主要讲解旋转 Treap。</p>
<span id="more"></span>
<h2 id="维护方式"><a href="#维护方式" class="headerlink" title="维护方式"></a>维护方式</h2><p>如果用旋转 Treap 维护名次树，每个结点需要维护以下信息：</p>
<ul>
<li>两个儿子（如果不存在，记为空结点）</li>
<li>权值</li>
<li>出现次数</li>
<li>子树大小</li>
<li>优先级</li>
</ul>
<p>同时还要维护整棵树的树根。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">  <span class="type">int</span> l, r, cnt, val;</span><br><span class="line">  <span class="type">long</span> <span class="type">long</span> pri;</span><br><span class="line">  <span class="type">int</span> sze;</span><br><span class="line">&#125; tree[MAXN];</span><br><span class="line"><span class="type">int</span> size, root; </span><br></pre></td></tr></table></figure>
<h3 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h3><p>如果我们按照 BST 的方式插入，因为新加入的结点一定是叶结点，难免会出现优先级不满足堆的性质的情况，所以我们要使用<strong>旋转</strong>的方式来在中序遍历不变的情况下对调某个结点和其父结点的父子关系。</p>
<p>具体解释如下图：</p>
<p><img src="pict/Treap/image-20210204234541058.png" alt="image-20210204234541058"></p>
<p>左旋同理。易知旋转操作不改变整棵树的中序遍历（即不破坏 BST 性质）。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">rrotate</span><span class="params">(<span class="type">int</span> &amp;k)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> tmp = tree[k].l;</span><br><span class="line">  tree[k].l = tree[tmp].r;</span><br><span class="line">  tree[tmp].r = k;</span><br><span class="line">  tree[k].sze = tree[tree[k].l].sze + tree[tree[k].r].sze + tree[k].cnt;</span><br><span class="line">  tree[tmp].sze = tree[tree[tmp].l].sze + tree[tree[tmp].r].sze + tree[tmp].cnt;</span><br><span class="line">  k = tmp; <span class="comment">// 因为一般我们希</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">lrotate</span><span class="params">(<span class="type">int</span> &amp;k)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> tmp = tree[k].r;</span><br><span class="line">  tree[k].r = tree[tmp].l;</span><br><span class="line">  tree[tmp].l = k;</span><br><span class="line">  tree[k].sze = tree[tree[k].l].sze + tree[tree[k].r].sze + tree[k].cnt;</span><br><span class="line">  tree[tmp].sze = tree[tree[tmp].l].sze + tree[tree[tmp].r].sze + tree[tmp].cnt;</span><br><span class="line">  k = tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>有了旋转，插入就很容易了。</p>
<ul>
<li>如果要插入到空树，直接新建结点。（无需维护父结点信息）</li>
<li>如果插入的权值等于树根权值，出现次数 ++ 即可。</li>
<li>如果以上条件皆不满足，根据权值与树根权值的关系判断应递归到左子树还是右子树继续插入（接下来以左子树为例继续讲解）。左子树插入完毕后（注意这里需要更新左儿子），如果左儿子的优先级与父亲优先级不满足堆性质，则将左儿子右旋至根。</li>
</ul>
<p>经过以上条件，可以大致明白：新插入的结点会从叶结点一路向上旋转，直到自己的优先级与其目前父亲的优先级满足堆性质。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> &amp;k, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (k == <span class="number">0</span>) &#123;</span><br><span class="line">    tree[++size] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, val, <span class="built_in">static_cast</span>&lt;<span class="type">long</span> <span class="type">long</span>&gt;(<span class="built_in">random</span>()), <span class="number">1</span>&#125;;</span><br><span class="line">    k = size;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (tree[k].val == val) &#123;</span><br><span class="line">    tree[k].cnt++;</span><br><span class="line">    tree[k].sze++;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tree[k].val &lt; val) &#123;</span><br><span class="line">    tree[k].sze++;</span><br><span class="line">    <span class="built_in">insert</span>(tree[k].r, val);</span><br><span class="line">    <span class="keyword">if</span> (tree[tree[k].r].pri &lt; tree[k].pri) &#123;</span><br><span class="line">      <span class="built_in">lrotate</span>(k);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    tree[k].sze++;</span><br><span class="line">    <span class="built_in">insert</span>(tree[k].l, val);</span><br><span class="line">    <span class="keyword">if</span> (tree[tree[k].l].pri &lt; tree[k].pri) &#123;</span><br><span class="line">      <span class="built_in">rrotate</span>(k);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><ul>
<li>如果树根的权值等于要删除的值：<ul>
<li>如果树根出现次数 $&gt;1$，直接出现次数 — 即可。</li>
<li>如果树根是叶子结点，将树置为空树即可。</li>
<li>如果树根只有一个叶结点，将树置为其唯一的一棵子树即可。</li>
<li>否则，比较左儿子与右儿子的优先级（以下假设左儿子优先级大于右儿子），并将左儿子右旋到根。接着递归处理当前树根的右儿子（即原先的树根，它的权值等于要删除的值）。</li>
</ul>
</li>
<li>否则，比较树根的权值与要删除的值，递归处理。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">erase</span><span class="params">(<span class="type">int</span> &amp;k, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (k == <span class="number">0</span>) &#123; <span class="keyword">return</span>; &#125;</span><br><span class="line">  <span class="keyword">if</span> (tree[k].val == val) &#123;</span><br><span class="line">    <span class="keyword">if</span> (tree[k].cnt &gt; <span class="number">1</span>) &#123;</span><br><span class="line">      tree[k].cnt--;</span><br><span class="line">      tree[k].sze--;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tree[k].l == <span class="number">0</span> &amp;&amp; tree[k].r == <span class="number">0</span>) &#123;</span><br><span class="line">      k = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tree[k].l != <span class="number">0</span> &amp;&amp; tree[k].r == <span class="number">0</span>) &#123;</span><br><span class="line">      k = tree[k].l;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tree[k].l == <span class="number">0</span> &amp;&amp; tree[k].r != <span class="number">0</span>) &#123;</span><br><span class="line">      k = tree[k].r;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tree[tree[k].l].pri &lt; tree[tree[k].r].pri) &#123;</span><br><span class="line">      <span class="built_in">rrotate</span>(k);</span><br><span class="line">      <span class="built_in">erase</span>(k, val);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">lrotate</span>(k);</span><br><span class="line">      <span class="built_in">erase</span>(k, val);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (tree[k].val &gt; val) &#123;</span><br><span class="line">    tree[k].sze--;</span><br><span class="line">    <span class="built_in">erase</span>(tree[k].l, val);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    tree[k].sze--;</span><br><span class="line">    <span class="built_in">erase</span>(tree[k].r, val);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="排名"><a href="#排名" class="headerlink" title="排名"></a>排名</h3><p>利用子树大小判断该递归还是该返回即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">query_rnk</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (k == <span class="number">0</span>) &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125; <span class="comment">// 如果找不到</span></span><br><span class="line">  <span class="keyword">if</span> (tree[k].val == val) &#123;</span><br><span class="line">    <span class="keyword">return</span> tree[tree[k].l].sze + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (tree[k].val &gt; val) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">query_rnk</span>(tree[k].l, val);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> tree[tree[k].l].sze + tree[k].cnt + <span class="built_in">query_rnk</span>(tree[k].r, val);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="第-k-大"><a href="#第-k-大" class="headerlink" title="第 k 大"></a>第 k 大</h3><p>与排名类似。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">query_nth</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (k == <span class="number">0</span>) &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">  <span class="keyword">if</span> (val &lt;= tree[tree[k].l].sze) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">query_nth</span>(tree[k].l, val);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val &lt;= tree[tree[k].l].sze + tree[k].cnt) &#123;</span><br><span class="line">    <span class="keyword">return</span> tree[k].val;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">query_nth</span>(tree[k].r, val - tree[tree[k].l].sze - tree[k].cnt);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="前驱-后继"><a href="#前驱-后继" class="headerlink" title="前驱/后继"></a>前驱/后继</h3><p>可以用前四个函数实现（插入，查询排名，查询第 k 大，删除），不过常数太大。</p>
<p>以前驱为例，一个结点的前驱一定是它作为右儿子的爸爸或者它左子树中序遍历的最后一个结点（即左儿子的右儿子的右儿子的右儿子……），所以：</p>
<p>如果还没经过目标结点：</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://en.wikipedia.org/wiki/Treap">https://en.wikipedia.org/wiki/Treap</a></li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>平衡树</tag>
        <tag>Treap</tag>
      </tags>
  </entry>
  <entry>
    <title>[多项式学习笔记]快速 Fourier 变换</title>
    <url>/2022/01/30/fast-fourier-transform/</url>
    <content><![CDATA[<p>快速 Fourier 变换是离散 Fourier 的一种优化，在 OI 中常用来加速一些卷积。</p>
<span id="more"></span>
<h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><p>首先，什么是 Fourier 变换？</p>
<p>连续的 Fourier 变换将可积函数 $f:\R\to\C$ 表示为复指数函数的积分或级数形式：</p>
<script type="math/tex; mode=display">
\hat f(\xi)=\int_{-\infty}^\infty f(x)e^{-2\pi\mathrm ix\xi}{\ \rm d}x</script><p>，其中 $\xi$ 为任意实数；Fourier 逆变换用 $\hat f$ 确定 $f$：</p>
<script type="math/tex; mode=display">
f(x)=\int_{-\infty}^\infty\hat f(\xi)e^{2\pi\mathrm i\xi x}{\ \rm d}\xi</script><p>，其中 $x$ 为任意实数。</p>
<p>离散 Fourier 变换就是将连续的积分转为离散的求和。</p>
<hr>
<p>如果给定多项式 $f(x)$、$g(x)$，求多项式 $h(x)=f(x)\cdot g(x)$，容易给出一种朴素的 $\Theta(\deg f\cdot \deg g)$ 的算法。</p>
<p>考虑用将特定选取的 $x_1,\cdots, x_n$ 代入多项式 $f$ 得到的结果 $f(x_1),\cdots,f(x_n)$ 来表示 $f$，用同样的方法表示 $g$，再将结果直接点乘，再过一次逆变换，就可以得到 $h$ 了。</p>
<p>根据连续 Fourier 变换的形式不难知道，这里的 $x_1,\cdots,x_n$ 为单位根 $\omega_n^0,\cdots, \omega_n^{(n-1)}$。</p>
<p>称代入 $\omega_n^i$ 的过程为 <strong>离散 Fourier 变换</strong>(Discrete Fourier Transform, DFT)。</p>
<p>朴素的做法仍然是 $\Theta(n^2)$ 的，我们考虑分治：</p>
<script type="math/tex; mode=display">
\begin{aligned}
f(x)&=a_0+a_1x+a_2x^2+a_3x^3+\cdots+a_nx^n\\
&=(a_0+a_2x^2+\cdots)+(a_1x+a_3x^3+\cdots)\\
&=(a_0+a_2x^2+\cdots)+x(a_1+a_3x^2+\cdots)
\end{aligned}</script><p>发现括号内形式一样，令 $f_1(x)=a_0+a_2x+\cdots$，$f_2(x)=a_1+a_3x+\cdots$，则</p>
<script type="math/tex; mode=display">
f(x)=f_1(x^2)+xf_2(x^2)</script><p>当然，为了使分治后两个多项式度数相同，我们需要令 $n=2^k$。</p>
<p>将 $\omega<em>n^k$ 代入：$f(\omega_n^k)=f_1(\omega</em>{n/2}^k)+\omega<em>{n/2}^kf_2(\omega</em>{n/2}^k)$。我们仅需要知道 $f<em>1,f_2$ 对 $\omega</em>{n/2}^i$ 的所有取值即可算得 $f$ 对 $\omega_n^i$ 的所有取值。</p>
<p>于是我们只需要先将奇偶次项分离，分别计算后再进行合并，时间复杂度 $T(n)=2T(\dfrac n2)+\Theta(n)=\Theta(n\log n)$。</p>
<p>发现奇偶次项分离的空间复杂度为 $\Theta(n\log n)$，且内存开销较大，难以接受。</p>
<p>观察系数分离情况：</p>
<script type="math/tex; mode=display">
\{0,1,2,3,4,5,6,7\}\\
\{0,2,4,6,1,3,5,7\}\\
\{0,4,2,6,1,5,3,7\}</script><p>不难证明 $i$ 在结束后的位置 $j$ 一定为 $i$ 在 $k$ 位二进制表达下逆序的值 $\operatorname{rev}(i)$。</p>
<p>利用 $\operatorname{rev}(i)=\left\lfloor\dfrac{\operatorname{rev}\left(\left\lfloor\dfrac i2\right\rfloor\right)}2\right\rfloor+[i\bmod 2=1]\cdot\dfrac n2$ 能够在 $\Theta(n)$ 的时间复杂度递推求得 $\operatorname{rev}(i)$。</p>
<p>离散 Fourier 变换的逆变换称为 <strong>逆离散 Fourier 变换</strong>(Inverse Discrete Fourier Transform, IDFT)。</p>
<p>容易知道，若视 $[a_1,\cdots, a_n]^{\rm tr}$ 与 $[y_1,\cdots, y_n]^{\rm tr}$ 为列向量，则 DFT 本质上为左乘一个矩阵</p>
<script type="math/tex; mode=display">
\begin{bmatrix}
1&1&1&\cdots&1\\
1&\omega_n^1&\omega_n^2&\cdots&\omega_n^{n-1}\\
1&\omega_n^2&\omega_n^4&\cdots&\omega_n^{2(n-1)}\\
\vdots&\vdots&\vdots&\ddots&\vdots\\
1&\omega_n^{n-1}&\omega_n^{2(n-1)}&\cdots&\omega_n^{(n-1)(n-1)}
\end{bmatrix}</script><p>容易验证该矩阵的逆矩阵为其每一项取倒数再除以 $n$。</p>
<p>所以 IDFT 时仅需将 DFT 用的单位根取倒数，算完除以 $n$ 即可。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>多项式乘法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file #108. 多项式乘法.cpp</span></span><br><span class="line"><span class="comment"> * @author Kuriyama Mirai (hermione_granger@foxmail.com)</span></span><br><span class="line"><span class="comment"> * @brief </span></span><br><span class="line"><span class="comment"> * @link https://loj.ac/s/1368664</span></span><br><span class="line"><span class="comment"> * @date 2022-01-30</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @copyright Copyright (c) 2022</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> mirai &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> std::complex&lt;<span class="type">long</span> <span class="type">double</span>&gt; comp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> MAXN = <span class="number">262514</span>; <span class="comment">// 262144</span></span><br><span class="line"><span class="type">int</span> rev[MAXN];</span><br><span class="line">comp a[MAXN], b[MAXN], c[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fft</span><span class="params">(comp* arr, <span class="type">int</span> len, <span class="type">int</span> on)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; rev[i]) &#123;</span><br><span class="line">      std::<span class="built_in">swap</span>(arr[i], arr[rev[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> n = <span class="number">2</span>; n &lt;= len; n &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="function">comp <span class="title">omega_n</span><span class="params">(std::cos(<span class="number">2</span> * M_PI / n), std::sin(on * <span class="number">2</span> * M_PI / n))</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i += n) &#123;</span><br><span class="line">      comp omega = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; i + n / <span class="number">2</span>; ++j) &#123; <span class="comment">// 注意 j 的取值！</span></span><br><span class="line">        <span class="keyword">auto</span> u = arr[j], v = arr[j + n / <span class="number">2</span>];</span><br><span class="line">        arr[j] = u + omega * v;</span><br><span class="line">        arr[j + n / <span class="number">2</span>] = u - omega * v;</span><br><span class="line">        omega *= omega_n;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (on == <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">      arr[i] /= len;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> n, m;</span><br><span class="line">  std::<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    <span class="type">int</span> read;</span><br><span class="line">    std::<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;read);</span><br><span class="line">    a[i] = read;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">    <span class="type">int</span> read;</span><br><span class="line">    std::<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;read);</span><br><span class="line">    b[i] = read;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> len = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (len &lt; n + m + <span class="number">2</span>) &#123;</span><br><span class="line">    len &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; len; ++i) &#123;</span><br><span class="line">    rev[i] = rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (i &amp; <span class="number">1</span>) &#123;</span><br><span class="line">      rev[i] |= len &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// std::printf(&quot;%d:%d\n&quot;, i, rev[i]);</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">fft</span>(a, len, <span class="number">1</span>);</span><br><span class="line">  <span class="built_in">fft</span>(b, len, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">    c[i] = a[i] * b[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">fft</span>(c, len, <span class="number">-1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n + m; ++i) &#123;</span><br><span class="line">    std::<span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>, std::<span class="built_in">llroundl</span>(c[i].<span class="built_in">real</span>())); <span class="comment">// 一定要注意四舍五入而非向下取整</span></span><br><span class="line">  &#125;</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> mirai::<span class="built_in">main</span>(argc, argv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>洛谷的坑人模板：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file P3803 【模板】多项式乘法（FFT） V.cpp</span></span><br><span class="line"><span class="comment"> * @author Kuriyama Mirai (hermione_granger@foxmail.com)</span></span><br><span class="line"><span class="comment"> * @brief </span></span><br><span class="line"><span class="comment"> * @date 2022-01-30</span></span><br><span class="line"><span class="comment"> * @link https://www.luogu.com.cn/record/68373463</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @copyright Copyright (c) 2022</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> mirai &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> std::complex&lt;<span class="type">long</span> <span class="type">double</span>&gt; comp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> MAXN = <span class="number">2100000</span>; <span class="comment">// 1048576*2</span></span><br><span class="line"><span class="type">int</span> rev[MAXN];</span><br><span class="line">comp a[MAXN], b[MAXN], c[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fft</span><span class="params">(comp* arr, <span class="type">int</span> len, <span class="type">int</span> on)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; rev[i]) &#123;</span><br><span class="line">      std::<span class="built_in">swap</span>(arr[i], arr[rev[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> n = <span class="number">2</span>; n &lt;= len; n &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="function">comp <span class="title">omega_n</span><span class="params">(std::cos(<span class="number">2</span> * M_PI / n), std::sin(on * <span class="number">2</span> * M_PI / n))</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i += n) &#123;</span><br><span class="line">      comp omega = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; i + n / <span class="number">2</span>; ++j) &#123; <span class="comment">// 注意 j 的取值！</span></span><br><span class="line">        <span class="keyword">auto</span> u = arr[j], v = arr[j + n / <span class="number">2</span>];</span><br><span class="line">        arr[j] = u + omega * v;</span><br><span class="line">        arr[j + n / <span class="number">2</span>] = u - omega * v;</span><br><span class="line">        omega *= omega_n;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (on == <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">      arr[i] /= len;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> n, m;</span><br><span class="line">  std::<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    <span class="type">int</span> read;</span><br><span class="line">    std::<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;read);</span><br><span class="line">    a[i] = read;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">    <span class="type">int</span> read;</span><br><span class="line">    std::<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;read);</span><br><span class="line">    b[i] = read;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> len = <span class="number">1</span>; <span class="comment">// 注意当 len=1 时处理不了 n+m=1 的情况</span></span><br><span class="line">  <span class="keyword">while</span> (len &lt; n + m + <span class="number">2</span>) &#123; <span class="comment">// 注意 +2</span></span><br><span class="line">    len &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; len; ++i) &#123;</span><br><span class="line">    rev[i] = rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (i &amp; <span class="number">1</span>) &#123;</span><br><span class="line">      rev[i] |= len &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// std::printf(&quot;%d:%d\n&quot;, i, rev[i]);</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">fft</span>(a, len, <span class="number">1</span>);</span><br><span class="line">  <span class="built_in">fft</span>(b, len, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">    c[i] = a[i] * b[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">fft</span>(c, len, <span class="number">-1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n + m; ++i) &#123;</span><br><span class="line">    std::<span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>, std::<span class="built_in">llroundl</span>(c[i].<span class="built_in">real</span>())); <span class="comment">// 一定要注意四舍五入而非向下取整</span></span><br><span class="line">  &#125;</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> mirai::<span class="built_in">main</span>(argc, argv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>高精度乘法模板</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file P1919 【模板】A*B Problem 升级版（FFT 快速傅里叶变换）.cpp</span></span><br><span class="line"><span class="comment"> * @author Kuriyama Mirai (hermione_granger@foxmail.com)</span></span><br><span class="line"><span class="comment"> * @brief </span></span><br><span class="line"><span class="comment"> * @date 2022-01-30</span></span><br><span class="line"><span class="comment"> * @link https://www.luogu.com.cn/record/68373411</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @copyright Copyright (c) 2022</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> mirai &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> std::complex&lt;<span class="type">long</span> <span class="type">double</span>&gt; comp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> MAXN = <span class="number">2100000</span>; <span class="comment">// 1048576*2</span></span><br><span class="line"><span class="type">int</span> rev[MAXN];</span><br><span class="line">comp a[MAXN], b[MAXN], c[MAXN];</span><br><span class="line"><span class="type">int</span> ans[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fft</span><span class="params">(comp* arr, <span class="type">int</span> len, <span class="type">int</span> on)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; rev[i]) &#123;</span><br><span class="line">      std::<span class="built_in">swap</span>(arr[i], arr[rev[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> n = <span class="number">2</span>; n &lt;= len; n &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="function">comp <span class="title">omega_n</span><span class="params">(std::cos(<span class="number">2</span> * M_PI / n), std::sin(on * <span class="number">2</span> * M_PI / n))</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i += n) &#123;</span><br><span class="line">      comp omega = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; i + n / <span class="number">2</span>; ++j) &#123; <span class="comment">// 注意 j 的取值！</span></span><br><span class="line">        <span class="keyword">auto</span> u = arr[j], v = arr[j + n / <span class="number">2</span>];</span><br><span class="line">        arr[j] = u + omega * v;</span><br><span class="line">        arr[j + n / <span class="number">2</span>] = u - omega * v;</span><br><span class="line">        omega *= omega_n;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (on == <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">      arr[i] /= len;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> n = <span class="number">0</span>, m = <span class="number">0</span>;</span><br><span class="line">  <span class="type">char</span> ch;</span><br><span class="line">  <span class="keyword">while</span> (std::<span class="built_in">isdigit</span>(ch = std::<span class="built_in">getchar</span>())) &#123;</span><br><span class="line">    a[n++] = ch - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (!std::<span class="built_in">isdigit</span>(ch = std::<span class="built_in">getchar</span>()));</span><br><span class="line">  b[m++] = ch - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">  <span class="keyword">while</span> (std::<span class="built_in">isdigit</span>(ch = std::<span class="built_in">getchar</span>())) &#123;</span><br><span class="line">    b[m++] = ch - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  --n;</span><br><span class="line">  --m;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n / <span class="number">2</span>; ++i) &#123;</span><br><span class="line">    std::<span class="built_in">swap</span>(a[i], a[n - i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m / <span class="number">2</span>; ++i) &#123;</span><br><span class="line">    std::<span class="built_in">swap</span>(b[i], b[m - i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// for (int i = 0; i &lt;= n; ++i) &#123;</span></span><br><span class="line">  <span class="comment">//   // std::printf(&quot;%lld &quot;, std::llroundl(a[i].real()));</span></span><br><span class="line">  <span class="comment">//   std::printf(&quot;%Lf &quot;, a[i].real());</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">// std::puts(&quot;&quot;);</span></span><br><span class="line">  <span class="comment">// for (int i = 0; i &lt;= m; ++i) &#123;</span></span><br><span class="line">  <span class="comment">//   // std::printf(&quot;%lld &quot;, std::llroundl(b[i].real()));</span></span><br><span class="line">  <span class="comment">//   std::printf(&quot;%Lf &quot;, b[i].real());</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">// std::puts(&quot;&quot;);</span></span><br><span class="line">  <span class="type">int</span> len = <span class="number">1</span>; <span class="comment">// 注意当 len=1 时处理不了 n+m=1 的情况</span></span><br><span class="line">  <span class="keyword">while</span> (len &lt; n * <span class="number">2</span> + <span class="number">2</span> || len &lt; m * <span class="number">2</span> + <span class="number">2</span>) &#123; <span class="comment">// 注意 +2！</span></span><br><span class="line">    len &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; len; ++i) &#123;</span><br><span class="line">    rev[i] = rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (i &amp; <span class="number">1</span>) &#123;</span><br><span class="line">      rev[i] |= len &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// std::printf(&quot;%d:%d\n&quot;, i, rev[i]);</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">fft</span>(a, len, <span class="number">1</span>);</span><br><span class="line">  <span class="built_in">fft</span>(b, len, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">    <span class="comment">// std::printf(&quot; %Lf+%Lfi %Lf+%Lfi\n&quot;, a[i].real(), a[i].imag(), b[i].real(), b[i].imag());</span></span><br><span class="line">    c[i] = a[i] * b[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">fft</span>(c, len, <span class="number">-1</span>);</span><br><span class="line">  <span class="type">long</span> <span class="type">long</span> last = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n + m + <span class="number">1</span>; ++i) &#123; <span class="comment">// 注意 +1</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> now = std::<span class="built_in">llroundl</span>(c[i].<span class="built_in">real</span>()) + last; <span class="comment">// 一定要注意四舍五入而非向下取整</span></span><br><span class="line">    ans[i] = now % <span class="number">10</span>;</span><br><span class="line">    last = now / <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = n + m + <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == n + m + <span class="number">1</span> &amp;&amp; ans[i] == <span class="number">0</span>) &#123; <span class="keyword">continue</span>; &#125;</span><br><span class="line">    std::<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> mirai::<span class="built_in">main</span>(argc, argv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="三次变两次优化"><a href="#三次变两次优化" class="headerlink" title="三次变两次优化"></a>三次变两次优化</h2><p>正常的 FFT 要做三次 DFT，非常不优秀。考虑如下变换：</p>
<script type="math/tex; mode=display">
A\cdot B=\dfrac12\Im(A+B{\rm i})^2</script><p>，其中平方是指点乘自身，于是我们能用两次 DFT 解决：</p>
<script type="math/tex; mode=display">
M^{-1}(MA\cdot MB)=\dfrac12\Im(M^{-1}(M(A+B{\rm i})^2))</script><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file #108. 多项式乘法.cpp</span></span><br><span class="line"><span class="comment"> * @author Kuriyama Mirai (hermione_granger@foxmail.com)</span></span><br><span class="line"><span class="comment"> * @brief </span></span><br><span class="line"><span class="comment"> * @link https://loj.ac/s/1369337</span></span><br><span class="line"><span class="comment"> * @link https://www.luogu.com.cn/record/68430042</span></span><br><span class="line"><span class="comment"> * @date 2022-01-30</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @copyright Copyright (c) 2022</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> mirai &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> std::complex&lt;<span class="type">long</span> <span class="type">double</span>&gt; comp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> MAXN = <span class="number">2200000</span>; <span class="comment">// 262144</span></span><br><span class="line"><span class="type">int</span> rev[MAXN];</span><br><span class="line">comp a[MAXN], b[MAXN], c[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fft</span><span class="params">(comp* arr, <span class="type">int</span> len, <span class="type">int</span> on)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; rev[i]) &#123;</span><br><span class="line">      std::<span class="built_in">swap</span>(arr[i], arr[rev[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> n = <span class="number">2</span>; n &lt;= len; n &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="function">comp <span class="title">omega_n</span><span class="params">(std::cos(<span class="number">2</span> * M_PI / n), std::sin(on * <span class="number">2</span> * M_PI / n))</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i += n) &#123;</span><br><span class="line">      comp omega = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; i + n / <span class="number">2</span>; ++j) &#123; <span class="comment">// 注意 j 的取值！</span></span><br><span class="line">        <span class="keyword">auto</span> u = arr[j], v = arr[j + n / <span class="number">2</span>];</span><br><span class="line">        arr[j] = u + omega * v;</span><br><span class="line">        arr[j + n / <span class="number">2</span>] = u - omega * v;</span><br><span class="line">        omega *= omega_n;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (on == <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">      arr[i] /= len;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> n, m;</span><br><span class="line">  std::<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    <span class="type">int</span> read;</span><br><span class="line">    std::<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;read);</span><br><span class="line">    a[i] = read;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">    <span class="type">int</span> read;</span><br><span class="line">    std::<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;read);</span><br><span class="line">    a[i] += <span class="built_in">comp</span>(<span class="number">0</span>, read);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> len = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (len &lt; n + m + <span class="number">2</span>) &#123;</span><br><span class="line">    len &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; len; ++i) &#123;</span><br><span class="line">    rev[i] = rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (i &amp; <span class="number">1</span>) &#123;</span><br><span class="line">      rev[i] |= len &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// std::printf(&quot;%d:%d\n&quot;, i, rev[i]);</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">fft</span>(a, len, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">    a[i] = a[i] * a[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">fft</span>(a, len, <span class="number">-1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n + m; ++i) &#123;</span><br><span class="line">    std::<span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>, std::<span class="built_in">llroundl</span>(a[i].<span class="built_in">imag</span>() / <span class="number">2</span>)); <span class="comment">// 一定要注意四舍五入而非向下取整</span></span><br><span class="line">  &#125;</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> mirai::<span class="built_in">main</span>(argc, argv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>多项式</tag>
      </tags>
  </entry>
  <entry>
    <title>[多项式学习]Lagrange 插值</title>
    <url>/2022/01/27/lagrange-polynomial/</url>
    <content><![CDATA[<p>非常简单的算法，但是要注意避免让复杂度升到 $\Theta(n^2\log m)$。</p>
<span id="more"></span>
<p>容易验证，$n$ 次多项式 $f(x)=\sum\limits<em>{i}y_i\prod\limits</em>{j\ne i}\dfrac{x-x_j}{x_i-x_j}$ 过 $n+1$ 个点 $(x_i,y_i)$。</p>
<p>注意到如果直接求解复杂度是 $\Theta(n^2\log m)$ 的，进行优化：$f(x)=\sum\limits<em>iy_i\dfrac{\prod\limits</em>{j\ne i}(x-x<em>j)}{\prod\limits</em>{j\ne i}(x_i-x_j)}$.</p>
<p>当 $x<em>i=i$ 时容易写出：$f(x)=\sum\limits_iy_i\dfrac{\prod\limits</em>{j}(x-j)}{(-1)^{n-i}(x-i)\cdot(n-i)!\cdot(i-1)!}$.注意到当 $i=x$ 时分母会出现 $0$，此时该项取 $y_i$ 即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file P4781 【模板】拉格朗日插值 II.cpp</span></span><br><span class="line"><span class="comment"> * @author Kuriyama Mirai (hermione_granger@foxmail.com)</span></span><br><span class="line"><span class="comment"> * @brief auto 记得加 &amp; 和 &amp;&amp;！</span></span><br><span class="line"><span class="comment"> * @link https://www.luogu.com.cn/record/68162446</span></span><br><span class="line"><span class="comment"> * @date 2022-01-27</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @copyright Copyright (c) 2022</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> mirai &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> MAXN = <span class="number">2005</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> MOD = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ll = <span class="type">long</span> <span class="type">long</span>&gt;</span><br><span class="line">ll <span class="built_in">pow</span>(ll a, ll b, ll mod = MOD) &#123;</span><br><span class="line">  ll res = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (b) &#123;</span><br><span class="line">    <span class="keyword">if</span> (b &amp; <span class="number">1</span>) &#123;</span><br><span class="line">      res = res * a % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    a = a * a % mod;</span><br><span class="line">    b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ll = <span class="type">long</span> <span class="type">long</span>&gt;</span><br><span class="line"><span class="keyword">inline</span> ll <span class="built_in">inv</span>(ll a, ll mod = MOD) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">pow</span>(a, mod - <span class="number">2</span>, mod);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// quick Positive MODulo.</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ll = <span class="type">long</span> <span class="type">long</span>&gt;</span><br><span class="line"><span class="keyword">inline</span> ll <span class="built_in">pmod</span>(ll a, ll mod = MOD) &#123;</span><br><span class="line">  <span class="keyword">return</span> a &gt;= mod ? a - mod : a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// quick Negative MODulo.</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ll = <span class="type">long</span> <span class="type">long</span>&gt;</span><br><span class="line"><span class="keyword">inline</span> ll <span class="built_in">nmod</span>(ll a, ll mod = MOD) &#123;</span><br><span class="line">  <span class="keyword">return</span> a &lt; <span class="number">0</span> ? a + mod : a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ll = <span class="type">long</span> <span class="type">long</span>, std::<span class="type">size_t</span> deg = MAXN, ll mod = MOD&gt;</span><br><span class="line"><span class="keyword">class</span> poly &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  std::vector&lt;ll&gt; coe;</span><br><span class="line">  <span class="type">const</span> ll mod_ = mod;</span><br><span class="line">  <span class="built_in">poly</span>(ll val = <span class="number">0</span>) &#123;</span><br><span class="line">    coe.<span class="built_in">resize</span>(deg + <span class="number">1</span>);</span><br><span class="line">    coe[<span class="number">0</span>] = val;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function">std::<span class="type">size_t</span> <span class="title">degree</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> deg;</span><br><span class="line">  &#125;</span><br><span class="line">  ll <span class="keyword">operator</span>[](std::<span class="type">size_t</span> x) <span class="type">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> coe[x];</span><br><span class="line">  &#125;</span><br><span class="line">  ll&amp; <span class="keyword">operator</span>[](std::<span class="type">size_t</span> x) &#123;</span><br><span class="line">    <span class="keyword">return</span> coe[x];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">ll <span class="title">at</span><span class="params">(std::<span class="type">size_t</span> x)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> coe.<span class="built_in">at</span>(x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">ll&amp; <span class="title">at</span><span class="params">(std::<span class="type">size_t</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> coe.<span class="built_in">at</span>(x);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function">ll <span class="title">operator</span><span class="params">()</span><span class="params">(ll <span class="type">const</span>&amp; x)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    ll res = coe[<span class="number">0</span>], now = x;</span><br><span class="line">    <span class="keyword">for</span> (std::<span class="type">size_t</span> i = <span class="number">1</span>; i &lt;= deg; ++i) &#123;</span><br><span class="line">      res = (res + now * coe[i]) % mod;</span><br><span class="line">      now = now * x % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> now;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  poly&lt;ll, deg, mod&gt;&amp; <span class="keyword">operator</span>=(poly&lt;ll, deg, mod&gt; <span class="type">const</span>&amp; x) &#123;</span><br><span class="line">    coe = x.coe;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  poly&lt;ll, deg, mod&gt;&amp; <span class="keyword">operator</span>+=(poly&lt;ll, deg, mod&gt; <span class="type">const</span>&amp; x) &#123;</span><br><span class="line">    *<span class="keyword">this</span> = *<span class="keyword">this</span> + x;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  poly&lt;ll, deg, mod&gt;&amp; <span class="keyword">operator</span>-=(poly&lt;ll, deg, mod&gt; <span class="type">const</span>&amp; x) &#123;</span><br><span class="line">    *<span class="keyword">this</span> = *<span class="keyword">this</span> - x;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ll, std::<span class="type">size_t</span> deg, ll mod&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> std::<span class="type">size_t</span> <span class="title">degree</span><span class="params">(poly&lt;ll, deg, mod&gt; <span class="type">const</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x.<span class="built_in">degree</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ll, std::<span class="type">size_t</span> deg, ll mod&gt;</span><br><span class="line">poly&lt;ll, deg, mod&gt; <span class="keyword">operator</span>+(poly&lt;ll, deg, mod&gt; <span class="type">const</span>&amp; x, poly&lt;ll, deg, mod&gt; <span class="type">const</span>&amp; y) &#123;</span><br><span class="line">  poly&lt;ll, deg, mod&gt; res;</span><br><span class="line">  <span class="keyword">for</span> (std::<span class="type">size_t</span> i = <span class="number">0</span>; i &lt;= deg; ++i) &#123;</span><br><span class="line">    res[i] = <span class="built_in">pmod</span>(x[i] + y[i], mod);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ll, std::<span class="type">size_t</span> deg, ll mod&gt;</span><br><span class="line">poly&lt;ll, deg, mod&gt; <span class="keyword">operator</span>-(poly&lt;ll, deg, mod&gt; <span class="type">const</span>&amp; x, poly&lt;ll, deg, mod&gt; <span class="type">const</span>&amp; y) &#123;</span><br><span class="line">  poly&lt;ll, deg, mod&gt; res;</span><br><span class="line">  <span class="keyword">for</span> (std::<span class="type">size_t</span> i = <span class="number">0</span>; i &lt;= deg; ++i) &#123;</span><br><span class="line">    res[i] = <span class="built_in">nmod</span>(x[i] - y[i], mod);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ll, std::<span class="type">size_t</span> deg, ll mod&gt;</span><br><span class="line"><span class="function">poly&lt;ll, deg, mod&gt; <span class="title">derivative</span><span class="params">(poly&lt;ll, deg, mod&gt; x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (std::<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; deg; ++i) &#123;</span><br><span class="line">    x[i] = (x[i + <span class="number">1</span>] * (i + <span class="number">1</span>)) % mod;</span><br><span class="line">  &#125;</span><br><span class="line">  x[deg] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The constant will be set to 0.</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ll, std::<span class="type">size_t</span> deg, ll mod&gt;</span><br><span class="line"><span class="function">poly&lt;ll, deg, mod&gt; <span class="title">indefinite_integral</span><span class="params">(poly&lt;ll, deg, mod&gt; x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (std::<span class="type">size_t</span> i = deg; i &gt; <span class="number">0</span>; --i) &#123;</span><br><span class="line">    x[i] = (x[i - <span class="number">1</span>] * <span class="built_in">inv</span>(i - <span class="number">1</span>, mod)) % mod;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ll, std::<span class="type">size_t</span> deg, ll mod&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> poly&lt;ll, deg, mod&gt; <span class="title">integral</span><span class="params">(poly&lt;ll, deg, mod&gt; x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">indefinite_integral</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ll, std::<span class="type">size_t</span> deg, ll mod&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> poly&lt;ll, deg, mod&gt; <span class="title">plug_in</span><span class="params">(poly&lt;ll, deg, mod&gt; <span class="type">const</span>&amp; f, ll x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">f</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ll = <span class="type">long</span> <span class="type">long</span>, ll mod = MOD&gt;</span><br><span class="line">ll <span class="built_in">lagrange_polynomial_with_value</span>(std::vector&lt;std::pair&lt;ll, ll&gt;&gt; <span class="type">const</span>&amp; points, ll <span class="type">const</span>&amp; x) &#123;</span><br><span class="line">  ll res = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;&amp;i : points) &#123;</span><br><span class="line">    ll now = <span class="number">1</span>, now2 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;&amp;j : points) &#123;</span><br><span class="line">      <span class="keyword">if</span> (j.first == i.first) &#123;</span><br><span class="line">        <span class="keyword">if</span> (j.second != i.second) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="string">&quot;Two distinct points with one x-value!&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      now = now * <span class="built_in">nmod</span>(x - j.first, mod) % mod;</span><br><span class="line">      now2 = now2 * <span class="built_in">nmod</span>(i.first - j.first, mod) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    res = (res + i.second * now % mod * <span class="built_in">inv</span>(now2, mod)) % mod;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line">  <span class="type">long</span> <span class="type">long</span> val;</span><br><span class="line">  std::<span class="built_in">scanf</span>(<span class="string">&quot;%d%lld&quot;</span>, &amp;n, &amp;val);</span><br><span class="line">  std::vector&lt;std::pair&lt;<span class="type">long</span> <span class="type">long</span>, <span class="type">long</span> <span class="type">long</span>&gt;&gt; points;</span><br><span class="line">  points.<span class="built_in">resize</span>(n);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : points) &#123;</span><br><span class="line">    std::<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;i.first, &amp;i.second);</span><br><span class="line">  &#125;</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">lagrange_polynomial_with_value</span>(points, val));</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> mirai::<span class="built_in">main</span>(argc, argv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>多项式</tag>
      </tags>
  </entry>
  <entry>
    <title>[多项式学习]快速数论变换</title>
    <url>/2022/02/01/number-therotic-transform/</url>
    <content><![CDATA[<p>快速数论变换将 FFT 的作用域移到有限环 $\Z_m$ 上来，更加符合实际需求（如无精度误差、可实时取模）。</p>
<span id="more"></span>
<h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><p>如同在 $\C$ 内寻找单位根 $\omega_n$ 一样，我们需要在 $\Z_m$ 上寻找与单位根性质类似的元素，在这里则是<strong>原根</strong>。</p>
<h3 id="阶"><a href="#阶" class="headerlink" title="阶"></a>阶</h3><p>设 $a\perp m$，则由 Euler 数论定理知，$a^{\varphi(m)}\equiv 1\pmod m$。</p>
<p>因此使 $a^n\equiv 1\pmod m$ 成立的最小正整数 $n$ 存在，称其为 $a$ 在模 $m$ 下的<strong>阶</strong>，记作 $\delta_m(a)$，有些地方也记作 $\operatorname{ord}_m(a)$。</p>
<p>在抽象代数中，阶的定义可以推广到任意群，下面讨论模 $m$ 简化剩余系上阶的性质大多数也可以推广到任意群。</p>
<h4 id="性质-1"><a href="#性质-1" class="headerlink" title="性质 1"></a>性质 1</h4><p>$a^1,a^2,\cdots,a^{\delta_m(a)}$ 模 $m$ 两两不同余。</p>
<p><strong>证明</strong> 考虑反证法，设 $a^i\equiv a^j\pmod p$ 且 $i&lt;j\le \delta_m(a)$，则 $a^{j-i}\equiv 1\pmod m$，而 $j-i&lt;\delta_m(a)$，与 $\delta_m(a)$ 的最小性矛盾。$\square$</p>
<h4 id="性质-2"><a href="#性质-2" class="headerlink" title="性质 2"></a>性质 2</h4><p>若 $a^n\equiv 1\pmod m$，则 $\delta_m(a)\mid n$。</p>
<p><strong>证明</strong> 对 $n$ 除以 $\delta_m(a)$ 做带余除法，$n=q\delta_m(a)+r$，$0\le r&lt;\delta_m(a)$。若 $r\ne 0$，则 $a^n=a^{q\delta_m(a)}\cdot a^r=\left(a^{\delta_m(a)}\right)^q\cdot a^r\equiv a^r\equiv 1\pmod m$，而 $r&lt;\delta_m(a)$，与 $\delta_m(a)$ 的最小性矛盾。$\square$</p>
<h4 id="推论-1"><a href="#推论-1" class="headerlink" title="推论 1"></a>推论 1</h4><p>若 $a^p\equiv a^q\pmod m$，则 $p\equiv q\pmod {\delta_m(a)}$。</p>
<h4 id="性质-3"><a href="#性质-3" class="headerlink" title="性质 3"></a>性质 3</h4><p>设 $a,b\perp m$，则 $\delta_m(ab)=\delta_m(a)\delta_m(b)$ 的充要条件是 $\delta_m(a)\perp \delta_m(b)$。</p>
<p><strong>证明</strong> </p>
<p>必要性：由 $a^{\delta_m(a)}\equiv 1\pmod m$ 和 $b^{\delta_m(b)}\equiv 1\pmod m$ 可知：</p>
<script type="math/tex; mode=display">
(ab)^{\operatorname{lcm}(\delta_m(a),\delta_m(b))}\equiv 1\pmod m</script><p>由推论 2 知：</p>
<script type="math/tex; mode=display">
\delta_m(ab)\mid \operatorname{lcm}(\delta_m(a),\delta_m(b))</script><p>所以，</p>
<script type="math/tex; mode=display">
\delta_m(a)\delta_m(b)\mid \operatorname{lcm}(\delta_m(a),\delta_m(b))\\
\gcd(\delta_m(a),\delta_m(b))\cdot\operatorname{lcm}(\delta_m(a),\delta_m(b))\mid \operatorname{lcm}(\delta_m(a),\delta_m(b))</script><p>于是 $\delta_m(a)\perp \delta_m(b)$。</p>
<p>充分性：由 $(ab)^{\delta_m(ab)}\equiv 1\pmod m$ 可知：</p>
<script type="math/tex; mode=display">
1\equiv (ab)^{\delta_m(ab)\delta_m(b)}\equiv a^{\delta_m(ab)\delta_m(b)}\pmod m</script><p>由推论 2 知，$\delta_m(a)\mid \delta_m(ab)\delta_m(b)$。结合 $\delta_m(a)\perp \delta_m(b)$ 得</p>
<script type="math/tex; mode=display">
\delta_m(a)\mid \delta_m(ab)</script><p>同理有</p>
<script type="math/tex; mode=display">
\delta_m(b)\mid \delta_m(ab)</script><p>再根据 $\delta_m(a)\perp \delta_m(b)$ 有</p>
<script type="math/tex; mode=display">
\delta_m(a)\delta_m(b)\mid\delta_m(ab)</script><p>另一方面，</p>
<script type="math/tex; mode=display">
(ab)^{\delta_m(a)\delta_m(b)}\equiv a^{\delta_m(a)\delta_m(b)}\cdot b^{\delta_m(a)\delta_m(b)}\equiv1\pmod m</script><p>因此 </p>
<script type="math/tex; mode=display">
\delta_m(ab)\mid \delta_m(a)\delta_m(b)</script><p>综合两点可得</p>
<script type="math/tex; mode=display">
\delta_m(ab)=\delta_m(a)\delta_m(b)</script><p>$\square$</p>
<h4 id="性质-4"><a href="#性质-4" class="headerlink" title="性质 4"></a>性质 4</h4><p>设 $k\in \N$，$a\perp m$，则</p>
<script type="math/tex; mode=display">
\delta_m(a^k)=\dfrac{\delta_m(a)}{\gcd(\delta_m(a),k)}</script><p><strong>证明</strong> 注意到</p>
<script type="math/tex; mode=display">
a^{k\delta_m(a^k)}= (a^k)^{\delta_m(a^k)}\equiv 1\pmod m</script><p>运用性质 2 有</p>
<script type="math/tex; mode=display">
\delta_m(a)\mid k\delta_m(a^k)</script><p>进而</p>
<script type="math/tex; mode=display">
\dfrac{\delta_m(a)}{\gcd(\delta_m(a),k)}\mid \delta_m(a^k)</script><p>又由</p>
<script type="math/tex; mode=display">
1\equiv a^{\delta_m(a)\cdot\frac{k}{\gcd(\delta_m(a),k)}}=a^{k\cdot\frac{\delta_m(a)}{\gcd(\delta_m(a),k)}}=(a^k)^\frac{\delta_m(a)}{\gcd(\delta_m(a),k)}\pmod m</script><p>知</p>
<script type="math/tex; mode=display">
\delta_m(a^k)\mid\dfrac{\delta_m(a)}{\gcd(\delta_m(a),k)}</script><p>综合得到</p>
<script type="math/tex; mode=display">
\delta_m(a^k)=\dfrac{\delta_m(a)}{\gcd(\delta_m(a),k)}</script><p>$\square$</p>
<h3 id="原根"><a href="#原根" class="headerlink" title="原根"></a>原根</h3><p>若 $a\perp m$，且 $\delta_m(a)=\varphi(m)$，则称 $a$ 为模 $m$ 的一个<strong>原根</strong>。</p>
<p>在抽象代数中，原根就是循环群的<strong>生成元</strong>。若模 $m$ 的简化剩余系与一个循环群同构，则说明 $m$ 有原根。</p>
<h4 id="原根判定定理"><a href="#原根判定定理" class="headerlink" title="原根判定定理"></a>原根判定定理</h4><p>设 $m\ge 3$，$a\perp m$，则 $a$ 是模 $m$ 的原根的充要条件是，对于 $\varphi(m)$ 的每一个素因子 $p$，$a^{\frac{\varphi(m)}p}\not\equiv 1\pmod m$。</p>
<p><strong>证明</strong> 必要性显然，接下来证明充分性。</p>
<p>若 $a$ 不是模 $m$ 的原根，则 $\delta_m(a)&lt;\varphi(m)$。通过 $a^{\varphi(m)}\equiv 1\pmod m$ 我们有 $\delta_m(a)\mid\varphi(m)$，因此 $\dfrac{\varphi(m)}{\delta_m(a)}&gt;1$。容易知道 $\exist p:p\mid \dfrac{\varphi(m)}{\delta_m(a)}$，进而 $\delta_m(a)\mid\dfrac{\varphi(m)}p$，于是 $a^{\frac{\varphi(m)}p}\equiv 1\pmod m$，与条件矛盾。$\square$</p>
<h4 id="原根个数"><a href="#原根个数" class="headerlink" title="原根个数"></a>原根个数</h4><p>若 $m$ 有原根，则它原根个数为 $\varphi(\varphi(m))$。</p>
<p><strong>证明</strong> 设 $g$ 为 $m$ 的一个原根，则运用性质 4：</p>
<script type="math/tex; mode=display">
\delta_m(g^k)=\dfrac{\delta_m(g)}{\gcd(\delta_m(g),k)}</script><p>观察到 $g^k$ 为原根当且仅当 $\gcd(\delta_m(g),k)=1$，而 $k$ 在 $1\sim \varphi(m)$ 中取值，根据定义知满足条件的 $k$ 共有 $\varphi(\varphi(m))$ 个。</p>
<p>注意到 $g^i,i\le \varphi(m)$ 已经取遍模 $m$ 的简化剩余系，因此不存在剩余的原根。$\square$</p>
<h4 id="原根存在定理"><a href="#原根存在定理" class="headerlink" title="原根存在定理"></a>原根存在定理</h4><p>$m$ 有原根当且仅当 $m=2,4,p^\alpha,2p^{\alpha}$，其中 $p$ 为奇素数，$\alpha\in\N^\ast$。</p>
<p><strong>证明</strong> 分成 $m=2,4$，$m=p^\alpha$，$m=2p^\alpha$，$m\ne 2,4,p^\alpha,2p^\alpha$ 四个部分证明。</p>
<ul>
<li><p>$m=2,4$：显然分别有原根 $2,3$。</p>
</li>
<li><p>$m=p^\alpha$：</p>
<ul>
<li><p>$\alpha=1$：</p>
<p><strong>引理 1</strong> 设 $a\perp p$，$b\perp p$，则 $\exist c\in \Z:\delta_p(c)=\operatorname{lcm}(\delta_p(a),\delta_p(b))$</p>
<p><strong>证明</strong> 将 $\delta_m(a)$，$\delta_m(b)$ 表示成素因数分解的形式：</p>
<script type="math/tex; mode=display">
\delta_m(a)=\prod\limits_{i}p_i^{\alpha_i},\delta_m(b)=\prod\limits_ip_i^{\beta_i}</script><p>然后按指数大小关系分解：</p>
<script type="math/tex; mode=display">
\delta_m(a)=XY,\delta_m(b)=ZW</script><p>其中</p>
<script type="math/tex; mode=display">
Y=\prod\limits_ip_i^{[\alpha_i>\beta_i]\alpha_i},X=\dfrac{\delta_m(a)}Y\\
W=\prod\limits_ip_i^{[\alpha_i\le \beta_i]\beta_i},Z=\dfrac{\delta_m(b)}W</script><p>则由阶的性质 4 可得：</p>
<script type="math/tex; mode=display">
\delta_m(a^X)=\dfrac{\delta_m(a)}{\gcd(\delta_m(a),X)}=\dfrac{XY}X=Y</script><p>同理</p>
<script type="math/tex; mode=display">
\delta_m(b^Z)=W</script><p>显然有 $Y\perp W$，$YW=\operatorname{lcm}(\delta_p(a),\delta_p(b))$，因此根据阶的性质 3 可得：</p>
<script type="math/tex; mode=display">
\delta_m(a^Xb^Z)=\delta_m(a^X)\delta_m(b^Z)=YW=\operatorname{lcm}(\delta_p(a),\delta_p(b))</script><p>令 $c=a^Xb^Z$ 则引理 1 得证。$\square$</p>
<p>对 $1\sim (p-1)$ 依次两两使用引理 1，可知存在 $g\in \Z$ 使得</p>
<script type="math/tex; mode=display">
\delta_p(g)=\operatorname{lcm}(\delta_p(1),\delta_p(2),\cdots,\delta_p(p-1))</script><p>这表明 $\delta_p(j)\mid \delta_p(g)(j=1,\cdots,p-1)$，因此 $j=1,\cdots,p-1$ 都是方程</p>
<script type="math/tex; mode=display">
x^{\delta_p(g)}\equiv 1\pmod p</script><p>的解。</p>
<p><strong>Lagrange 定理</strong> 设 $p$ 为素数，则模 $p$ 意义下的整系数多项式</p>
<script type="math/tex; mode=display">
f(x)=a_nx^n+a_{n-1}x^{n-1}+\cdots+a_0(p\nmid a_n)</script><p>的同余方程 $f(x)\equiv 0\pmod p$ 至多有 $n$ 个不同解。</p>
<p><strong>证明</strong> 对 $n$ 使用归纳法。当 $n=0$ 时，方程显然无解。</p>
<p>假设命题对 $\deg f&lt;n$ 的 $f$ 都成立，则假设存在一个 $\deg f=n$ 且拥有至少 $n+1$ 个不同的解 $x_0,\cdots,x_n$ 的 $f$。</p>
<p>因为 $f(x)-f(x_0)=(x-x_0)g(x)$，其中 $g(x)$ 是一个最多 $n-1$ 次的多项式。</p>
<p>根据假设容易知道对于 $i=1,\cdots,n$，有</p>
<script type="math/tex; mode=display">
f(x_i)-f(x_0)\equiv (x_i-x_0)g(x_i)\equiv 0\equiv g(x_i)\pmod p</script><p>因而 $g$ 有至少 $n$ 个解 $x_1,\cdots,x_n$，矛盾。$\square$</p>
<p>因为方程有至少 $p-1$ 个解，则说明方程的次数 $\delta_p(g)\ge p-1$，由 $\delta_p(g)\mid p-1$ 容易知道 $\delta_p(g)=p-1=\varphi(p)$，那么 $g$ 是 $p$ 的原根。$\square$</p>
</li>
<li><p>$\alpha&gt;1$：考虑平移 $p$ 的原根 $g$。</p>
<p><strong>引理 2</strong> 存在模 $p$ 的原根 $g$ 使得 $g^{p-1}\not\equiv 1\pmod {p^2}$。</p>
<p><strong>证明</strong> 任取 $p$ 的原根 $g$，若 $g$ 不满足条件，则认定 $g+p$ 满足条件。</p>
<p>我们有</p>
<script type="math/tex; mode=display">
\begin{aligned}
(g+p)^{p-1}&\equiv g^{p-1}+(p-1)\cdot g^{p-2}\cdot p\\
&\equiv1+(p^2-p)g^{p-2}\\
&\equiv 1-pg^{p-2}\\
&\not\equiv 1\pmod{p^2}
\end{aligned}</script><p>其中最后一步是因为 $p\nmid g^{p-2}$，因而 $p^2\nmid pg^{p-2}$。$\square$</p>
<p>考虑证明：若 $g$ 是一个满足引理 2 所述条件的原根，则对于任意 $\alpha\in\N^\ast$，$g$ 是模 $p^\alpha$ 的原根。</p>
<p><strong>引理 3</strong> $\forall \beta\in\N^\ast:\exist k<em>\beta:g^{\varphi(p^\beta)}=1+p^\beta\cdot k</em>\beta\land p\nmid k_\beta$。</p>
<p><strong>证明</strong> 当 $\beta=1$ 时根据 $g$ 的选取显然成立。假设上式对 $\beta$ 成立，则</p>
<script type="math/tex; mode=display">
\begin{aligned}
g^{\varphi(p^{\beta+1})}&=g^{p\cdot\varphi(p^\beta)}\\
&=(g^p)^{\varphi(p^\beta)}\\
&=(1+p^\beta\cdot k_\beta)^p\\
&\equiv 1+p^{\beta+1}\cdot k_\beta\pmod{p^{\beta+2}}
\end{aligned}</script><p>结合 $p\nmid k_\beta$ 知命题对 $\beta+1$ 成立。</p>
<p>所以命题对任意 $\beta\in\N^\ast$ 都成立。$\square$</p>
<p>记 $\delta=\delta_{p^\alpha}(g)$，则易知 $\delta\mid \varphi(p^\alpha)=p^{\alpha-1}(p-1)$。</p>
<p>由于 $g$ 为模 $p$ 的原根，且 $g^\delta\equiv 1\pmod{p^\alpha}$，于是 $g^\delta\equiv 1\pmod p$，然后有 $\delta_p(g)=\varphi(p)=p-1\mid \delta$，所以可设 $\delta=p^{\beta-1}(p-1)$，其中 $1\le\beta\le\alpha$。根据引理 3，</p>
<script type="math/tex; mode=display">
g^{\varphi(p^\beta)}\not\equiv1\pmod{p^{\beta+1}}</script><p>观察可得</p>
<script type="math/tex; mode=display">
g^\delta\not\equiv 1\pmod{p^{\beta+1}}</script><p>由 $g^\delta\equiv 1\pmod{p^\alpha}$ 知 $\beta+1&gt;\alpha$，即 $\beta\ge \alpha$，结合 $\alpha\ge\beta$ 知 $\alpha=\beta$，即：</p>
<script type="math/tex; mode=display">
\delta_{p^\alpha}(g)=p^{\alpha-1}(p-1)=\varphi(p^\alpha)</script><p>从而，$g$ 是模 $p^\alpha$ 的原根。$\square$</p>
</li>
</ul>
</li>
<li><p>$m=2p^\alpha$：</p>
<p>设 $g_0$ 是模 $p^\alpha$ 的原根，则 $g_0+p^\alpha$ 也是模 $p^\alpha$ 的原根。在 $g_0$ 与 $g_0+p^\alpha$ 中有且仅有一个是奇数，设其为 $g$，则因为 $g\perp p^\alpha$，$g\perp 2$，因此 $g\perp 2p^\alpha$。</p>
<p>容易知道，$\delta<em>{2p^\alpha}(g)\mid \varphi(2p^\alpha)$。又因为 $g^{\delta</em>{2p^\alpha}(g)}\equiv 1\pmod {2p^\alpha}$，进而</p>
<script type="math/tex; mode=display">
g^{\delta_{2p^\alpha}(g)}\equiv 1\pmod {p^\alpha}</script><p>于是 $\varphi(p^\alpha)=\delta<em>{p^\alpha}(g)\mid \varphi(2p^\alpha)$。综合两者与 $\varphi(p^\alpha)=\varphi(2p^\alpha)$ 得到 $\delta</em>{2p^\alpha}(g)=\varphi(2p^\alpha)$，说明 $g$ 是模 $2p^\alpha$ 的原根。$\square$</p>
</li>
<li><p>$m\ne 2,4,p^\alpha,2p^\alpha$：</p>
<ul>
<li><p>$m=2^\alpha$，其中 $\alpha\in\N^\ast$ 且 $\alpha\ge 3$，则对于任意的奇数 $a=2k+1$，都有：</p>
<script type="math/tex; mode=display">
\begin{aligned}
a^{2^{\alpha-2}}&=(2k+1)^{2^{\alpha-2}}\\
&\equiv1+2^{\alpha-1}\cdot k+2^{\alpha-1}\cdot(2^{\alpha-2}-1)\cdot k^2\\
&=1+2^{\alpha-1}\cdot k(1+(2^{\alpha-2}-1)\cdot k)\\
&\equiv 1\pmod{2^{\alpha}}
\end{aligned}</script><p>进而</p>
<script type="math/tex; mode=display">
\delta_m(a)\le 2^{\alpha-2}<2^{\alpha-1}=\varphi(2^\alpha)</script><p>因此 $m$ 无原根。$\square$</p>
</li>
<li><p>$m\ne 2^\alpha$，则设 $m=rt$，这里 $2&lt;r&lt;t$ 且 $r\perp t$。</p>
<p>若 $a\perp m$，则 $a\perp r$，$a\perp t$，进而</p>
<script type="math/tex; mode=display">
a^{\varphi(r)}\equiv1\pmod r\\
a^{\varphi(t)}\equiv1\pmod t</script><p>所以有</p>
<script type="math/tex; mode=display">
a^{\operatorname{lcm}(\varphi(r),\varphi(t))}\equiv1\pmod{rt}</script><p>注意到当 $n&gt;2$ 时 $2\mid\varphi(n)$，所以</p>
<script type="math/tex; mode=display">
\delta_m(a)\le\operatorname{lcm}(\varphi(r),\varphi(t))<\varphi(r)\varphi(t)=\varphi(m)</script><p>因而 $m$ 不存在原根。$\square$</p>
</li>
</ul>
</li>
</ul>
<h4 id="最小原根问题"><a href="#最小原根问题" class="headerlink" title="最小原根问题"></a>最小原根问题</h4><p>素数 $p$ 的最小原根实际上非常的小，王元和 Burgess 分别在 1959 年和 1962 年证明了 $g_p=O(p^{1/4+\epsilon})$，而 Shoup 于 1990 年证明了（在假设广义 Riemann 猜想成立的前提下），$g_p=O(\log^6p)$。</p>
<p>当然我们知道，使得 $\log^6p&lt;p^{1/4}$ 的数需要非常大，至少得要 $e^{-24W(1/24)}\approx2.125\times10^{49}$ 级别，这还没算上那个 $\epsilon$（两个人的原论文都找不到了，找不到具体的叙述），因而我们可以在平时采用 $O(p^{1/4+\epsilon})$ 这个界，要计算时暴力枚举寻找原根。</p>
<h3 id="快速数论变换"><a href="#快速数论变换" class="headerlink" title="快速数论变换"></a>快速数论变换</h3><p>考虑寻找一个拥有原根 $g$ 的素数 $p$，其中 $p-1=q\times 2^k$，$k$ 足够大使得 $g^q$ 能够起到类似 FFT 中 $\omega_n$ 的效果。</p>
<p>常用的三个模数，最小原根皆为 $3$：</p>
<script type="math/tex; mode=display">
1004535809=479\times2^{21}+1\\
998244353=7\times17\times2^{23}+1\\
469762049=7\times2^{26}+1</script><p>以 $p$ 为模数，以 $g^q$ 为 $\omega_n$ 的变换称为 <strong>快速数论变换 </strong>(Number-Therotic Transform, NTT)。</p>
<p>代码实现：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file #108-3. 多项式乘法.cpp</span></span><br><span class="line"><span class="comment"> * @author Kuriyama Mirai (hermione_granger@foxmail.com)</span></span><br><span class="line"><span class="comment"> * @brief NTT版本</span></span><br><span class="line"><span class="comment"> * 不要再错同一个地方啊！</span></span><br><span class="line"><span class="comment"> * @date 2022-01-31</span></span><br><span class="line"><span class="comment"> * @link https://loj.ac/s/1368985</span></span><br><span class="line"><span class="comment"> * @link https://www.luogu.com.cn/record/68403193</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @copyright Copyright (c) 2022</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> mirai &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> MAXN = <span class="number">2200005</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> MOD = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line">ll a[MAXN], b[MAXN];</span><br><span class="line">ll rev[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">pow</span><span class="params">(ll a, ll b)</span> </span>&#123;</span><br><span class="line">  ll res = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (b) &#123;</span><br><span class="line">    <span class="keyword">if</span> (b &amp; <span class="number">1</span>) &#123;</span><br><span class="line">      res = res * a % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    a = a * a % MOD;</span><br><span class="line">    b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">inv</span><span class="params">(ll <span class="type">const</span>&amp; a)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">pow</span>(a, MOD - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ntt</span><span class="params">(ll arr[], <span class="type">int</span> len, <span class="type">int</span> on)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; rev[i]) &#123;</span><br><span class="line">      std::<span class="built_in">swap</span>(arr[i], arr[rev[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> n = <span class="number">2</span>; n &lt;= len; n *= <span class="number">2</span>) &#123;</span><br><span class="line">    ll gq_n = <span class="built_in">pow</span>(on == <span class="number">1</span> ? <span class="number">3</span> : <span class="built_in">inv</span>(<span class="number">3</span>), (MOD - <span class="number">1</span>) / n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i += n) &#123;</span><br><span class="line">      ll gq = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; i + n / <span class="number">2</span>; ++j) &#123; <span class="comment">// 注意这里不是从 0 到 n/2-1!</span></span><br><span class="line">        ll u = arr[j], v = arr[j + n / <span class="number">2</span>];</span><br><span class="line">        arr[j] = (u + gq * v) % MOD;</span><br><span class="line">        arr[j + n / <span class="number">2</span>] = (u - gq * v % MOD + MOD) % MOD;</span><br><span class="line">        gq = gq * gq_n % MOD;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (on == <span class="number">-1</span>) &#123;</span><br><span class="line">    ll invlen = <span class="built_in">inv</span>(len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">      arr[i] = arr[i] * invlen % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> n, m;</span><br><span class="line">  std::<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    std::<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">    std::<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;b[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> len = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (len &lt; n + m + <span class="number">2</span>) &#123;</span><br><span class="line">    len &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; len; ++i) &#123;</span><br><span class="line">    rev[i] = (rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) * (len &gt;&gt; <span class="number">1</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">ntt</span>(a, len, <span class="number">1</span>);</span><br><span class="line">  <span class="built_in">ntt</span>(b, len, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">    a[i] = a[i] * b[i] % MOD;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">ntt</span>(a, len, <span class="number">-1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n + m; ++i) &#123;</span><br><span class="line">    std::<span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>, a[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  std::<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> mirai::<span class="built_in">main</span>(argc, argv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>多项式</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>多项式</tag>
      </tags>
  </entry>
  <entry>
    <title>C++运算符优先级</title>
    <url>/2020/02/05/operator_precedence_cpp/</url>
    <content><![CDATA[<p>为了防止忘记还是记下来吧~从cppreference搬来的~</p>
<span id="more"></span>
<p>由于 <code>|</code> 符号很难在表格里打出来，所以在打 <code>|</code> 的时候使用了公式来代替单行代码。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">优先等级</th>
<th style="text-align:center">运算符</th>
<th style="text-align:center">结合顺序</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center"><code>::</code></td>
<td style="text-align:center">从左到右</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center"><code>var++</code>  <code>var--</code> <code>type()</code> <code>type&#123;&#125;</code> <code>func()</code> <code>arr[]</code> <code>.</code> <code>-&gt;</code></td>
<td style="text-align:center">从左到右</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center"><code>++var</code> <code>--var</code> <code>+var</code> <code>-var</code> <code>!</code> <code>~</code> <code>(type)</code> <code>*ptr</code> <code>&amp;var</code> <code>sizeof</code> <code>co_await</code> <code>new</code> <code>new[]</code> <code>delete</code> <code>delete[]</code></td>
<td style="text-align:center"><strong>从右到左</strong></td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center"><code>.*</code> <code>-&gt;*</code></td>
<td style="text-align:center">从左到右</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center"><code>var1*var2</code> <code>var1/var2</code> <code>var1%var2</code></td>
<td style="text-align:center">从左到右</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center"><code>var1+var2</code> <code>var1-var2</code></td>
<td style="text-align:center">从左到右</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center"><code>&lt;&lt;</code> <code>&gt;&gt;</code></td>
<td style="text-align:center">从左到右</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center"><code>&lt;=&gt;</code></td>
<td style="text-align:center">从左到右</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td style="text-align:center"><code>&lt;</code> <code>&lt;=</code> <code>&gt;</code> <code>&gt;=</code></td>
<td style="text-align:center">从左到右</td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td style="text-align:center"><code>==</code> <code>!=</code></td>
<td style="text-align:center">从左到右</td>
</tr>
<tr>
<td style="text-align:center">11</td>
<td style="text-align:center"><code>var1&amp;var2</code></td>
<td style="text-align:center">从左到右</td>
</tr>
<tr>
<td style="text-align:center">12</td>
<td style="text-align:center"><code>^</code></td>
<td style="text-align:center">从左到右</td>
</tr>
<tr>
<td style="text-align:center">13</td>
<td style="text-align:center">$\mid$</td>
<td style="text-align:center">从左到右</td>
</tr>
<tr>
<td style="text-align:center">14</td>
<td style="text-align:center"><code>&amp;&amp;</code></td>
<td style="text-align:center">从左到右</td>
</tr>
<tr>
<td style="text-align:center">15</td>
<td style="text-align:center">$\mid\mid$</td>
<td style="text-align:center">从左到右</td>
</tr>
<tr>
<td style="text-align:center">16</td>
<td style="text-align:center"><code>?:</code> <code>throw</code> <code>co_yield</code> <code>=</code> <code>+=</code> <code>-=</code> <code>*=</code> <code>/=</code> <code>%=</code> <code>&lt;&lt;=</code> <code>&gt;&gt;=</code> <code>&amp;=</code> $\mid=$ <code>^=</code></td>
<td style="text-align:center"><strong>从右到左</strong></td>
</tr>
<tr>
<td style="text-align:center">17</td>
<td style="text-align:center"><code>,</code></td>
<td style="text-align:center">从左到右</td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>「陶哲轩实分析」第2章-从头开始：自然数-笔记</title>
    <url>/2021/01/05/tao-2-1/</url>
    <content><![CDATA[<!--comment-->
<span id="more"></span>
<h2 id="Peano-公理"><a href="#Peano-公理" class="headerlink" title="Peano 公理"></a>Peano 公理</h2><p><strong>公理 2.1</strong><sup><a href="#fn_i" id="reffn_i">i</a></sup> $0$ 是自然数；<br><strong>公理 2.2</strong> 每个确定的自然数 $n$ 都有一个确定的<strong>后继</strong>，记作 $n’$，$n’$ 也是自然数；<br><strong>公理 2.3</strong> 不存在自然数 $n$ 使得 $n’=0$；<br><strong>公理 2.4</strong> 对于任意自然数 $n$、$m$，如果 $n\ne m$，那么 $n’\ne m’$；<br><strong>公理 2.5（数学归纳法原理）</strong> 任意关于自然数的命题，如果它对自然数 $0$ 是真的，而且如果它对自然数 $n$ 为真时，可以证明它对自然数 $n’$ 也为真。那么，命题对所有的自然数都为真。</p>
<p>公理 2.1~公理 2.5 被称为自然数的 <strong>Peano 公理</strong>。</p>
<p><strong>假设 2.6</strong><sup><a href="#fn_ii" id="reffn_ii">ii</a></sup> 存在一个数系<sup><a href="#fn_iii" id="reffn_iii">iii</a></sup> $\mathbb N$，我们称 $\mathbb N$ 里的元素为<strong>自然数</strong>，而公理 2.1~公理 2.5 对 $\mathbb N$ 均成立。</p>
<p>我们把假设 2.6 中所的数系 $\mathbb N$ 称为<strong>自然数系</strong>。</p>
<h2 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h2><p><strong>定义 2.2.1</strong> 令 $m$ 为一个自然数，我们用归纳法定义<strong>加法</strong>：定义 $0+m:=m$<sup><a href="#fn_iv" id="reffn_iv">iv</a></sup>。归纳地假设我们已经定义了 $n+m$，那么我们定义 $n’+m:=(n+m)’$。</p>
<h2 id="正自然数"><a href="#正自然数" class="headerlink" title="正自然数"></a>正自然数</h2><p><strong>定义 2.2.7</strong> 称一个自然数 $n$ 是<strong>正</strong>的，当且仅当它不等于 $0$。</p>
<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p><strong>定义 2.2.11</strong> 令 $n$、$m$ 表示任意两个自然数。我们称 $n$ <strong>大于等于</strong> $m$，并且记作 $n\ge m$ 或者 $m\le n$，当且仅当 $\exist a:n=m+a$。我们称 $n$ <strong>严格大于</strong> $m$，并且记作 $n&gt;m$ 或 $n&lt;m$，当且仅当 $n\ge m$ 且 $n\ne m$。</p>
<h2 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h2><p><strong>定义 2.3.1</strong> 令 $m$ 为一个自然数。我们用归纳法定义<strong>乘法</strong>：定义 $0\times m:=0$。归纳地假设我们已经定义了 $n\times m$，那么我们定义 $n’\times m:=(n\times m)+m$。</p>
<h2 id="指数运算"><a href="#指数运算" class="headerlink" title="指数运算"></a>指数运算</h2><p><strong>定义 2.3.11</strong> 设 $m$ 是一个自然数，我们用归纳法定义<strong>指数运算</strong>：定义 $m^0:=1$。（注意这里将 $0^0$ 也定义为了 $1$）归纳地假设我们已经定义了 $m^n$，那么我们定义 $m^{n’}:=m^n\times n$。</p>
<h2 id="Footnote"><a href="#Footnote" class="headerlink" title="Footnote"></a>Footnote</h2><blockquote id="fn_i">
<sup>i</sup>. 为了方便，命题、定理、引理、假设等均沿用原文的编号。<a href="#reffn_i" title="Jump back to footnote [i] in the text."> &#8617;</a>
</blockquote>
<blockquote id="fn_ii">
<sup>ii</sup>. 这个定义/证明不够严谨，在原文中有标注“非正式的”。<a href="#reffn_ii" title="Jump back to footnote [ii] in the text."> &#8617;</a>
</blockquote>
<blockquote id="fn_iv">
<sup>iv</sup>. 这里的“$:=$”是“被定义为”的意思。<a href="#reffn_iv" title="Jump back to footnote [iv] in the text."> &#8617;</a>
</blockquote>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>笔记</tag>
        <tag>实分析</tag>
      </tags>
  </entry>
  <entry>
    <title>「陶哲轩实分析」第2章-从头开始：自然数-笔记</title>
    <url>/2021/01/05/tao-2/</url>
    <content><![CDATA[<!--comment-->
<span id="more"></span>
<h2 id="Peano-公理"><a href="#Peano-公理" class="headerlink" title="Peano 公理"></a>Peano 公理</h2><p><strong>公理 2.1</strong><sup><a href="#fn_i" id="reffn_i">i</a></sup> $0$ 是自然数；<br><strong>公理 2.2</strong> 每个确定的自然数 $n$ 都有一个确定的<strong>后继</strong>，记作 $n’$，$n’$ 也是自然数；<br><strong>公理 2.3</strong> 不存在自然数 $n$ 使得 $n’=0$；<br><strong>公理 2.4</strong> 对于任意自然数 $n$、$m$，如果 $n\ne m$，那么 $n’\ne m’$；<br><strong>公理 2.5（数学归纳法原理）</strong> 任意关于自然数的命题，如果它对自然数 $0$ 是真的，而且如果它对自然数 $n$ 为真时，可以证明它对自然数 $n’$ 也为真。那么，命题对所有的自然数都为真。</p>
<p>公理 2.1~公理 2.5 被称为自然数的 <strong>Peano 公理</strong>。</p>
<p><strong>假设 2.6</strong><sup><a href="#fn_ii" id="reffn_ii">ii</a></sup> 存在一个数系<sup><a href="#fn_iii" id="reffn_iii">iii</a></sup> $\mathbb N$，我们称 $\mathbb N$ 里的元素为<strong>自然数</strong>，而公理 2.1~公理 2.5 对 $\mathbb N$ 均成立。</p>
<p>我们把假设 2.6 中所的数系 $\mathbb N$ 称为<strong>自然数系</strong>。</p>
<h2 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h2><p><strong>定义 2.2.1</strong> 令 $m$ 为一个自然数，我们用归纳法定义<strong>加法</strong>：定义 $0+m:=m$<sup><a href="#fn_iv" id="reffn_iv">iv</a></sup>。归纳地假设我们已经定义了 $n+m$，那么我们定义 $n’+m:=(n+m)’$。</p>
<p><strong>命题 2.2.14</strong>（强归纳法原理） 令 $m_0$ 表示一个自然数，$P(m)$ 表示与任意自然数 $m$ 有关的性质。如果 $\forall m\ge m_0:((\forall m_0\le m’&lt; m:P(m’))\Rightarrow P(m))$，那么 $\forall m\ge m_0:P(m)$。</p>
<h2 id="正自然数"><a href="#正自然数" class="headerlink" title="正自然数"></a>正自然数</h2><p><strong>定义 2.2.7</strong> 称一个自然数 $n$ 是<strong>正</strong>的，当且仅当它不等于 $0$。</p>
<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p><strong>定义 2.2.11</strong> 令 $n$、$m$ 表示任意两个自然数。我们称 $n$ <strong>大于等于</strong> $m$，并且记作 $n\ge m$ 或者 $m\le n$，当且仅当 $\exist a:n=m+a$。我们称 $n$ <strong>严格大于</strong> $m$，并且记作 $n&gt;m$ 或 $n&lt;m$，当且仅当 $n\ge m$ 且 $n\ne m$。</p>
<h2 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h2><p><strong>定义 2.3.1</strong> 令 $m$ 为一个自然数。我们用归纳法定义<strong>乘法</strong>：定义 $0\times m:=0$。归纳地假设我们已经定义了 $n\times m$，那么我们定义 $n’\times m:=(n\times m)+m$。</p>
<h2 id="指数运算"><a href="#指数运算" class="headerlink" title="指数运算"></a>指数运算</h2><p><strong>定义 2.3.11</strong> 设 $m$ 是一个自然数，我们用归纳法定义<strong>指数运算</strong>：定义 $m^0:=1$。（注意这里将 $0^0$ 也定义为了 $1$）归纳地假设我们已经定义了 $m^n$，那么我们定义 $m^{n’}:=m^n\times n$。</p>
<h2 id="Footnote"><a href="#Footnote" class="headerlink" title="Footnote"></a>Footnote</h2><blockquote id="fn_i">
<sup>i</sup>. 为了方便，命题、定理、引理、假设等均沿用原文的编号。<a href="#reffn_i" title="Jump back to footnote [i] in the text."> &#8617;</a>
</blockquote>
<blockquote id="fn_ii">
<sup>ii</sup>. 这个定义/证明不够严谨，在原文中有标注“非正式的”。<a href="#reffn_ii" title="Jump back to footnote [ii] in the text."> &#8617;</a>
</blockquote>
<blockquote id="fn_iv">
<sup>iv</sup>. 这里的“$:=$”是“被定义为”的意思。<a href="#reffn_iv" title="Jump back to footnote [iv] in the text."> &#8617;</a>
</blockquote>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>笔记</tag>
        <tag>实分析</tag>
      </tags>
  </entry>
  <entry>
    <title>「陶哲轩实分析」第3章-集合论-笔记</title>
    <url>/2021/07/24/tao-3/</url>
    <content><![CDATA[<p>集合论是现代数学分支理论的基石之一，在数学体系的建构中起到了至关重要的地步。</p>
<span id="more"></span>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>常用的集合论公理体系有 ZF 和 ZFC。为了帮助理解，本文将给出稍微偏多的公理。</p>
<p><strong>公理 3.1</strong> 如果 $A$ 是一个集合，那么 $A$ 也是一个对象。特别地，给定两个集合 $A$ 和 $B$，问 $A$ 是不是 $B$ 中的元素是有意义的。</p>
<blockquote>
<p>注：有一种集合论将所有的对象视为集合，被称为“纯粹集合论”，譬如，$0:=\varnothing,1:={\varnothing},2:={\varnothing,{\varnothing}},\cdots,n’:=n\cup {n}$。在逻辑学角度上，这种集合论更加简单，因为人们只需处理集合而不需要处理其他对象；但是从概念的角度上，对非纯粹集合论的处理更为简单。</p>
<p>事实上，这两种类型的理论是几乎等价的，所以我们这里姑且采用非纯粹集合论。</p>
</blockquote>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>笔记</tag>
        <tag>实分析</tag>
      </tags>
  </entry>
  <entry>
    <title>「陶哲轩实分析」第2章-从头开始：自然数-习题解答</title>
    <url>/2021/04/09/tao-hw-2/</url>
    <content><![CDATA[<!--comment-->
<!--comment-->
<p>恕我吐槽一句，$n+!+$ 不丑吗…… $n’$ 不香吗……</p>
<p><del>我真傻，真的。我单知道洛谷题解里有在公式里出现的 <code>++</code>，我不知道陶哲轩实分析也有。</del></p>
<p>下文用 $n’$ 代替 $n+!+$。</p>
<span id="more"></span>
<h2 id="2-1-Peano-公理"><a href="#2-1-Peano-公理" class="headerlink" title="2.1 Peano 公理"></a>2.1 Peano 公理</h2><h2 id="2-2-加法"><a href="#2-2-加法" class="headerlink" title="2.2 加法"></a>2.2 加法</h2><h3 id="2-2-1"><a href="#2-2-1" class="headerlink" title="2.2.1"></a>2.2.1</h3><p>对 $c$ 使用归纳法。</p>
<p>$P(c)$：$\forall a,b:(a+b)+c=a+(b+c)$；<br>$P(0)$：显然；<br>$P(c)\Rightarrow P(c’)$：$(a+b)+c’=[(a+b)+c]’=[a+(b+c)]’=a+(b+c)’=a+(b+c’)$。</p>
<div align="right">$\square$</div>

<h3 id="2-2-2"><a href="#2-2-2" class="headerlink" title="2.2.2"></a>2.2.2</h3><p><strong>存在性</strong>：</p>
<p>使用归纳法证明 $P(a)=\forall a:\exist b:b’=a+1$。</p>
<p>$P(0)$：$b=0$ 即可。<br>$P(a)\Rightarrow P(a’)$：$(b’)’=b’+1=(a+1)+1=a’+1$。</p>
<p><strong>唯一性</strong>：</p>
<p>由 Peano 公理立即得到。</p>
<div align="right">$\square$</div>

<h3 id="2-2-3"><a href="#2-2-3" class="headerlink" title="2.2.3"></a>2.2.3</h3><h4 id="a"><a href="#a" class="headerlink" title="(a)"></a>(a)</h4><p>$\forall a:a=0+a$.</p>
<div align="right">$\square$</div>

<h4 id="b"><a href="#b" class="headerlink" title="(b)"></a>(b)</h4><p>由于 $\exist m:a=m+b$，$\exist n:b=n+c$，所以 $a=m+b=m+(n+c)=(m+n)+c$。</p>
<div align="right">$\square$</div>

<h4 id="c"><a href="#c" class="headerlink" title="(c)"></a>(c)</h4><p>由于 $\exist m:a=m+b$，$\exist n:b=n+a$，所以 $a=m+b=m+(n+a)=(m+n)+a$。使用消去律立即得到。</p>
<div align="right">$\square$</div>

<h4 id="d"><a href="#d" class="headerlink" title="(d)"></a>(d)</h4><p>$a\ge b\Rightarrow a+c\ge b+c$：</p>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>实分析</tag>
        <tag>数学分析</tag>
      </tags>
  </entry>
  <entry>
    <title>「陶哲轩实分析笔记」目录</title>
    <url>/2021/01/05/tao/</url>
    <content><![CDATA[<p>最近在拜读《陶哲轩实分析》（第 3 版，ISBN 978-7-115-48025-5），做点笔记。</p>
<span id="more"></span>
<!--comment-->
<h2 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h2><h3 id="第二章-从头开始：自然数"><a href="#第二章-从头开始：自然数" class="headerlink" title="第二章 从头开始：自然数"></a>第二章 从头开始：自然数</h3><ul>
<li>2.1 <a href="/2021/01/05/tao-2-1">Peano 公理</a></li>
<li>2.2 <a href="/2021/01/05/tao-2-2">加法</a></li>
</ul>
<h3 id="第三章-集合论"><a href="#第三章-集合论" class="headerlink" title="第三章 集合论"></a>第三章 集合论</h3><h3 id="第四章-整数和有理数"><a href="#第四章-整数和有理数" class="headerlink" title="第四章 整数和有理数"></a>第四章 整数和有理数</h3><h3 id="第五章-实数"><a href="#第五章-实数" class="headerlink" title="第五章 实数"></a>第五章 实数</h3><h3 id="第六章-序列的极限"><a href="#第六章-序列的极限" class="headerlink" title="第六章 序列的极限"></a>第六章 序列的极限</h3><h3 id="第七章-级数"><a href="#第七章-级数" class="headerlink" title="第七章 级数"></a>第七章 级数</h3><h3 id="第八章-无限集"><a href="#第八章-无限集" class="headerlink" title="第八章 无限集"></a>第八章 无限集</h3><h3 id="第九章-mathbb-R-上的连续函数"><a href="#第九章-mathbb-R-上的连续函数" class="headerlink" title="第九章 $\mathbb R$ 上的连续函数"></a>第九章 $\mathbb R$ 上的连续函数</h3><h3 id="第十章-函数的微分"><a href="#第十章-函数的微分" class="headerlink" title="第十章 函数的微分"></a>第十章 函数的微分</h3><h3 id="第十一章-黎曼积分"><a href="#第十一章-黎曼积分" class="headerlink" title="第十一章 黎曼积分"></a>第十一章 黎曼积分</h3><h2 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h2><h3 id="第十二章-度量空间"><a href="#第十二章-度量空间" class="headerlink" title="第十二章 度量空间"></a>第十二章 度量空间</h3><h3 id="第十三章-度量空间上的连续函数"><a href="#第十三章-度量空间上的连续函数" class="headerlink" title="第十三章 度量空间上的连续函数"></a>第十三章 度量空间上的连续函数</h3><h3 id="第十四章-一致收敛"><a href="#第十四章-一致收敛" class="headerlink" title="第十四章 一致收敛"></a>第十四章 一致收敛</h3><h3 id="第十五章-幂级数"><a href="#第十五章-幂级数" class="headerlink" title="第十五章 幂级数"></a>第十五章 幂级数</h3><h3 id="第十六章-傅里叶级数"><a href="#第十六章-傅里叶级数" class="headerlink" title="第十六章 傅里叶级数"></a>第十六章 傅里叶级数</h3><h3 id="第十七章-多元微分学"><a href="#第十七章-多元微分学" class="headerlink" title="第十七章 多元微分学"></a>第十七章 多元微分学</h3><h3 id="第十八章-勒贝格测度"><a href="#第十八章-勒贝格测度" class="headerlink" title="第十八章 勒贝格测度"></a>第十八章 勒贝格测度</h3><h3 id="第十九章-勒贝格积分"><a href="#第十九章-勒贝格积分" class="headerlink" title="第十九章 勒贝格积分"></a>第十九章 勒贝格积分</h3><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="附录-A-数理逻辑基础"><a href="#附录-A-数理逻辑基础" class="headerlink" title="附录 A 数理逻辑基础"></a>附录 A 数理逻辑基础</h3><h3 id="附录-B-十进制"><a href="#附录-B-十进制" class="headerlink" title="附录 B 十进制"></a>附录 B 十进制</h3>]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>笔记</tag>
        <tag>实分析</tag>
      </tags>
  </entry>
  <entry>
    <title>用非旋 Treap 区间翻转</title>
    <url>/2020/02/03/use-fhq-treap-as-a-splay/</url>
    <content><![CDATA[<p>非旋 Treap，是一种好写，常数小，可拓展性强的弱平衡的二叉搜索树。</p>
<span id="more"></span>
<p>非旋 Treap 的讲解在其他地方也能找到，这里主要讲她的其他用法，比如——序列操作。</p>
<h2 id="例题-文艺平衡树"><a href="#例题-文艺平衡树" class="headerlink" title="例题 文艺平衡树"></a>例题 <a href="https://loj.ac/problem/105">文艺平衡树</a></h2><p>我们来试试拿 非旋 Treap 解决 Splay 模板题~</p>
<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给你一个长度为 $n$ 的序列，初始值为 $(1,2,\cdots,n-1,n)$，你需要执行 $m$ 次操作，每次操作给定一个区间 $[l,r]$，你需要翻转这个区间。举个例子，序列 $(1,2,3,4,5)$ 的 $[2,5]$ 翻转后会变为：$(1,5,4,3,2)$。</p>
<p>$1\leqslant n,m\leqslant 10^5$。</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>翻转的时候用一种“翻转懒标记”的东西来翻转，标记下传的时候就交换一下左右儿子，每次翻转区间 $[l,r]$ 就将原区间分成 $[1,l)$，$[l,r]$，$(r, n]$ 三部分，然后将中间那部分标记一下，最后 merge 到一起。</p>
<p>时间复杂度期望 $\Theta((n+m)\log n)$，空间复杂度 $\Theta(n)$。</p>
<p>具体细节见代码部分。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tuple&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> type, <span class="type">int</span> SIZE = <span class="number">100000</span>, <span class="type">int</span> seed = <span class="number">19260817</span>&gt;</span><br><span class="line"><span class="keyword">class</span> fhq_treap &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">class</span> node &#123;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="type">int</span> key, size, lchild, rchild; </span><br><span class="line">		<span class="comment">// key是随机权值，size是子树大小，lchild,rchild是左右儿子编号。</span></span><br><span class="line">		type data;</span><br><span class="line">		<span class="comment">// 数据。</span></span><br><span class="line">		<span class="type">bool</span> reverse;</span><br><span class="line">		<span class="comment">// 区间翻转lazy tag</span></span><br><span class="line">	&#125; tree[SIZE];</span><br><span class="line">	<span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">	std::mt19937 myrand; <span class="comment">// [1-3]</span></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">update_size</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; x)</span> </span>&#123; <span class="comment">// 更新子树大小</span></span><br><span class="line">		tree[x].size = tree[tree[x].lchild].size + tree[tree[x].rchild].size +</span><br><span class="line">					   <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">push_down_reverse</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; x)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (tree[x].reverse) &#123;</span><br><span class="line">			tree[x].lchild ^= tree[x].rchild ^= </span><br><span class="line">							  tree[x].lchild ^= tree[x].rchild; <span class="comment">// swap [4]</span></span><br><span class="line">			<span class="keyword">if</span> (tree[x].lchild) &#123; <span class="comment">// 我们当然不想让tree[0]改来改去（虽然没有影响）</span></span><br><span class="line">				tree[tree[x].lchild].reverse ^= <span class="number">1</span>; <span class="comment">// [5]</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (tree[x].rchild) &#123;</span><br><span class="line">				tree[tree[x].rchild].reverse ^= <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			tree[x].reverse = <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">fhq_treap</span>(<span class="type">void</span>) &#123;</span><br><span class="line">		<span class="function">std::mt19937 <span class="title">tmp</span><span class="params">(seed)</span></span>; <span class="comment">// 初始化种子</span></span><br><span class="line">		myrand = tmp;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">build</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; x)</span> </span>&#123; <span class="comment">// build一个结点</span></span><br><span class="line">		++count;</span><br><span class="line">		tree[count].data = x;</span><br><span class="line">		tree[count].size = <span class="number">1</span>;</span><br><span class="line">		tree[count].key = <span class="built_in">myrand</span>(); <span class="comment">// 随机赋权值</span></span><br><span class="line">		<span class="keyword">return</span> count;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">merge</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; x, <span class="type">const</span> <span class="type">int</span>&amp; y)</span> </span>&#123; <span class="comment">// 返回x,y的子树合并后根的编号</span></span><br><span class="line">		<span class="keyword">if</span> (x == <span class="number">0</span> || y == <span class="number">0</span>) &#123; <span class="comment">// 如果两棵树有空树</span></span><br><span class="line">			<span class="keyword">return</span> x + y; <span class="comment">// 如果两棵树都是空树，返回空树，否则返回非空的那棵树</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (tree[x].key &lt; tree[y].key) &#123; <span class="comment">// 如果x的随机权值比y小</span></span><br><span class="line">			<span class="built_in">push_down_reverse</span>(x);</span><br><span class="line">			tree[x].rchild = <span class="built_in">merge</span>(tree[x].rchild, y); <span class="comment">// y和x右子树合并</span></span><br><span class="line">			<span class="built_in">update_size</span>(x); <span class="comment">// 更新x子树大小</span></span><br><span class="line">			<span class="keyword">return</span> x; <span class="comment">// 合并后x肯定为根</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123; <span class="comment">// 同上</span></span><br><span class="line">			<span class="built_in">push_down_reverse</span>(y);</span><br><span class="line">			tree[y].lchild = <span class="built_in">merge</span>(x, tree[y].lchild);</span><br><span class="line">			<span class="built_in">update_size</span>(y);</span><br><span class="line">			<span class="keyword">return</span> y;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 关于tuple的知识，你可以去 [6-7] 查看。</span></span><br><span class="line">	<span class="function">std::tuple&lt;<span class="type">int</span>, <span class="type">int</span>&gt; <span class="title">split</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; root, <span class="type">const</span> <span class="type">int</span>&amp; k)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (root == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> std::<span class="built_in">make_tuple</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">push_down_reverse</span>(root);</span><br><span class="line">		</span><br><span class="line">		std::tuple&lt;<span class="type">int</span>, <span class="type">int</span>&gt; res;</span><br><span class="line">		<span class="keyword">if</span> (tree[tree[root].lchild].size &lt; k) &#123; <span class="comment">// 左子树大小不够</span></span><br><span class="line">			<span class="keyword">auto</span> oldres = <span class="built_in">split</span>(tree[root].rchild,</span><br><span class="line">								k - tree[tree[root].lchild].size - <span class="number">1</span>);</span><br><span class="line">			<span class="comment">// 后一个参数的意思是去掉左子树和根的大小</span></span><br><span class="line">			tree[root].rchild = std::<span class="built_in">get</span>&lt;<span class="number">0</span>&gt;(oldres); <span class="comment">// 更新右子树</span></span><br><span class="line">			res = std::<span class="built_in">make_tuple</span>(root, std::<span class="built_in">get</span>&lt;<span class="number">1</span>&gt;(oldres));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123; <span class="comment">// 左子树大小够</span></span><br><span class="line">			<span class="keyword">auto</span> oldres = <span class="built_in">split</span>(tree[root].lchild, k);</span><br><span class="line">			tree[root].lchild = std::<span class="built_in">get</span>&lt;<span class="number">1</span>&gt;(oldres);</span><br><span class="line">			res = std::<span class="built_in">make_tuple</span>(std::<span class="built_in">get</span>&lt;<span class="number">0</span>&gt;(oldres), root);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">update_size</span>(root); <span class="comment">// 更新子树大小</span></span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; root)</span> </span>&#123; <span class="comment">// 中序遍历输出整棵树</span></span><br><span class="line">		<span class="keyword">if</span> (root == <span class="number">0</span>) &#123; <span class="comment">// 如果是空树，返回。</span></span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">push_down_reverse</span>(root); <span class="comment">// 翻转懒标记下传</span></span><br><span class="line">		<span class="built_in">print</span>(tree[root].lchild); <span class="comment">// 输出左子树</span></span><br><span class="line">		std::<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, tree[root].data); <span class="comment">// 输出本身</span></span><br><span class="line">		<span class="built_in">print</span>(tree[root].rchild); <span class="comment">// 输出右子树</span></span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">reverse</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; root)</span> </span>&#123; <span class="comment">// 翻转子树</span></span><br><span class="line">		tree[root].reverse ^= <span class="number">1</span>; <span class="comment">// 标记一下</span></span><br><span class="line">		<span class="keyword">return</span>; <span class="comment">// 搞定~</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">fhq_treap&lt;<span class="type">int</span>, <span class="number">100010</span>&gt; tree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> n, m;</span><br><span class="line">	std::<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">	</span><br><span class="line">	<span class="type">int</span> root = <span class="number">0</span>; <span class="comment">// 树根</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">		root = tree.<span class="built_in">merge</span>(root, tree.<span class="built_in">build</span>(i)); <span class="comment">// 插入i</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">		<span class="type">int</span> revl, revr; <span class="comment">// 翻转区间左右端点</span></span><br><span class="line">		std::<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;revl, &amp;revr);</span><br><span class="line">		<span class="keyword">auto</span> tmp = tree.<span class="built_in">split</span>(root, revl - <span class="number">1</span>); <span class="comment">// 拆分-1</span></span><br><span class="line">		<span class="keyword">auto</span> tmp2 = tree.<span class="built_in">split</span>(std::<span class="built_in">get</span>&lt;<span class="number">1</span>&gt;(tmp), revr - revl + <span class="number">1</span>); <span class="comment">// 拆分-2</span></span><br><span class="line">		tree.<span class="built_in">reverse</span>(std::<span class="built_in">get</span>&lt;<span class="number">0</span>&gt;(tmp2)); <span class="comment">// 翻转</span></span><br><span class="line">		root = tree.<span class="built_in">merge</span>(std::<span class="built_in">get</span>&lt;<span class="number">0</span>&gt;(tmp), tree.<span class="built_in">merge</span>(std::<span class="built_in">get</span>&lt;<span class="number">0</span>&gt;(tmp2),</span><br><span class="line">													   std::<span class="built_in">get</span>&lt;<span class="number">1</span>&gt;(tmp2))); </span><br><span class="line">		<span class="comment">// 合并</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	tree.<span class="built_in">print</span>(root); <span class="comment">// 输出</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tips:</span></span><br><span class="line"><span class="comment">// [1]: https://oi-wiki.org/misc/random/</span></span><br><span class="line"><span class="comment">// [2]: https://zh.cppreference.com/w/cpp/numeric/random/mersenne_twister_engine</span></span><br><span class="line"><span class="comment">// [3]: https://en.wikipedia.org/wiki/Mersenne_twister</span></span><br><span class="line"><span class="comment">// [4]: 第一次见这种写法，你可能会被吓到：a ^= b ^= a ^= b真的能交换a和b的值？</span></span><br><span class="line"><span class="comment">//		这里将阐述这种做法的正确性。我们假设x和y分别是两个bool变量，</span></span><br><span class="line"><span class="comment">//		如果x ^= y ^= x ^= y能交换x和y的值，那我们对a和b的每一位拿出来做这个运算，</span></span><br><span class="line"><span class="comment">//		也能交换这两位，于是a和b的每一位都交换了，所以a和b的值也交换了。</span></span><br><span class="line"><span class="comment">//		我们枚举(x, y)的4种初始值(0, 0), (0, 1), (1, 0), (1, 1)，</span></span><br><span class="line"><span class="comment">//		观察在x ^= y ^= x ^= y的每一步之后(x, y)的变化情况（注意^=是右结合的）：</span></span><br><span class="line"><span class="comment">//		(0, 0) -&gt; (0, 0) -&gt; (0, 0) -&gt; (0, 0)</span></span><br><span class="line"><span class="comment">//		(0, 1) -&gt; (1, 1) -&gt; (1, 0) -&gt; (1, 0)</span></span><br><span class="line"><span class="comment">//		(1, 0) -&gt; (1, 0) -&gt; (1, 1) -&gt; (0, 1)</span></span><br><span class="line"><span class="comment">//		(1, 1) -&gt; (0, 1) -&gt; (0, 1) -&gt; (1, 1)</span></span><br><span class="line"><span class="comment">//		发现了吗？(x, y)经过操作之后一定会变为(y, x)。所以我们证明了该操作的正确性。</span></span><br><span class="line"><span class="comment">// [5]: 对于bool变量x，x ^= 1等价于x = !x。</span></span><br><span class="line"><span class="comment">//		你可以通过枚举x分别为true和false的情况来证明这个操作的正确性。</span></span><br><span class="line"><span class="comment">// [6]: https://zh.cppreference.com/w/cpp/header/tuple</span></span><br><span class="line"><span class="comment">// [7]: https://zh.cppreference.com/w/cpp/utility/tuple</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>平衡树</tag>
      </tags>
  </entry>
  <entry>
    <title>不基础的“基础类型”</title>
    <url>/2020/07/25/%E4%B8%8D%E5%9F%BA%E7%A1%80%E7%9A%84%E2%80%9C%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B%E2%80%9D/</url>
    <content><![CDATA[<!--comment-->
<span id="more"></span>
<p>相信你在 C++ 入门的时候就已经接触到了基础类型这个概念，但是，你真的完全理解了基础类型吗？</p>
<h2 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h2><p><code>bool</code> 非常简单，标准只要求它能存储 <code>true</code> 和 <code>false</code>。<code>sizeof(bool)</code> 由实现定义，可以不为 1。</p>
<h2 id="整型与字符类型"><a href="#整型与字符类型" class="headerlink" title="整型与字符类型"></a>整型与字符类型</h2><p>首先有几个冷知识：</p>
<ol>
<li>整型的修饰符可以调换顺序。如 <code>unsigned long long int</code> 等价于 <code>long long unsigned int</code>、<code>long int long unsigned</code>。</li>
<li><code>long long</code> 实际上在 C++11 里才写入标准中，尽管很多编译器并不需要开启 <code>-std=c++11</code> 或更高版本的编译选项都可认识 <code>long long</code>。</li>
</ol>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">数据类型</th>
<th style="text-align:center">最小长度/bit</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>short</code></td>
<td style="text-align:center">16</td>
</tr>
<tr>
<td style="text-align:center"><code>int</code></td>
<td style="text-align:center">16</td>
</tr>
<tr>
<td style="text-align:center"><code>long</code></td>
<td style="text-align:center">32</td>
</tr>
<tr>
<td style="text-align:center"><code>long long</code> [C++11 起]</td>
<td style="text-align:center">64 [C++11 起]</td>
</tr>
<tr>
<td style="text-align:center"><code>char</code></td>
<td style="text-align:center">无定义[C++14 前] / 8[C++14 起]</td>
</tr>
</tbody>
</table>
</div>
<p>C++ 标准还保证 <code>1 == sizeof(char) &lt;= sizeof(short) &lt;= sizeof(int) &lt;= sizeof(long) &lt;= sizeof(long long)</code>。</p>
<h2 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h2><p>这才是本文的重点。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://zh.cppreference.com/w/cpp/language/types">https://zh.cppreference.com/w/cpp/language/types</a></p>
]]></content>
      <tags>
        <tag>C++</tag>
        <tag>语法</tag>
      </tags>
  </entry>
  <entry>
    <title>「陶哲轩实分析笔记」2.2 加法</title>
    <url>/2021/01/05/%E3%80%8C%E9%99%B6%E5%93%B2%E8%BD%A9%E5%AE%9E%E5%88%86%E6%9E%90%E7%AC%94%E8%AE%B0%E3%80%8D%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E4%BB%8E%E5%A4%B4%E5%BC%80%E5%A7%8B%EF%BC%9A%E8%87%AA%E7%84%B6%E6%95%B0/</url>
    <content><![CDATA[<!--comment-->
<span id="more"></span>
<p><strong>定义 2.2.1</strong> 令 $m$ 为一个自然数，定义 $m$ 加上 $0$ 为 $0+m:=m$。归纳地假设已经定义了 $m$ 加上 $n$ 的值，那么 $m$ 加上 $n’$ 为 $n’+m:=(n+m)’$。</p>
<h2 id="加法交换律"><a href="#加法交换律" class="headerlink" title="加法交换律"></a>加法交换律</h2><p><strong>命题 2.2.4</strong> 对于任意自然数 $n$、$m$，有 $n+m=m+n$。</p>
<h2 id="加法结合律"><a href="#加法结合律" class="headerlink" title="加法结合律"></a>加法结合律</h2><p><strong>命题 2.2.5</strong> 对于任意自然数 $a$、$b$、$c$，有 $(a+b)+c=a+(b+c)$。（对 $b$ 使用归纳法）</p>
<h2 id="加法消去律"><a href="#加法消去律" class="headerlink" title="加法消去律"></a>加法消去律</h2><p><strong>命题 2.2.6</strong> 对于任何自然数 $a$、$b$、$c$，如果 $a+c=b+c$，那么 $a=b$。（对 $c$ 使用归纳法）</p>
<h2 id="正自然数"><a href="#正自然数" class="headerlink" title="正自然数"></a>正自然数</h2><p><strong>定义 2.2.7</strong> 称一个自然数 $a$ 是正的，当且仅当它不等于 $0$。</p>
<p><strong>命题 2.2.8</strong> 如果 $a$ 是一个正自然数并且 $b$ 是一个自然数，那么 $a+b$ 也是一个正自然数。（结合引理 2.2.3）</p>
<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p><strong>定义 2.2.11</strong> 令 $n$、$m$ 为两个自然数，称 $n\ge m$ 或 $m\le n$，当且仅当存在自然数 $a$ 满足 $m+a=n$。称 $n&gt;m$ 或 $m&lt;n$，当且仅当 $n\ge m$ 并且 $n\ne m$。</p>
<p><strong>命题 2.2.12（自然数序的基本性质）</strong> 令 $a$、$b$、$c$ 为任意自然数，那么：</p>
<ol>
<li>(a)（序是自反的）$a\ge a$。</li>
<li>(b)（序是可传递的）如果 $a\ge b$ 并且 $b\ge c$，那么 $a\ge c$。</li>
<li>(c)（序是反对称的）如果 $a\ge b$ 并且 $b\ge a$，那么 $a=b$。</li>
<li>(d)（加法保持序不变）如果 $a\ge b$，那么 $a+c\ge b+c$。</li>
<li>(e) $a&lt;b$，当且仅当 $a’\le b$。</li>
<li>(f) $a&lt;b$，当且仅当存在正自然数 $d$ 使得 $b=a+d$。</li>
</ol>
<p><strong>命题 2.2.13（自然数的序的三歧性）</strong> 令 $a$、$b$ 为两个自然数，那么下面三种表述中恰有一个为真：$a&lt; b$，$a=b$，$a&gt;b$。</p>
<p><strong>命题 2.2.14（强归纳法原理）</strong> 令 $m$ 为一个自然数，$P(m)$ 表示一个与自然数 $m$ 有关的性质。如果当对于任意 $m\ge m_0$，都有：如果 $P(n)$ 对于任意的 $m_0\le n&lt; m$ 都为真，那么 $P(m)$ 也为真。（注意当 $m=m_0$ 时 $P(m)$ 为真，因为此时自然数 $n$ 的取值范围为空）此时那么我们可以断定，$P(m)$ 对于任意 $m\ge m_0$ 都为真。</p>
<h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><p>习题 2.2.1 证明命题 2.2.5。</p>
<p>命题 2.2.5：对于任意自然数 $a$、$b$、$c$，有 $(a+b)+c=a+(b+c)$。</p>
<blockquote>
<p>证明：</p>
<p>对 $b$ 使用归纳法。</p>
<p>当 $b=0$ 时，</p>
<script type="math/tex; mode=display">
\begin{aligned}
(a+0)+c&=a+c&(2.2.2)\\
&=a+(0+c)
\end{aligned}</script><p>若 $(a+b)+c=a+(b+c)$，那么</p>
<script type="math/tex; mode=display">
\begin{aligned}
(a+b')+c&=(a+b)'+c&(2.2.3)\\
&=((a+b)+c)'\\
&=(a+(b+c))'\\
&=a+(b+c)'&(2.2.3)\\
&=a+(b'+c)
\end{aligned}</script> <div align="right">$\square$</div>

</blockquote>
<p>习题 2.2.2 证明引理 2.2.10。</p>
<p>引理 2.2.10：若 $a$ 为一个正自然数，则恰有一个自然数 $b$ 使得 $b’=a$。</p>
<blockquote>
<p>证明：</p>
<p>首先，如果存在自然数 $b$ 使得 $b’=a$，那么必定不存在另一个不同的自然数也满足这个条件。（根据公理 2.4）</p>
<p>接下来运用归纳法证明“存在自然数 $b$ 使得 $b’=a+1$”对于任意自然数 $a$ 成立：</p>
<p>首先当 $a=0$ 时，显然有 $b=0$ 满足条件。</p>
<p>假设存在自然数 $b$ 使得 $b’=a+1$，那么有 $b’’=b’+1$，所以命题对 $a’$ 也成立。</p>
<div align="right">$\square$</div>

</blockquote>
<p>习题 2.2.3 证明命题 2.2.12。</p>
<p>命题 2.2.12：令 $a$、$b$、$c$ 为任意自然数，那么：</p>
<ol>
<li>(a) $a\ge a$。</li>
<li>(b) 如果 $a\ge b$ 并且 $b\ge c$，那么 $a\ge c$。</li>
<li>(c) 如果 $a\ge b$ 并且 $b\ge a$，那么 $a=b$。</li>
<li>(d) 如果 $a\ge b$，那么 $a+c\ge b+c$。</li>
<li>(e) $a&lt;b$，当且仅当 $a’\le b$。</li>
<li>(f) $a&lt;b$，当且仅当存在正自然数 $d$ 使得 $b=a+d$。</li>
</ol>
<p>命题 (a)：</p>
<blockquote>
<p>证明：</p>
<p>因为当 $b=0$ 时，有 $a+0=a$（引理 2.2.2），所以 $a\ge a$。</p>
<div align="right">$\square$</div>

</blockquote>
<p>命题 (b)：</p>
<blockquote>
<p>证明：</p>
<p>因为 $a\ge b$，所以存在自然数 $k_1$ 使得 $b+k_1=a$。因为 $b\ge c$，所以存在自然数 $k_2$ 使得 $c+k_2=b$。因为 $a=b+k_1=(c+k_2)+k_1=c+(k_2+k_1)$，所以 $c\ge a$。</p>
<div align="right">$\square$</div>

</blockquote>
<p>命题 (c)：</p>
<blockquote>
<p>证明：</p>
<p>因为 $a\ge b$，所以存在自然数 $d$ 使得 $b+d=a$，因为 $b\ge a$，所以存在自然数 $e$ 使得 $a+e=b$。所以 $b=a+e=(b+d)+e=b+(d+e)$，所以 $b+0=b+(d+e)$（引理 2.2.2），所以 $d+e=0$（命题 2.2.6），所以 $d=e=0$（推论 2.2.9），所以 $b=a+e=a+0=a$（引理 2.2.2）。</p>
<div align="right">$\square$</div>

</blockquote>
<p>命题 (d)：</p>
<blockquote>
<p>证明：</p>
<p>因为 $a\ge b$，所以存在自然数 $d$ 使得 $b+d=a$，所以</p>
<script type="math/tex; mode=display">
\begin{aligned}
(b+c)+d&=b+(c+d)&(2.2.5)\\
&=b+(d+c)&(2.2.4)\\
&=(b+d)+c&(2.2.5)\\
&=a+c
\end{aligned}</script><p>所以 $a+c\ge b+c$。</p>
<div align="right">$\square$</div>

</blockquote>
<p>命题 (e)：</p>
<blockquote>
<p>证明：</p>
<p>首先证明 $a&lt;b$ 蕴含 $a’\le b$：</p>
<p>因为 $a&lt;b$，所以 $a\le b$ 并且 $a\ne b$。所以存在自然数 $d$ 使得 $a+d=b$，但是当 $d=0$ 时 $a+d=a+0=a=b$ 与 $a\ne b$ 矛盾，所以 $d\ne 0$。根据引理 2.2.10，存在自然数 $e$ 使得 $e’=d$。所以 $a+e’=b$。所以 $a’+e=b$（引理 2.2.4），所以 $a’\le b$。</p>
<p>然后证明 $a’\le b$ 蕴含 $a&lt;b$：</p>
<p>因为 $a’\le b$，所以存在自然数 $d$ 使得 $a’+d=b$，所以有 $a+d’=b$（引理 2.2.4），因为 $d’\ne 0$（公理 2.3），所以 $b+a+d’\ne a+0=a$，所以 $a&lt;b$。</p>
<div align="right">$\square$</div>

</blockquote>
<p>命题 (f)：</p>
<blockquote>
<p>证明：</p>
<p>首先证明 $a&lt;b$ 蕴含存在正自然数 $d$ 使得 $a+d=b$：</p>
<p>如果 $a&lt;b$，那么 $a\le b$ 并且 $a\ne b$。所以存在自然数 $e$ 使得 $a+e=b$。当 $e=0$ 时 $b=a+e=a+0=a$ 与 $a\ne b$ 矛盾，所以 $e\ne 0$，所以 $e$ 为正自然数。</p>
<p>然后证明存在正自然数 $d$ 使得 $a+d=b$ 蕴含 $a&lt;b$：</p>
<p>因为存在自然数 $d$ 使得 $a+d=b$，所以 $a\le b$。因为若 $a=b$ 则根据命题 2.2.6 有 $d=0$ 与 $d$ 为正自然数矛盾，故 $a\ne b$。所以 $a&lt;b$。</p>
<div align="right">$\square$</div>

</blockquote>
<p>习题 2.2.4 证明以下三个命题：</p>
<ol>
<li>(a) 对于任意自然数 $b$，有 $0\le b$。</li>
<li>(b) 对于任意自然数 $a$、$b$，如果 $a&gt;b$，那么 $a’&gt;b$。</li>
<li>(c) 对于任意自然数 $a$、$b$，如果 $a=b$，那么 $a’&gt;b$。</li>
</ol>
<p>命题 (a)：</p>
<blockquote>
<p>证明：</p>
<p>因为当 $m=b$ 时，$0+m=0+b=b$，所以 $0\le b$。</p>
<div align="right">$\square$</div>

</blockquote>
<p>命题 (b)：</p>
<blockquote>
<p>证明：</p>
<p>因为 $a&gt;b$，根据命题 2.2.12f，存在正自然数 $m$ 使得 $b+m=a$。因为 $a’=(b+m)’=b+m’$ 并且 $m’$ 为正自然数，所以根据命题 2.2.12f，$a’&gt;b$。</p>
<div align="right">$\square$</div>

</blockquote>
<p>命题 (c)：</p>
<blockquote>
<p>证明：</p>
<p>因为 $a=b$，所以当 $m=1$ 时有 $b+m=b+1=b+0’=(b+0)’=b’=a’$。因为 $m$ 为正自然数，所以 $a’&gt;b$。</p>
<div align="right">$\square$</div>

</blockquote>
<p>习题 2.2.5 证明命题 2.2.14。</p>
<p>命题 2.2.14：令 $m$ 为一个自然数，$P(m)$ 表示一个与自然数 $m$ 有关的性质。如果当对于任意 $m\ge m_0$，都有：如果 $P(n)$ 对于任意的 $m_0\le n&lt; m$ 都为真，那么 $P(m)$ 也为真。（注意当 $m=m_0$ 时 $P(m)$ 为真，因为此时自然数 $n$ 的取值范围为空）此时那么我们可以断定，$P(m)$ 对于任意 $m\ge m_0$ 都为真。</p>
<blockquote>
<p>证明：</p>
<p>令 $Q(n)$ 表示如下关于自然数 $n$ 的性质：对于任意满足 $m_0\le m\le n$ 的自然数 $m$，均有 $P(m)$ 成立。（当 $n&lt;m_0$ 时 $Q(n)$ 恒为真，因为此时自然数 $m$ 的取值范围为空）</p>
<p>那么首先因为 $P(m_0)$ 为真，所以 $Q(m_0)$ 也为真。</p>
<p>当 $n\ge m_0$ 时，如果 $Q(n)$ 为真，那么根据 $P(m)$ 的定义，因为对于任意满足 $m_0\le m&lt; n’$ 的自然数 $m$ 都有 $P(m)$ 为真，所以 $P(n’)$ 也为真。所以对于任意满足 $m_0\le m\le n’$ 的自然数 $m$，均有 $P(m)$ 为真。所以 $Q(n’)$ 为真。</p>
<p>用归纳法证明“当 $n$ 为正整数时，$Q(n+m_0)$ 为真”。</p>
<p>当 $n=0$ 时，$Q(n+m_0)=Q(m_0)$ 为真。</p>
<p>如果 $Q(n+m_0)$ 为真，那么 $Q(n’+m_0)=Q((n+m_0)’)$ 也为真。</p>
<p>所以命题“$Q(n+m_0)$ 为真”对于任意自然数都成立。</p>
<p>所以对于任意满足 $n\ge m_0$ 的自然数 $n$，都有 $Q(n)$ 成立。</p>
<p>所以对于任意满足 $m\ge m_0$ 的自然数 $m$，都有 $P(m)$ 成立。</p>
<div align="right">$\square$</div>

</blockquote>
<p>习题 2.2.6：</p>
<hr>
<h2 id="Footnote"><a href="#Footnote" class="headerlink" title="Footnote"></a>Footnote</h2><blockquote id="fn_i">
<sup>i</sup>. 为了方便，命题、定理、引理、假设等均沿用原文的编号。<a href="#reffn_i" title="Jump back to footnote [i] in the text."> &#8617;</a>
</blockquote>
<blockquote id="fn_ii">
<sup>ii</sup>. 这个定义/证明不够严谨，在原文中有标注“非正式的”。<a href="#reffn_ii" title="Jump back to footnote [ii] in the text."> &#8617;</a>
</blockquote>
<blockquote id="fn_iii">
<sup>iii</sup>. 这里用到了下一章才会给出定义的函数，但这并非循环论证，因为函数的定义并不需要用到 Peano 公理。<a href="#reffn_iii" title="Jump back to footnote [iii] in the text."> &#8617;</a>
</blockquote>
<blockquote id="fn_iv">
<sup>iv</sup>. 这里 $:=$ 是“定义为”的意思。<a href="#reffn_iv" title="Jump back to footnote [iv] in the text."> &#8617;</a>
</blockquote>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>笔记</tag>
        <tag>实分析</tag>
      </tags>
  </entry>
  <entry>
    <title>中国古典文学笔记——唐诗四分法观念的形成</title>
    <url>/2021/10/16/%E4%B8%AD%E5%9B%BD%E5%8F%A4%E5%85%B8%E6%96%87%E5%AD%A6%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%94%90%E8%AF%97%E5%9B%9B%E5%88%86%E6%B3%95%E8%A7%82%E5%BF%B5%E7%9A%84%E5%BD%A2%E6%88%90/</url>
    <content><![CDATA[<p>在研究唐朝诗歌时，学者们往往会将唐朝划分为四个时期：初唐、盛唐、中唐、晚唐，称为“四分法”。“四分法”是什么时候出现的？是现代的学者们讨论得出的，还是古代的文人总结的？是一开始就是“初盛中晚”，还是经历了数代人的发展？</p>
<span id="more"></span>
<h2 id="唐诗"><a href="#唐诗" class="headerlink" title="唐诗"></a>唐诗</h2><p>要研究唐诗的时代划分，先得知道关于唐诗的一些基本信息。</p>
<p>唐朝，从 618 年隋恭帝杨侑禅位唐高祖李渊算起，到 907 年唐哀帝李祚禅位后梁太祖朱温结束，国祚共历 289 年，21 位皇帝。</p>
<p>《全唐诗》共有 49043 首，题材广泛，艺术形式成熟，流派颇多。故后人称唐为“诗歌鼎盛之时代”。</p>
<p>在唐诗之前的朝代，从先秦时期到六朝（指晋宋齐梁陈隋）时期，诗歌的发展为唐朝诗歌的盛况奠定了基础。唐诗所谓“浪漫主义”“现实主义”早在先秦至秦汉就有出现：《诗三百》、汉乐府是写实派；《楚辞》是浪漫派。汉魏诗人讥刺时政、抒发理想的诗（如古诗十九首），提供了反映民生疾苦的经验。六朝时描写山水田园的诗的出现（如陶渊明的多数诗歌），以及运用声律、对偶的体裁（如“永明体”），也为唐代诗人提供了极其丰富的经验。由此可见，唐朝诗歌的盛况，绝不是突然出现的，而是前人的丰富经验、君主的提倡（以诗赋取士）造就的。</p>
<p>前面提到，在齐梁时期的永明体已经开始运用声律、对偶了，而初唐四杰王勃、杨炯、卢照邻、骆宾王则在此基础上，开创了新诗风。同时期的陈子昂明确提出诗歌复古，不写六朝诗，反对六朝“浮靡之风”。最后在沈佺期、宋之问、杜审言对诗歌格律的探讨下，律诗这一新体裁才正式形成。</p>
<h2 id="四分法的形成与发展"><a href="#四分法的形成与发展" class="headerlink" title="四分法的形成与发展"></a>四分法的形成与发展</h2><p>晚唐即有人开始对四分法分期。诗论家司空图（837-908）所著的《二十四书品》谈及二十四种诗风，有了唐代分期的萌芽。</p>
<p>南宋严羽所著的《沧浪诗话》，将唐朝分为五个时期：唐初体（“犹袭陈、隋文体”）、盛唐体（代表为“景云之后，天宝、开元诸公”）、大历体（代表为“大历十才子”）、元和体（代表为元（稹）、白（居易）诸公）、晚唐体。</p>
<p>方回（1227-1305）在《瀛荃律髓》中第一次建立了“中唐”观念。四分法的最终定型是在高棅的《唐诗品汇》里，他在总叙中叙述了初唐、盛唐、中唐、晚唐四分法。</p>
]]></content>
      <categories>
        <category>文学</category>
      </categories>
      <tags>
        <tag>古典文学</tag>
        <tag>文学</tag>
      </tags>
  </entry>
  <entry>
    <title>初中化学易错点整理</title>
    <url>/2021/02/02/%E5%8C%96%E5%AD%A6%E6%98%93%E9%94%99%E7%82%B9%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<p>化学寒假作业……</p>
<span id="more"></span>
<p>化学易错点整理</p>
<ol>
<li>冰水混合物是纯净物，不是混合物</li>
<li>纯碱是盐不是碱</li>
<li>空气中 $\rm O_2$ 的体积分数约占 $21\%$，而非质量分数</li>
<li>$\rm CO_2$ 不属于空气污染物</li>
<li>加热 $\rm KMnO_4$ 制取 $\rm O_2$ 时若用排水法收集应等待导管口有均匀、连续的气泡冒出后再收集</li>
<li>测定空气中 $\rm O_2$ 的含量的装置内的红磷不能换成铁丝、木炭</li>
<li>相对原子质量是无单位量</li>
<li>不是所有金属元素都有金字旁，汞就没有</li>
<li>由一种元素组成的物质不一定是纯净物，譬如木炭和钻石的混合物</li>
<li>稀硫酸、稀盐酸与 $\rm Fe$ 反应都只生成 $\rm Fe^{2+}$ 而不生成 $\rm Fe^{3+}$。</li>
<li>溶液中的粒子包括水分子</li>
<li>除了 $\begin{matrix}\triangle\\rm CO+CuO=!=!=CO_2+Cu\end{matrix}$ 以外，大多数初中化学的以 $\rm CO$ 或 $\rm C$ 做还原剂的还原反应都需要“高温”条件。</li>
<li>炼铁炉中，焦炭不仅用于还原铁矿石，同时还为反应提供热量。</li>
<li>在未给出温度的前提下比较两物的溶解度孰大孰小是无意义的</li>
<li>$t\ ^\circ!\rm C$ 下某物的溶解度为 $a\ \rm g$ 是指在该温度下它的饱和溶液中溶剂（水）的质量为 $100\ \rm g$ 时该物质的质量为 $a\ \rm g$，而非在该温度下它的 $100\ \rm g$ 饱和溶液中该物质的质量为 $a\ \rm g$。</li>
<li>催化剂在反应前后物理性质可能改变，但化学性质不会改变，质量也不会改变。</li>
<li>原子并不是不可分割的，在核反应中原子也能再分（核裂变）</li>
<li>加热 $\rm KMnO_4$ 制 $\rm O_2$（或将 $\rm KClO_3$ 与 $\rm MnO_2$ 共热制 $\rm O_2$）后一定要先撤导管后撤灯！</li>
<li>$\rm NH_4NO_3$、$\rm KNO_3$、$\rm NH_4Cl$ 等溶解于水时吸热，会影响其溶解度</li>
<li>若要探究浓硫酸与过量的某物进行的反应，要记得判断稀硫酸能否与该物质反应。</li>
</ol>
]]></content>
      <categories>
        <category>化学</category>
      </categories>
      <tags>
        <tag>化学</tag>
      </tags>
  </entry>
  <entry>
    <title>提高模板汇总</title>
    <url>/2020/06/03/%E6%8F%90%E9%AB%98%E6%A8%A1%E6%9D%BF%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<!--comment-->
<span id="more"></span>
<h2 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h2><ul>
<li>**Miller-Rabin 试除法 <a href="https://loj.ac/problem/143">模板</a></li>
<li>埃氏筛、欧拉筛 <a href="https://www.luogu.com.cn/problem/P3383">模板</a></li>
<li>*Pollard-$\rho$ 算法 <a href="https://www.luogu.com.cn/problem/P4718">模板</a></li>
<li>整除分块 <a href="https://www.luogu.com.cn/problem/P2261">模板</a></li>
<li>欧拉函数 $\varphi$ <a href="https://www.luogu.com.cn/problem/P2158">模板（线性筛）</a></li>
<li>Bézout 定理（扩展 gcd）<a href="https://www.luogu.com.cn/problem/P4549">模板</a></li>
<li>乘法逆元  <a href="https://loj.ac/problem/2605">模板1</a> <a href="https://loj.ac/problem/110">模板2</a></li>
<li>中国剩余定理 <a href="https://www.luogu.com.cn/problem/P1495">模板1</a> <a href="https://www.luogu.com.cn/problem/P4777">模板2（扩展 CRT）</a></li>
<li>*BSGS 算法 <a href="https://www.luogu.com.cn/problem/P3846">模板1（在造）</a> <a href="https://www.luogu.com.cn/problem/P4777">模板2（扩展 BSGS）</a> <a href="https://loj.ac/problem/6542">模板3（离散对数）</a></li>
<li>Lucas 定理 <a href="https://www.luogu.com.cn/problem/P3807">模板1</a> <a href="https://www.luogu.com.cn/problem/P3807">模板2（扩展 Lucas）</a></li>
<li>矩阵乘法 <a href="https://www.luogu.com.cn/problem/P3390">模板1（矩阵快速幂）</a> <a href="https://www.luogu.com.cn/problem/P1939">模板2（矩阵优化常系数齐次线性递推）</a></li>
<li>高斯消元 <a href="https://www.luogu.com.cn/problem/P3389">模板</a> </li>
<li>线性基 <a href="https://www.luogu.com.cn/problem/P3812">模板</a></li>
<li>01 分数规划 <a href="">模板（在造）</a></li>
<li>*FFT <a href="https://loj.ac/problem/108">模板</a></li>
<li>*NTT <a href="https://loj.ac/problem/108">模板1</a> <a href="https://www.luogu.com.cn/problem/P4245">**模板2（任意模数）</a></li>
</ul>
<h2 id="基础算法"><a href="#基础算法" class="headerlink" title="基础算法"></a>基础算法</h2><ul>
<li>* A*，IDA*</li>
<li>字符串 hash <a href="https://www.luogu.com.cn/problem/P3370">模板</a></li>
<li>KMP <a href="https://www.luogu.com.cn/problem/P3370">模板</a></li>
<li>Trie <a href="https://www.luogu.com.cn/problem/P2580">模板</a></li>
<li>*AC 自动机 <a href="https://www.luogu.com.cn/problem/P3808">模板1</a> <a href="https://www.luogu.com.cn/problem/P3796">模板2</a> <a href="https://www.luogu.com.cn/problem/P5357">模板3</a></li>
<li>Manacher 算法 <a href="https://www.luogu.com.cn/problem/P3805">模板</a></li>
<li>*CDQ 分治 <a href="https://vjudge.net/problem/SPOJ-LIS2">例题</a></li>
<li>分块 <a href="https://loj.ac/problem/6277">例题1</a> <a href="https://loj.ac/problem/6278">例题2</a> <a href="https://loj.ac/problem/6279">例题3</a> <a href="https://loj.ac/problem/6280">例题4</a> <a href="https://loj.ac/problem/6281">例题5</a> <a href="https://loj.ac/problem/6282">例题6</a> <a href="https://loj.ac/problem/6283">例题7</a> <a href="https://loj.ac/problem/6284">例题8</a> <a href="https://loj.ac/problem/6285">例题9</a> </li>
</ul>
<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><ul>
<li>单调栈 <a href="https://www.luogu.com.cn/problem/P5788">模板</a></li>
<li>单调队列 <a href="https://www.luogu.com.cn/problem/P1886">模板</a></li>
<li>ST 表 <a href="https://www.luogu.com.cn/problem/P3865">模板</a></li>
<li>Huffman 树 <a href="https://www.luogu.com.cn/problem/P2168">模板</a></li>
<li>左偏树、配对堆 <a href="https://www.luogu.com.cn/problem/P3377">模板</a></li>
<li>并查集 <a href="https://loj.ac/problem/109">模板</a></li>
<li>树状数组/线段树 <a href="https://loj.ac/problem/130">模板1</a> <a href="https://loj.ac/problem/131">模板2</a> <a href="https://loj.ac/problem/132">模板3</a> <a href="https://loj.ac/problem/133">模板4（二维）</a> <a href="https://loj.ac/problem/134">模板5（二维）</a> <a href="https://loj.ac/problem/135">模板6（二维）</a> <a href="https://www.luogu.com.cn/problem/P1908">模板7（逆序对）</a> <a href="https://www.luogu.com.cn/problem/P5490">模板8（扫描线）</a> </li>
<li>可持久化权值线段树 <a href="https://www.luogu.com.cn/problem/P3834">模板</a></li>
<li>*线段树合并 <a href="https://www.luogu.com.cn/problem/P4556">模板1</a> <a href="https://www.luogu.com.cn/problem/P3224">模板2</a></li>
<li>*线段树分裂 <a href="https://www.luogu.com.cn/problem/P5494">模板</a></li>
<li>莫队 <a href="https://www.luogu.com.cn/problem/P1494">模板1</a> <a href="https://www.luogu.com.cn/problem/P1903">例题2（带修）</a> </li>
<li>点分治 <a href="https://www.luogu.com.cn/problem/P3806">模板</a></li>
<li>*边分治 <a href="https://www.luogu.com.cn/problem/P3806">模板</a></li>
<li>BST <a href="https://loj.ac/problem/104">模板</a></li>
<li>旋转 Treap <a href="https://loj.ac/problem/104">模板</a></li>
<li>非旋 Treap <a href="https://loj.ac/problem/104">模板1</a> <a href="https://loj.ac/problem/104">模板2</a></li>
<li>Splay <a href="https://loj.ac/problem/104">模板1</a> <a href="https://loj.ac/problem/104">模板2</a></li>
<li>树链剖分 <a href="https://loj.ac/problem/139">模板</a></li>
<li>*Link-Cut Tree <a href="https://www.luogu.com.cn/problem/P3690">模板</a></li>
<li>***仙人掌系列</li>
</ul>
<h2 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h2><ul>
<li>LCA <a href="https://www.luogu.com.cn/problem/P3379">模板</a></li>
<li>树的直径 <a href="">模板（在造）</a></li>
<li>树的重心 <a href="http://poj.org/problem?id=1655">模板</a></li>
<li>DFS 序 <a href="https://loj.ac/problem/144">模板1</a> <a href="https://loj.ac/problem/145">模板2</a> <a href="https://loj.ac/problem/146">模板3</a> <a href="https://loj.ac/problem/147">模板4</a></li>
<li>树上差分 <a href="https://loj.ac/problem/146">模板</a></li>
<li></li>
</ul>
]]></content>
      <tags>
        <tag>模板</tag>
      </tags>
  </entry>
  <entry>
    <title>数学常用公式定理</title>
    <url>/2020/12/21/%E6%95%B0%E5%AD%A6%E5%B8%B8%E7%94%A8%E5%AE%9A%E7%90%86%E3%80%81%E5%85%AC%E5%BC%8F/</url>
    <content><![CDATA[<!--comment-->
<span id="more"></span>
<h2 id="三角恒等式"><a href="#三角恒等式" class="headerlink" title="三角恒等式"></a>三角恒等式</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><script type="math/tex; mode=display">
\sin^2x+\cos^2x=1\\
\tan x=\frac{\sin x}{\cos x}\\</script><h3 id="奇偶性"><a href="#奇偶性" class="headerlink" title="奇偶性"></a>奇偶性</h3><script type="math/tex; mode=display">
\sin (-x)=-\sin x\\
\cos (-x)=\cos x\\
\tan x=-\tan x</script>]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈简单方程通解</title>
    <url>/2020/11/22/%E6%B5%85%E8%B0%88%E7%AE%80%E5%8D%95%E6%96%B9%E7%A8%8B%E9%80%9A%E8%A7%A3/</url>
    <content><![CDATA[<p>本文主要讨论一些较为简单的整式方程的通解，涉及的较高难度的内容均会有详细讲解，请放心阅读。</p>
<span id="more"></span>
<h2 id="一元整式方程"><a href="#一元整式方程" class="headerlink" title="一元整式方程"></a>一元整式方程</h2><p>本段所有方程若无特殊说明系数皆为实数。</p>
<h3 id="一元一次方程"><a href="#一元一次方程" class="headerlink" title="一元一次方程"></a>一元一次方程</h3><script type="math/tex; mode=display">
ax+b=0\quad(a\ne 0)</script><p>移项可知</p>
<script type="math/tex; mode=display">
x=-\dfrac ba</script><h3 id="一元二次方程"><a href="#一元二次方程" class="headerlink" title="一元二次方程"></a>一元二次方程</h3><script type="math/tex; mode=display">
ax^2+bx+c=0\quad(a\ne 0)</script><p>最高项系数化为 $1$：</p>
<script type="math/tex; mode=display">
x^2+\dfrac bax+\dfrac ca=0</script><p>配方：</p>
<script type="math/tex; mode=display">
\left(x+\dfrac b{2a}\right)^2+\left(\dfrac ca-\dfrac{b^2}{4a^2}\right)=0</script><p>化简：</p>
<script type="math/tex; mode=display">
\left(x+\dfrac b{2a}\right)^2=\dfrac{b^2-4ac}{4a^2}\\
x+\dfrac b{2a}=\dfrac{\pm\sqrt{b^2-4ac}}{|2a|}\\
x=\dfrac{-b\pm\sqrt{b^2-4ac}}{2a}</script><p>不妨设 $\Delta=b^2-4ac$，易得</p>
<ul>
<li>当 $\Delta&gt;0$ 时，方程有两个相异的实根；</li>
<li>当 $\Delta=0$ 时，方程有一个二重实根；</li>
<li>当 $\Delta&lt;0$ 时，方程有一对共轭复根。</li>
</ul>
<h3 id="一元三次方程"><a href="#一元三次方程" class="headerlink" title="一元三次方程"></a>一元三次方程</h3><script type="math/tex; mode=display">
ax^3+bx^2+cx+d=0\quad(a\ne0)</script><p>最高项系数化为 $1$：</p>
<script type="math/tex; mode=display">
x^3+\dfrac bax^2+\dfrac cax+\dfrac da=0\\
x^3+3\cdot\dfrac b{3a}x^2+3\cdot\dfrac {b^2}{9a^2}x+\dfrac {b^3}{27a^3}+\left(\dfrac ca-\dfrac{b^2}{9a^2}\right)x+\left(\dfrac da-\dfrac{b^3}{27a^3}\right)=0</script>]]></content>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>「积分表」0-目录、常用函数</title>
    <url>/2020/05/30/%E7%A7%AF%E5%88%86%E8%A1%A8/</url>
    <content><![CDATA[<!--comment-->
<span id="more"></span>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD<br>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p>
<h2 id="有利函数"><a href="#有利函数" class="headerlink" title="有利函数"></a>有利函数</h2><p>=======</p>
<h2 id="有理函数"><a href="#有理函数" class="headerlink" title="有理函数"></a>有理函数</h2><h1 id="gt-gt-gt-gt-gt-gt-gt-0ba721313a0b44445d4541e4245f1de71c394482"><a href="#gt-gt-gt-gt-gt-gt-gt-0ba721313a0b44445d4541e4245f1de71c394482" class="headerlink" title="&gt;&gt;&gt;&gt;&gt;&gt;&gt; 0ba721313a0b44445d4541e4245f1de71c394482"></a>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 0ba721313a0b44445d4541e4245f1de71c394482</h1><h2 id="有理函数-1"><a href="#有理函数-1" class="headerlink" title="有理函数"></a>有理函数</h2><blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>0ba721313a0b44445d4541e4245f1de71c394482</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<script type="math/tex; mode=display">
\begin{aligned}
&\int a\ \mathrm dx
\end{aligned}</script>]]></content>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>线性基笔记</title>
    <url>/2021/07/22/%E7%BA%BF%E6%80%A7%E5%9F%BA/</url>
    <content><![CDATA[<p>基是线性代数中的一个概念，在 OI 有着广泛的用途。</p>
<span id="more"></span>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>一个<strong>域</strong>是一个装备了两个二元运算 $+$、$\cdot$ 的集合 $F$，其中 $+:F\times F\to F$，$\cdot:F\times F\to F$，满足以下几个条件：</p>
<ul>
<li>加法满足结合律：$\forall a,b,c\in F:(a+b)+c=a+(b+c)$；</li>
<li>加法满足交换律：$\forall a,b\in F:a+b=b+a$；</li>
<li>乘法满足结合律：$\forall a,b,c\in F:(ab)c=a(bc)$；</li>
<li>乘法满足交换律：$\forall a,b\in F:ab=ba$；</li>
<li>乘法对加法满足分配律：$\forall a,b,c\in F:a(b+c)=ab+ac$；</li>
<li>存在加法单位元：$\exist 0\in F:\forall a\in F:0+a=a$；</li>
<li>存在乘法单位元：$\exist 1\in F,0\ne 1:\forall a\in F:1a=a$；（要求 $0\ne 1$ 是避免出现仅有一个元素的平凡域）</li>
<li>存在加法逆元：$\forall a\in F:\exist (-a)\in F:a+(-a)=0$；</li>
<li>非零元素存在乘法逆元：$\forall a\in F,a\ne 0:\exist a^{-1}\in F:a^{-1}a=1$.</li>
</ul>
<p>给定域 $F$，$F$ 上的<strong>向量空间</strong>是一个装备了两个二元运算的集合 $V$，其中 $+:V\times V\to V$，$\cdot:F\times V\to V$，满足以下几个条件：</p>
<ul>
<li>向量加法满足结合律：$\forall \mathbf u,\mathbf v,\mathbf w\in V:(\mathbf  u+\mathbf v)+\mathbf w=\mathbf u+(\mathbf v+\mathbf w)$；</li>
<li>向量加法满足交换律：$\forall \mathbf u,\mathbf v\in V:\mathbf u+\mathbf v=\mathbf v+\mathbf u$；</li>
<li>存在向量加法单位元：$\exist\mathbf 0\in V:\forall \mathbf v\in V:\mathbf v+\mathbf 0=\mathbf v$；</li>
<li>存在向量加法逆元：$\forall \mathbf v\in V:\exist (-\mathbf v)\in V:\mathbf v+(-\mathbf v)=\mathbf 0$；</li>
<li>标量乘法与标量的域乘法相容：$\forall a,b\in F,\mathbf v\in V:(ab)\mathbf v=a(b\mathbf  v)$；</li>
<li>存在标量乘法单位元：$\exist 1\in F:\forall \mathbf v\in V:1\mathbf v=\mathbf v$；</li>
<li>标量乘法对向量加法的分配律：$\forall a\in F,\mathbf u,\mathbf v\in V:a(\mathbf u+\mathbf v)=a\mathbf u+a\mathbf v$；</li>
<li>标量乘法对域加法的分配律：$\forall a,b\in F,\mathbf v\in V:(a+b)\mathbf v=a\mathbf v+b\mathbf v$.</li>
</ul>
<p>对于域 $F$ 上的向量空间 $V$ 的一个有限子集 $S={\mathbf v<em>1,\cdots,\mathbf v</em>{|S|}}$，称 $\mathbf v$ 是 $S$ 的一个<strong>线性组合</strong>，当且仅当 $\exist \lambda<em>1,\cdots\lambda</em>{|S|}\in F:\lambda<em>1\mathbf v_1+\cdots+\lambda</em>{|S|}\mathbf v_{|S|}=\mathbf v$。（规定：向量 $\mathbf 0$ 是空集的线性组合）</p>
]]></content>
      <categories>
        <category>线性代数</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>数学</tag>
        <tag>线性代数</tag>
      </tags>
  </entry>
  <entry>
    <title>ARC140 口胡</title>
    <url>/2022/05/15/20220515-ARC140-%E5%8F%A3%E8%83%A1/</url>
    <content><![CDATA[<p>一些难得的好题。</p>
<span id="more"></span>
<h2 id="A-Right-String"><a href="#A-Right-String" class="headerlink" title="A Right String"></a>A Right String</h2><p>一道简单字符串题。周期的性质值得留意。</p>
<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>定义 $f(T)$ 为对 $T$ 进行任意多次“将第一位的字符移到最后”操作后能够得到的本质不同的字符串个数。</p>
<p>给定 $S$，问对其的字符进行 $k$ 次单点修改后得到的 $S’$ 中 $f(S’)$ 的最小值。</p>
<p>$0\le k\le|S|\le 2000$，字符集为小写英语字母。</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先注意到 $f(T)$ 的答案为 $T$ 的最小正周期。</p>
<blockquote>
<p>证明：首先考虑 $S$ 复制一边后的 $S_2$，可得到的 $S’$ 即为 $S_2$ 的长度为 $|S|$ 的子段。如果有两个子段 $T_1$ 和 $T_2$ 相等，设其在 $S_2$ 中分别从 $i$、$j$ 开始（不妨令 $i&lt; j$），那么容易知道 $T_1$ 的前 $j-i$ 位也出现在 $T_2$ 的前 $j-i$ 位，即出现在 $T_1$ 的 $j-i+1$ 到 $2(j-i)$ 位，由此一直到末尾，因此 $T_1$ 的前 $j-i$ 位为 $T_1$ 的循环节。于是 $j-i$ 是 $T$ 的一个周期。反过来，$T$ 的每个周期 $t$ 都会使得 $i+kt$ 开始的 $S_2$ 的子段都相等。于是，$S_2$ 的本质不同的子段个数即为 $T$ 的最小正周期。</p>
</blockquote>
<p>于是我们只要枚举 $|S|$ 的因子 $d$，让每个模 $d$ 的剩余系内的下标都变为其中一个众数。单次枚举是 $O(n)$ 的，但是清空数组需要 $O(d\cdot|\Sigma|)$ 的时间。</p>
<p>时间复杂度为 $O(n\cdot d(n)+\sigma(n)\cdot|\Sigma|)$。取其一不紧但实用的上界，$O(n^{4/3}+n|\Sigma|\log\log n)$。事实上，这个做法可以通过 $n=2\times 10^5$ 的测试点。</p>
<p>当然也可以通过枚举的逆操作清空数组，这样就是 $O(n\cdot d(n))$，即 $O(n^{4/3})$ 的。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><a href="https://atcoder.jp/contests/arc140/submissions/31717459">https://atcoder.jp/contests/arc140/submissions/31717459</a>（$O(n^{4/3}+n|\Sigma|\log\log n)$）</p>
<h2 id="B-Shorten-ARC"><a href="#B-Shorten-ARC" class="headerlink" title="B Shorten ARC"></a>B Shorten ARC</h2><p> 一道简单贪心题。注意贪心策略的选择。</p>
<h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>给定一个字符串 $|S|$，仅包含 <code>A</code>、<code>R</code>、<code>C</code> 三种字符。可对其执行若干次操作，操作如下：</p>
<ul>
<li>如果当前的操作编号是奇数（首次为第 $1$ 次），那么可以选择一个连续的 <code>ARC</code> 子段变为 <code>R</code>；</li>
<li>否则，可以选择一个连续的 <code>ARC</code> 子段变为 <code>AC</code>。</li>
</ul>
<p>$|S|\le 2\times 10^5$。</p>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路 1"></a>思路 1</h3><p>我们先定义“块”：块是形如 <code>A...ARC...C</code> 的极长子段。容易知道无论进行多少次操作，块都不会合并。我们用 A 和 C 的较小值表示块的“大小”，那么如下的贪心策略显然成立：</p>
<ul>
<li>对于奇数次操作，选择一个最小的、大小大于等于 2 的块执行操作；</li>
<li>对于偶数次操作，选择一个最小的块操作。</li>
</ul>
<p>于是我们只需要先排个序就搞定了。时间复杂度 $O(n\log n)$。</p>
<h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路 2"></a>思路 2</h3><p>注意到上述过程的答案为 $\min{2m,\sum x_i}$ ，其中 $m$ 为块的个数，$x_i$ 为第 $i$ 个块的大小。</p>
<p>时间复杂度 $O(n)$。</p>
<h2 id="C-ABS-Permutation-LIS-ver"><a href="#C-ABS-Permutation-LIS-ver" class="headerlink" title="C ABS Permutation (LIS ver.)"></a>C ABS Permutation (LIS ver.)</h2><p>一道贪心与构造的结合。构造值得学习。</p>
<h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><p>给定 $n$，请构造一个首项给定的排列 $P_n$，使其差分数组每项取绝对值后得到的数列严格 LIS 长度最大。</p>
<p>$n\le 2\times 10^5$。</p>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>如果不限制首项的话，注意到以下的序列最优（以 $n=5$ 为例）：$3\ 4\ 5\ 2\ 1$。偶数的思路类似。</p>
<p>如果首项不是中位数，那么可以对剩下的数继续构造（以 $n=6$，$P_1=2$ 为例）：$2\ 4\ 3\ 5\ 6\ 1$ 奇数的思路类似。</p>
<p>时间复杂度 $O(n)$。</p>
<h2 id="D-One-to-One"><a href="#D-One-to-One" class="headerlink" title="D One to One"></a>D One to One</h2><p>一道有意思的计数题。这里对图的转化值得留心。</p>
<h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><p>给定一个有向图 $G$（可能有重边或自环），每个点的出度都不超过 $1$。现在要对 $G$ 执行如下的操作：</p>
<ul>
<li>首先，给 $G$ 内每个无出度的点 $u$ 钦定一条出边（可以连成重边或自环）；</li>
<li>然后将 $G$ 的每条边变为无向边。</li>
</ul>
<p>求最后可以得到的所有本质不同的无向图的联通分量个数之和，对 $998244353$ 取模。</p>
<p>$n\le 2000$。</p>
<h3 id="思路-1-1"><a href="#思路-1-1" class="headerlink" title="思路 1"></a>思路 1</h3><p>首先注意到初始图 $G$ 的每个连通块要么是树（恰有一个点出度为 $0$），要么是恰含有一个环的图（无法再向外连边）。设有 $m$ 个联通分量。</p>
<p>于是考虑缩点，一个树缩成一个红点，其他联通分量缩成一个黑点。给每个结点赋一个权值 $v_i$ 表示原图中连通块大小。我们只用考虑：新图中每个红点可以向外连一条边，构造出图之后变成无向图所得到的联通分量计数。</p>
<p>注意到新图满足每个联通分量都恰包含一个环或恰包含一个黑点。于是我们可以只统计环的贡献以及黑点的贡献。</p>
<p>考虑一个大小为 $k$ 的、包含缩点后 $x<em>1,x_2,\dots,x_k$ 的环对答案的贡献，这显然是 $n^{m-k}\cdot(k-1)!\cdot \prod v</em>{x_k}$。（第二部分是考虑环的形态，第三部分是考虑环在原图的种类数）</p>
<p>考虑一个黑点 $i$，它的贡献显然是 $n^t$，其中 $t$ 为所有红点的大小总和。</p>
<p>如何计算 $\sum\limits<em>k n^{m-k}(k-1)!\sum\limits</em>{(x<em>i)_k}\prod v</em>{x_k}$？直接背包计算。时间复杂度 $O(n^2)$。</p>
<h3 id="思路-2-1"><a href="#思路-2-1" class="headerlink" title="思路 2"></a>思路 2</h3><p>最后其实不必用背包计算贡献，可以考虑计算 $\prod(1+v_ix)$，时间复杂度 $O(n\log^2n)$。</p>
<h2 id="E-Not-Equal-Rectangle"><a href="#E-Not-Equal-Rectangle" class="headerlink" title="E Not Equal Rectangle"></a>E Not Equal Rectangle</h2><p>一道经典构造题。这个构造经常出现。</p>
<h3 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h3><p>给定 $n$，$m$，试构造一个元素都是 $1$ 到 $25$ 内的整数的矩阵，满足其不存在一个长、宽皆大于 $1$ 的子矩阵满足其四个顶点上的数完全相同。保证有解。</p>
<p>$n,m\le 500$。</p>
<h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>我们不妨考虑一个更强、更广泛的结论：给定素数 $p$，求一个 $p^2\times p^2$ 的矩阵满足元素都是 $\mathbb Z_p$ 内的整数，且不存在一个长、宽皆大于 $1$ 的子矩阵满足其四个顶点上的数完全相同。取 $p=23$ 的构造的前 $n$ 行 $m$ 列即可。</p>
<p>我们先构造小矩阵 $B<em>k(k\in\mathbb Z_p)=((i+j+k)\bmod p)</em>{p\times p}$，然后用 $p\times p$ 个小矩阵组成大矩阵：第 $i$ 行、第 $j$ 列的小矩阵为 $B_{ij\ \bmod\ p}$。</p>
<p>首先注意到每个小矩阵的每行、每列都没有相同的数，因此如果有一个子矩阵的四个顶点上的数完全相同，那它四个顶点应位于不同的小矩阵。考虑位于大矩阵同一列上的两个相同的数之间的距离。容易知道，如果设上面的数所在小矩阵编号为 $x$，下面的编号为 $y$，则它们之间的距离模 $p$ 同余于 $x-y$。因此，如果有四个顶点上的数都相同，不妨顺时针地设顶点所在小矩阵编号为 $a_1,a_2,a_3,a_4$（从左上角开始），那么有 $a_1-a_4=a_2-a_3$。显然，这与 $p$ 是素数的条件和大矩阵的构造相矛盾。因此大矩阵满足条件。</p>
<p>时间复杂度 $O(n^2)$。</p>
<h2 id="F-ABS-Permutation-Count-ver"><a href="#F-ABS-Permutation-Count-ver" class="headerlink" title="F ABS Permutation (Count ver.)"></a>F ABS Permutation (Count ver.)</h2><p>略。</p>
]]></content>
      <tags>
        <tag>AtCoder</tag>
      </tags>
  </entry>
</search>
